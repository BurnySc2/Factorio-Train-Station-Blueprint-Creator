{"version":3,"sources":["BlueprintCreation/CreateItems.ts","BlueprintCreation/CreateBlueprint.ts","constants/constants.ts","BlueprintCreation/CreateNormalStation.ts","BlueprintCreation/CreateFluidStation.ts","constants/verticalStackerCurves.ts","constants/diagonalStackerCurves.ts","BlueprintCreation/CreateStacker.ts","css/classes.ts","constants/tooltips.tsx","components/Sections/TrainTypeSettings.tsx","components/Sections/InserterSettings.tsx","components/Sections/SequentialStationSettings.tsx","components/Sections/ChestTypeSettings.tsx","components/Sections/BeltTypeSettings.tsx","components/Sections/RefillSettings.tsx","components/Sections/WireSettings.tsx","components/Sections/EnabledConditionSettings.tsx","components/Sections/LampsSettings.tsx","components/Sections/StationNameSettings.tsx","components/StationTypes/NormalStation.tsx","components/Sections/FluidSettings.tsx","components/StationTypes/FluidStation.tsx","components/Title.tsx","components/Footer.tsx","components/Sections/StackerSettings.tsx","components/StationTypes/Stacker.tsx","components/WarningMessage.tsx","components/ErrorMessage.tsx","constants/helper.ts","components/Website.tsx","components/MyRouter.tsx","App.tsx","index.tsx"],"names":["cloneDeep","require","entityNumber","resetEntityNumber","newItem","itemName","x","y","options","item","entity_number","name","position","direction","orientation","bar","filters","request_filters","request_from_buffers","control_behavior","station","manual_trains_limit","assignEntityNumberToItems","items","xOffset","yOffset","map","getTrainArray","bpSettings","startOffset","bottomOffset","returnArray","doubleHeaded","i","parseInt","locomotivesPerEnd","cargoWagon","push","getFrontLocomotivesArray","getBackLocomotivesArray","getCargoArray","placeTrainTracks","forEach","placeSignals","stationNumber","singleHeadedOffset","end","stationType","start","DIRECTION","DOWN","sequentialStation","sequentialStationsAmount","UP","placeTrainStop","controlBehavior","trainStopUsesEnabledCondition","circuit_condition","first_signal","type","constant","comparator","circuit_enable_disable","undefined","stationName","trainLimit","placeTrain","count","locoCount","cargoCount","includes","placeInserters","filterArray","inserterType","enableFilterInserters","filterInserters","inserterDirection","RIGHT","LEFT","filterFields","index","botChestTypes","chestType","placeChests","isRequesterChest","requests","itemType","chestRequestItemsType","itemAmount","chestRequestItemsAmount","requestFromBuffers","chestRequestFromBuffers","chestLimit","length","placeLoadingBelts","beltType","placeUnloadingBelts","placePumps","pumpDirection","placeStorageTanks","placePipes","array","placeVerticalBelts","splitters","mode","beltEnd","beltFlowDirection","sortByYPosition","splitter","reverse","placeSplitters","splitterType","splitterTypes","splitterDirection","placePoles","placeLamps","placeDecider","decider_conditions","enabledConditionAmount","enabledConditionOperator","output_signal","copy_count_from_input","placeTopRefuelPoles","placeBottomRefuelPoles","placeRefuelChestsAndInserters","refillFuelType","refillFuelAmount","connectTwoEntitiesWithWire","entity1","entity2","color","entity1ConNumber","entity2ConNumber","entity1Number","entity2Number","createWirePath","entity","conNumber","connections","entityColor","entity_id","connectItemsWithWire","item1","item2","mirrorItemsHorizontal","copy","mirrorXOffset","changeItemsCoordinates","copyPasteItems","clone","mixSides","sidesUsed","leftArray","rightArray","console","assert","sort","a","b","zlib","createBlueprint","createNormalStation","createFluidStation","createStacker","createBlueprintString","blueprint","icons","signal","entities","version","label","deflateSync","JSON","stringify","level","toString","encode","stationTypes","inserterTypes","inserter","chestTypes","chestTypesHuman","beltTypes","beltTypesHuman","beltSides","pumpSides","beltFlowDirections","refillFuelTypes","refillFuelTypesHuman","wood","coal","stackerDiagonalTypes","stackerTypes","enabledConditionOperators","enabledConditionOperatorsHuman","defaultSettings","tooltipText","sequantialStationBeltsGoAllTheWay","includeTrainInBlueprint","pumpSidesToBeUsed","pumpConnectWithPipe","Array","fill","beltSidesUsed","refillEnabled","connectChestsWithGreenWire","connectBothSideWithGreenWire","connectChestsWithRedWire","connectBothSideWithRedWire","placeLampsNearPoles","stackerNumberParallelLanes","diagonalStacker","stackerType","allItems","rightSplitters","stationsTarget","stationYOffset","stationItems","rightChests","leftChests","chests","rightSideItems","newSplitters","rightPoles","leftPoles","poles","leftSideItems","rightLamps","leftLamps","trainStop","topPoles","bottomPoles","decider","combineArray","splitterSlice","slice","rightVerticalBelts","leftVerticalBelts","leftSplitters","trainStops","filter","railSignals","stop","rightStorageTanks","leftStorageTanks","rightPumps","leftPumps","rightPipes","leftPipes","storageTanks","frontLeftCurve","frontRightCurve","backLeftCurve","backRightCurve","diagonalFrontLeftCurve","diagonalFrontRightCurve","diagonalBackLeftCurve","diagonalBackRightCurve","createDiagonalStacker","createVerticalStacker","frontCurve","backCurve","trainLength","Math","floor","copyPasteBlueprint","doubleHeadedFactor","diagonalLength","round","diagonals","newDiagonals","CLASSES","TOOLTIPS","beltFlow","TrainTypeSettings","props","hideIfDiagonalStacker","userSettings","className","min","id","data-tip","checked","onChange","e","setUserSettings","target","htmlFor","value","hidden","InserterSettings","inserterSelect","isFilterInserter","newFilterInputField","list","placeholder","oldArray","newValue","setValueAtIndex","previousIsEmpty","filterInserterInputFields","_","SequentialStationSettings","ChestTypeSettings","chestTypesHtml","canRequestFromBufferChests","chestRequests","BeltTypeSettings","hideIfBotChests","beltTypesHtml","beltSideHtml","beltSide","beltFlowHtml","RefillSettings","fuelTypesHtml","fuelType","WireSettings","hiddenWhenNormalStation","hiddenWhenFluidStation","hiddenWhenNotBothSides","myCheckbox","keyName","EnabledConditionSettings","hideIfCheckboxDisabled","enabledConditionOperatorHtml","operator","LampsSettings","StationNameSettings","NormalStation","FluidSettings","pumpSideHtml","pumpSide","FluidStation","Title","Footer","rel","href","StackerSettings","stackerTypesHtml","Stacker","WarningMessage","warningMessage","ErrorMessage","errorMessage","verifyNumberInput","myInput","isNaN","Website","useState","blueprintString","setBlueprintString","setWarningMessage","setErrorMessage","useEffect","newWarningMessage","checkForHintsBlueprintSettings","newErrorMessage","numberAsString","validateBlueprintSettings","stationTypeSelect","stationTypeHtml","itemdatalist","itemlist","itemInfo","onClick","readOnly","debug","message","place","multiline","MyRouter","path","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5de0dac2.chunk.js","sourcesContent":["import {\n    iBlueprintItem,\n    iBlueprintItemWithoutNumber,\n    iEntityId,\n    iWireColor,\n} from \"../constants/interfaces\"\nimport {\n    botChestTypes,\n    defaultSettings,\n    DIRECTION,\n    filterInserters,\n    mirrorXOffset,\n    splitterTypes,\n} from \"../constants/constants\"\n\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst cloneDeep = require(\"clone-deep\")\n\nexport let entityNumber = 1\nexport const resetEntityNumber = (): void => {\n    entityNumber = 1\n}\n\nexport const newItem = (\n    itemName: string,\n    x: number,\n    y: number,\n    options: {\n        direction?: number\n        orientation?: number\n        bar?: number\n        filters?: Array<{\n            index: number\n            name: string\n        }>\n        request_filters?: Array<{\n            index: number\n            name: string\n            count: number\n        }>\n        request_from_buffers?: boolean\n        station?: string\n        manual_trains_limit?: number\n        control_behavior?: {\n            decider_conditions?: {\n                first_signal: {\n                    type: string\n                    name: string\n                }\n                constant: number\n                comparator: string\n                output_signal: {\n                    type: string\n                    name: string\n                }\n                copy_count_from_input: boolean\n            }\n            circuit_condition?: {\n                first_signal: {\n                    type: string\n                    name: string\n                }\n                constant: number\n                comparator: string\n            }\n            circuit_enable_disable?: boolean\n        }\n    } = {}\n): iBlueprintItem => {\n    const item: iBlueprintItem = {\n        entity_number: entityNumber,\n        name: itemName,\n        position: {\n            x: x,\n            y: y,\n        },\n    }\n    if (options.direction) {\n        item.direction = options.direction\n    }\n    if (options.orientation) {\n        item.orientation = options.orientation\n    }\n    if (options.bar) {\n        item.bar = options.bar\n    }\n    if (options.filters) {\n        item.filters = options.filters\n    }\n    if (options.request_filters) {\n        item.request_filters = options.request_filters\n    }\n    if (options.request_from_buffers) {\n        item.request_from_buffers = options.request_from_buffers\n    }\n    if (options.control_behavior) {\n        item.control_behavior = options.control_behavior\n    }\n    if (options.station) {\n        item.station = options.station\n    }\n    if (options.manual_trains_limit) {\n        item.manual_trains_limit = options.manual_trains_limit\n    }\n    entityNumber += 1\n    return item\n}\nexport const assignEntityNumberToItems = (\n    items: iBlueprintItemWithoutNumber[],\n    xOffset = 0,\n    yOffset = 0\n): iBlueprintItem[] => {\n    return items.map((item) => {\n        return newItem(item.name, item.position.x + xOffset, item.position.y + yOffset, {\n            direction: item.direction,\n        })\n    })\n}\n// Get total train length but as array so I can loop over it\nexport const getTrainArray = (\n    bpSettings: typeof defaultSettings,\n    startOffset = 0,\n    bottomOffset = 0\n): number[] => {\n    const returnArray: number[] = []\n    const doubleHeaded = bpSettings.doubleHeaded ? 2 : 1\n    for (\n        let i = startOffset;\n        i <\n        (doubleHeaded * parseInt(bpSettings.locomotivesPerEnd) + parseInt(bpSettings.cargoWagon)) *\n            7 +\n            bottomOffset;\n        i++\n    ) {\n        returnArray.push(i)\n    }\n    return returnArray\n}\n// Only front locomotives as array\nexport const getFrontLocomotivesArray = (\n    bpSettings: typeof defaultSettings,\n    startOffset = -3,\n    bottomOffset = -3\n): number[] => {\n    const returnArray: number[] = []\n    for (let i = startOffset; i < parseInt(bpSettings.locomotivesPerEnd) * 7 + bottomOffset; i++) {\n        returnArray.push(i)\n    }\n    return returnArray\n}\n// Only back locomotives as array (or empty array if single headed)\nexport const getBackLocomotivesArray = (\n    bpSettings: typeof defaultSettings,\n    startOffset = -3,\n    bottomOffset = -3\n): number[] => {\n    if (!bpSettings.doubleHeaded) return []\n    const returnArray: number[] = []\n    for (\n        let i =\n            (parseInt(bpSettings.locomotivesPerEnd) + parseInt(bpSettings.cargoWagon)) * 7 +\n            startOffset;\n        i <\n        (2 * parseInt(bpSettings.locomotivesPerEnd) + parseInt(bpSettings.cargoWagon)) * 7 +\n            bottomOffset;\n        i++\n    ) {\n        returnArray.push(i)\n    }\n    return returnArray\n}\n// Returns an array of y-offsets where the cargo is\nexport const getCargoArray = (bpSettings: typeof defaultSettings, startOffset = -3): number[] => {\n    const returnArray: number[] = []\n    const bottomOffset = 1\n    for (\n        let i = parseInt(bpSettings.locomotivesPerEnd) * 7 + startOffset;\n        i <\n        (parseInt(bpSettings.locomotivesPerEnd) + parseInt(bpSettings.cargoWagon)) * 7 +\n            startOffset +\n            bottomOffset;\n        i++\n    ) {\n        returnArray.push(i)\n    }\n    return returnArray\n}\n\nexport const placeTrainTracks = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    const returnArray: iBlueprintItem[] = []\n    getTrainArray(bpSettings, -4).forEach((i) => {\n        if (i % 2 === 1) return\n        returnArray.push(newItem(\"straight-rail\", -1.5, i))\n    })\n    return returnArray\n}\n\nexport const placeSignals = (\n    bpSettings: typeof defaultSettings,\n    stationNumber: number\n): iBlueprintItem[] => {\n    // Size is 1x1, so coordinate ends in 0.5\n    const returnArray: iBlueprintItem[] = []\n    const start = 0\n    const doubleHeaded = bpSettings.doubleHeaded ? 2 : 1\n    const singleHeadedOffset = bpSettings.doubleHeaded ? 0 : 1\n    const end =\n        (doubleHeaded * parseInt(bpSettings.locomotivesPerEnd) + parseInt(bpSettings.cargoWagon)) *\n            7 +\n        singleHeadedOffset\n    // Stacker\n    if (bpSettings.stationType === \"Stacker\") {\n        returnArray.push(\n            newItem(\"rail-chain-signal\", 0, start - 3.5, { direction: DIRECTION.DOWN })\n        )\n        returnArray.push(newItem(\"rail-signal\", 0, end - 2.5, { direction: DIRECTION.DOWN }))\n    }\n    // If sequential station: place chain signal at front, rail signal between, rail signal at the back\n    else if (bpSettings.sequentialStation) {\n        if (stationNumber === 0) {\n            returnArray.push(\n                newItem(\"rail-chain-signal\", 0, start - 3.5, { direction: DIRECTION.DOWN })\n            )\n        }\n        if (stationNumber === parseInt(bpSettings.sequentialStationsAmount) - 1) {\n            returnArray.push(newItem(\"rail-signal\", 0, end - 2.5, { direction: DIRECTION.DOWN }))\n        }\n        if (stationNumber > 0) {\n            returnArray.push(newItem(\"rail-signal\", 0, start - 3.5, { direction: DIRECTION.DOWN }))\n        }\n    }\n    // Normal station\n    else {\n        if (bpSettings.doubleHeaded) {\n            // Chain signal at the back if double headed, because I assume double headed trains exit the same way they went in\n            returnArray.push(\n                newItem(\"rail-chain-signal\", -3, end - 2.5, { direction: DIRECTION.UP })\n            )\n        } else {\n            // Chain signal at the front if not double headed\n            returnArray.push(\n                newItem(\"rail-chain-signal\", 0, start - 3.5, { direction: DIRECTION.DOWN })\n            )\n        }\n        // Rail signal at the back\n        returnArray.push(newItem(\"rail-signal\", 0, end - 2.5, { direction: DIRECTION.DOWN }))\n    }\n\n    return returnArray\n}\n\nexport const placeTrainStop = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    // Size is 2x2, so coordinate ends in .0\n    const returnArray: iBlueprintItem[] = []\n    const controlBehavior = bpSettings.trainStopUsesEnabledCondition\n        ? {\n              circuit_condition: {\n                  first_signal: {\n                      type: \"virtual\",\n                      name: \"signal-red\",\n                  },\n                  constant: 0,\n                  comparator: \">\",\n              },\n              circuit_enable_disable: true,\n          }\n        : undefined\n    const options = {\n        station: bpSettings.stationName !== \"\" ? bpSettings.stationName : undefined,\n        manual_trains_limit:\n            bpSettings.trainLimit !== \"\" && parseInt(bpSettings.trainLimit) >= 0\n                ? parseInt(bpSettings.trainLimit)\n                : undefined,\n        control_behavior: controlBehavior,\n    }\n    returnArray.push(newItem(\"train-stop\", 0.5, -2, options))\n    return returnArray\n}\n\nexport const placeTrain = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    const returnArray: iBlueprintItem[] = []\n    let count = 0\n    const doubleHeaded = bpSettings.doubleHeaded ? 2 : 1\n    const locoCount = parseInt(bpSettings.locomotivesPerEnd)\n    const cargoCount = parseInt(bpSettings.cargoWagon)\n    parseInt(bpSettings.cargoWagon)\n    getTrainArray(bpSettings).forEach((y, i) => {\n        if (i % 7 !== 0) return\n        if (count < locoCount) {\n            returnArray.push(newItem(\"locomotive\", -1.5, y + 1))\n        } else if (count < locoCount + cargoCount) {\n            if (\n                [\"Loading Station\", \"Unloading Station\", \"Stacker\"].includes(bpSettings.stationType)\n            )\n                returnArray.push(newItem(\"cargo-wagon\", -1.5, y + 1))\n            else returnArray.push(newItem(\"fluid-wagon\", -1.5, y + 1))\n        } else if (count < locoCount * doubleHeaded + cargoCount) {\n            returnArray.push(newItem(\"locomotive\", -1.5, y + 1, { orientation: 0.5 }))\n        }\n        count += 1\n    })\n    return returnArray\n}\n\nexport const placeInserters = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    // Size is 1x1, so coordinate ends in 0.5\n    // Inserter direction = direction it grabs from\n    const returnArray: iBlueprintItem[] = []\n    const inserterType = bpSettings.enableFilterInserters\n        ? filterInserters[bpSettings.inserterType]\n        : bpSettings.inserterType\n    const inserterDirection =\n        bpSettings.stationType === \"Loading Station\" ? DIRECTION.RIGHT : DIRECTION.LEFT\n    let filterArray:\n        | undefined\n        | Array<{\n              index: number\n              name: string\n          }>\n    if (bpSettings.enableFilterInserters) {\n        filterArray = []\n        for (let i = 0; i < 5; i++) {\n            if (bpSettings.filterFields[i] === \"\") break\n            filterArray.push({\n                index: i + 1,\n                name: bpSettings.filterFields[i],\n            })\n        }\n    }\n    getCargoArray(bpSettings).forEach((y, i) => {\n        if (i % 7 === 0) return\n        returnArray.push(\n            newItem(inserterType, 0, y + 0.5, {\n                direction: inserterDirection,\n                filters: filterArray,\n            })\n        )\n\n        if (!botChestTypes.includes(bpSettings.chestType)) {\n            returnArray.push(\n                newItem(inserterType, 2, y + 0.5, {\n                    direction: inserterDirection,\n                    filters: filterArray,\n                })\n            )\n        }\n    })\n    return returnArray\n}\nexport const placeChests = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    // Size is 1x1, so coordinate ends in 0.5\n    const returnArray: iBlueprintItem[] = []\n\n    // For requester and buffer chests, add the requests\n    const isRequesterChest = [\"logistic-chest-requester\", \"logistic-chest-buffer\"].includes(\n        bpSettings.chestType\n    )\n    const requests: Array<{\n        index: number\n        name: string\n        count: number\n    }> = []\n    if (isRequesterChest) {\n        for (let i = 0; i < 12; i++) {\n            const itemType = bpSettings.chestRequestItemsType[i]\n            if (itemType === \"\") break\n            const itemAmount = bpSettings.chestRequestItemsAmount[i]\n            requests.push({\n                index: i + 1,\n                name: itemType,\n                count: parseInt(itemAmount),\n            })\n        }\n    }\n\n    const requestFromBuffers =\n        bpSettings.chestRequestFromBuffers && bpSettings.chestType === \"logistic-chest-requester\"\n            ? true\n            : undefined\n    getCargoArray(bpSettings).forEach((y, i) => {\n        if (i % 7 === 0) return\n        returnArray.push(\n            newItem(bpSettings.chestType, 1, y + 0.5, {\n                bar: parseInt(bpSettings.chestLimit),\n                request_filters: requests.length === 0 ? undefined : requests,\n                request_from_buffers: requestFromBuffers,\n            })\n        )\n    })\n    return returnArray\n}\n// Belts between inserter and splitter\nexport const placeLoadingBelts = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    // Size is 1x1, so coordinate ends in 0.5\n    const returnArray: iBlueprintItem[] = []\n    getCargoArray(bpSettings).forEach((y, i) => {\n        if (i % 7 === 1) {\n            returnArray.push(\n                newItem(bpSettings.beltType, 3, y + 0.5, { direction: DIRECTION.LEFT })\n            )\n        } else if (i % 7 === 2) {\n            returnArray.push(newItem(bpSettings.beltType, 3, y + 0.5, { direction: DIRECTION.UP }))\n        } else if (i % 7 === 3) {\n            returnArray.push(newItem(bpSettings.beltType, 3, y + 0.5, { direction: DIRECTION.UP }))\n        } else if (i % 7 === 4) {\n            returnArray.push(\n                newItem(bpSettings.beltType, 3, y + 0.5, { direction: DIRECTION.DOWN })\n            )\n        } else if (i % 7 === 5) {\n            returnArray.push(\n                newItem(bpSettings.beltType, 3, y + 0.5, { direction: DIRECTION.DOWN })\n            )\n        } else if (i % 7 === 6) {\n            returnArray.push(\n                newItem(bpSettings.beltType, 3, y + 0.5, { direction: DIRECTION.LEFT })\n            )\n        }\n    })\n    return returnArray\n}\nexport const placeUnloadingBelts = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    // Size is 1x1, so coordinate ends in 0.5\n    const returnArray: iBlueprintItem[] = []\n    getCargoArray(bpSettings).forEach((y, i) => {\n        if (i % 7 === 1) {\n            returnArray.push(\n                newItem(bpSettings.beltType, 3, y + 0.5, { direction: DIRECTION.DOWN })\n            )\n        } else if (i % 7 === 2) {\n            returnArray.push(\n                newItem(bpSettings.beltType, 3, y + 0.5, { direction: DIRECTION.DOWN })\n            )\n        } else if (i % 7 === 3) {\n            returnArray.push(\n                newItem(bpSettings.beltType, 3, y + 0.5, { direction: DIRECTION.RIGHT })\n            )\n        } else if (i % 7 === 4) {\n            returnArray.push(\n                newItem(bpSettings.beltType, 3, y + 0.5, { direction: DIRECTION.RIGHT })\n            )\n        } else if (i % 7 === 5) {\n            returnArray.push(newItem(bpSettings.beltType, 3, y + 0.5, { direction: DIRECTION.UP }))\n        } else if (i % 7 === 6) {\n            returnArray.push(newItem(bpSettings.beltType, 3, y + 0.5, { direction: DIRECTION.UP }))\n        }\n    })\n    return returnArray\n}\nexport const placePumps = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    const returnArray: iBlueprintItem[] = []\n    const pumpDirection =\n        bpSettings.stationType === \"Fluid Loading Station\" ? DIRECTION.LEFT : DIRECTION.RIGHT\n    getCargoArray(bpSettings).forEach((y, i) => {\n        if (i % 7 === 1) {\n            returnArray.push(\n                // Storage tank facing UP has connection topleft and bottomright\n                newItem(\"pump\", 0.5, y + 0.5, { direction: pumpDirection })\n            )\n        }\n        if (i % 7 === 6) {\n            // Storage tank facing RIGHT has connection topright and bottomleft\n            returnArray.push(newItem(\"pump\", 0.5, y + 0.5, { direction: pumpDirection }))\n        }\n    })\n    return returnArray\n}\nexport const placeStorageTanks = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    // Size is 3x3, so coordinate ends in 0.5\n    const returnArray: iBlueprintItem[] = []\n    getCargoArray(bpSettings).forEach((y, i) => {\n        if (i % 7 === 2) {\n            // Storage tank facing UP has connection topleft and bottomright\n            returnArray.push(newItem(\"storage-tank\", 3, y + 0.5))\n        }\n        if (i % 7 === 5) {\n            // Storage tank facing RIGHT has connection topright and bottomleft\n            returnArray.push(newItem(\"storage-tank\", 3, y + 0.5, { direction: DIRECTION.RIGHT }))\n        }\n    })\n    return returnArray\n}\nexport const placePipes = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    // Size is 1x1, so coordinate ends in 0.5\n    const returnArray: iBlueprintItem[] = []\n    getCargoArray(bpSettings).forEach((y, i, array) => {\n        if (i !== 0 && i !== array.length - 1 && i % 7 === 0) {\n            // Storage tank facing UP has connection topleft and bottomright\n            returnArray.push(newItem(\"pipe\", 2, y + 0.5))\n        }\n    })\n    return returnArray\n}\n// Belts that go from splitter to front/back\nexport const placeVerticalBelts = (\n    bpSettings: typeof defaultSettings,\n    splitters: Array<iBlueprintItem>\n): iBlueprintItem[] => {\n    const returnArray: iBlueprintItem[] = []\n    const mode = bpSettings.stationType === \"Loading Station\" ? \"load\" : \"unload\"\n    const beltEnd = bpSettings.beltFlowDirection\n    sortByYPosition(splitters)\n    let x = 5\n    // Unloading to front, splitters[0] is the front splitter\n    if (mode === \"unload\" && beltEnd === \"Front\") {\n        splitters.forEach((splitter) => {\n            for (let y = splitters[0].position.y; y <= splitter.position.y; y++) {\n                returnArray.push(\n                    newItem(bpSettings.beltType, x, y - 0.5, { direction: DIRECTION.UP })\n                )\n            }\n            for (let i = splitter.position.x + 1; i < x; i++) {\n                returnArray.push(\n                    newItem(bpSettings.beltType, i, splitter.position.y - 0.5, {\n                        direction: DIRECTION.RIGHT,\n                    })\n                )\n            }\n            x += 1\n        })\n    }\n    // Unloading to back, splitters[0] is the back splitter\n    if (mode === \"unload\" && beltEnd === \"Back\") {\n        splitters.reverse()\n        splitters.forEach((splitter) => {\n            for (let y = splitters[0].position.y; y >= splitter.position.y; y--) {\n                returnArray.push(\n                    newItem(bpSettings.beltType, x, y + 0.5, { direction: DIRECTION.DOWN })\n                )\n            }\n            for (let i = splitter.position.x + 1; i < x; i++) {\n                returnArray.push(\n                    newItem(bpSettings.beltType, i, splitter.position.y + 0.5, {\n                        direction: DIRECTION.RIGHT,\n                    })\n                )\n            }\n            x += 1\n        })\n    }\n    // Loading from front, splitters[0] is the front splitter\n    if (mode === \"load\" && beltEnd === \"Front\") {\n        splitters.forEach((splitter) => {\n            for (let y = splitters[0].position.y; y < splitter.position.y; y++) {\n                returnArray.push(\n                    newItem(bpSettings.beltType, x, y - 0.5, { direction: DIRECTION.DOWN })\n                )\n            }\n            for (let i = splitter.position.x + 1; i <= x; i++) {\n                returnArray.push(\n                    newItem(bpSettings.beltType, i, splitter.position.y - 0.5, {\n                        direction: DIRECTION.LEFT,\n                    })\n                )\n            }\n            x += 1\n        })\n    }\n    // Loading from back, splitters[0] is the back splitter\n    if (mode === \"load\" && beltEnd === \"Back\") {\n        splitters.reverse()\n        splitters.forEach((splitter) => {\n            for (let y = splitters[0].position.y; y > splitter.position.y; y--) {\n                returnArray.push(\n                    newItem(bpSettings.beltType, x, y + 0.5, { direction: DIRECTION.UP })\n                )\n            }\n            for (let i = splitter.position.x + 1; i <= x; i++) {\n                returnArray.push(\n                    newItem(bpSettings.beltType, i, splitter.position.y + 0.5, {\n                        direction: DIRECTION.LEFT,\n                    })\n                )\n            }\n            x += 1\n        })\n    }\n    return returnArray\n}\nexport const placeSplitters = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    const returnArray: iBlueprintItem[] = []\n    const splitterType = splitterTypes[bpSettings.beltType]\n    const splitterDirection =\n        bpSettings.stationType === \"Loading Station\" ? DIRECTION.LEFT : DIRECTION.RIGHT\n    getCargoArray(bpSettings).forEach((y, i) => {\n        if (i % 7 !== 4) return\n        returnArray.push(newItem(splitterType, 4, y, { direction: splitterDirection }))\n    })\n    return returnArray\n}\nexport const placePoles = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    // Size is 1x1, so coordinate ends in 0.5\n    const returnArray: iBlueprintItem[] = []\n    getCargoArray(bpSettings).forEach((y, i) => {\n        if (i % 7 !== 0) return\n        returnArray.push(newItem(\"medium-electric-pole\", 0, y + 0.5))\n    })\n    return returnArray\n}\nexport const placeLamps = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    // Size is 1x1, so coordinate ends in 0.5\n    const returnArray: iBlueprintItem[] = []\n    getCargoArray(bpSettings).forEach((y, i) => {\n        if (i % 7 !== 0) return\n        returnArray.push(newItem(\"small-lamp\", 1, y + 0.5))\n    })\n    return returnArray\n}\nexport const placeDecider = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    const returnArray: iBlueprintItem[] = []\n    returnArray.push(\n        newItem(\"decider-combinator\", 0, 1, {\n            control_behavior: {\n                decider_conditions: {\n                    first_signal: {\n                        type: \"virtual\",\n                        name: \"signal-anything\",\n                    },\n                    constant: parseInt(bpSettings.enabledConditionAmount),\n                    comparator: bpSettings.enabledConditionOperator,\n                    output_signal: {\n                        type: \"virtual\",\n                        name: \"signal-red\",\n                    },\n                    copy_count_from_input: false,\n                },\n            },\n        })\n    )\n    return returnArray\n}\n// Refuel\nexport const placeTopRefuelPoles = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    const returnArray: iBlueprintItem[] = []\n    getFrontLocomotivesArray(bpSettings).forEach((y, i, array) => {\n        if (i % 7 !== 0 || array.length === i - 1 || i === 0) return\n        returnArray.push(newItem(\"medium-electric-pole\", 0, y + 0.5))\n    })\n    return returnArray\n}\nexport const placeBottomRefuelPoles = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    const returnArray: iBlueprintItem[] = []\n    getBackLocomotivesArray(bpSettings).forEach((y, i, array) => {\n        if (i % 7 !== 0 || array.length === i - 1 || i === 0) return\n        returnArray.push(newItem(\"medium-electric-pole\", 0, y + 0.5))\n    })\n    return returnArray\n}\nexport const placeRefuelChestsAndInserters = (\n    bpSettings: typeof defaultSettings\n): iBlueprintItem[] => {\n    // Size is 1x1, so coordinate ends in 0.5\n    const returnArray: iBlueprintItem[] = []\n    getFrontLocomotivesArray(bpSettings).forEach((y, i) => {\n        if (i % 7 !== 6) return\n        returnArray.push(newItem(\"inserter\", 0, y + 0.5, { direction: DIRECTION.RIGHT }))\n        returnArray.push(\n            newItem(\"logistic-chest-requester\", 1, y + 0.5, {\n                request_filters: [\n                    {\n                        index: 1,\n                        name: bpSettings.refillFuelType,\n                        count: parseInt(bpSettings.refillFuelAmount),\n                    },\n                ],\n            })\n        )\n    })\n    getBackLocomotivesArray(bpSettings).forEach((y, i) => {\n        if (i % 7 !== 1) return\n        returnArray.push(newItem(\"inserter\", 0, y + 0.5, { direction: DIRECTION.RIGHT }))\n        returnArray.push(\n            newItem(\"logistic-chest-requester\", 1, y + 0.5, {\n                request_filters: [\n                    {\n                        index: 1,\n                        name: bpSettings.refillFuelType,\n                        count: parseInt(bpSettings.refillFuelAmount),\n                    },\n                ],\n            })\n        )\n    })\n    return returnArray\n}\n// Wire functions\nexport const connectTwoEntitiesWithWire = (\n    entity1: iBlueprintItem,\n    entity2: iBlueprintItem,\n    color: iWireColor,\n    entity1ConNumber: \"1\" | \"2\" = \"1\",\n    entity2ConNumber: \"1\" | \"2\" = \"1\"\n): void => {\n    const entity1Number = entity1.entity_number\n    const entity2Number = entity2.entity_number\n\n    const createWirePath = (entity: iBlueprintItem, conNumber: \"1\" | \"2\") => {\n        if (!entity.connections) {\n            entity.connections = {}\n        }\n        if (!entity.connections[conNumber]) {\n            entity.connections[conNumber] = {}\n        }\n        const entityColor = entity.connections[conNumber] as {\n            red?: iEntityId[]\n            green?: iEntityId[]\n        }\n        if (!entityColor[color]) {\n            entityColor[color] = []\n        }\n        // Or in short but typescript doesnt let me:\n        // if (!entity.connections[conNumber][color]) {\n        //     entity.connections[conNumber][color] = []\n        // }\n    }\n\n    createWirePath(entity1, entity1ConNumber)\n    createWirePath(entity2, entity2ConNumber)\n\n    // Let me know if you come up with a readable solution for this:\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    entity1.connections[entity1ConNumber][color].push({ entity_id: entity2Number })\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    entity2.connections[entity2ConNumber][color].push({ entity_id: entity1Number })\n}\nexport const connectItemsWithWire = (items: iBlueprintItem[], color: iWireColor): void => {\n    items.forEach((item1, index) => {\n        if (index === 0) return\n        const item2 = items[index - 1]\n        connectTwoEntitiesWithWire(item1, item2, color)\n    })\n}\n// Helper functions\nexport const mirrorItemsHorizontal = (items: iBlueprintItem[]): iBlueprintItem[] => {\n    // Returns a new array with clones of items\n    return items.map((item) => {\n        const copy = cloneDeep(item) as iBlueprintItem\n        copy.entity_number = entityNumber\n        entityNumber += 1\n        copy.position.x = -copy.position.x + mirrorXOffset\n        if (copy.name === \"storage-tank\") {\n            if (!copy.direction) copy.direction = 2\n            else copy.direction = undefined\n        } else {\n            if (copy.direction === DIRECTION.LEFT) copy.direction = DIRECTION.RIGHT\n            else if (copy.direction === DIRECTION.RIGHT) copy.direction = DIRECTION.LEFT\n        }\n        return copy\n    })\n}\nexport const changeItemsCoordinates = (items: iBlueprintItem[], x = 0, y = 0): void => {\n    // Changes the items directly\n    items.forEach((item) => {\n        item.position = {\n            x: item.position.x + x,\n            y: item.position.y + y,\n        }\n    })\n}\nexport const copyPasteItems = (items: iBlueprintItem[], x = 0, y = 0): iBlueprintItem[] => {\n    // Changes the items directly\n    return items.map((item) => {\n        const clone: iBlueprintItem = cloneDeep(item)\n        clone.entity_number = entityNumber\n        entityNumber += 1\n        clone.position = {\n            x: clone.position.x + x,\n            y: clone.position.y + y,\n        }\n        return clone\n    })\n}\nexport const mixSides = (\n    sidesUsed: \"Both\" | \"Right\" | \"Left\",\n    leftArray: iBlueprintItem[],\n    rightArray: iBlueprintItem[]\n): iBlueprintItem[] => {\n    if (sidesUsed === \"Both\") {\n        return [...leftArray, ...rightArray]\n    } else if (sidesUsed === \"Left\") {\n        return leftArray\n    } else if (sidesUsed === \"Right\") {\n        return rightArray\n    }\n    console.assert(\"Error returning empty array\")\n    return []\n}\nexport const sortByYPosition = (items: iBlueprintItem[]): void => {\n    items.sort((a, b) => {\n        // Smaller y first\n        if (a.position.y < b.position.y) {\n            return -1\n        } else if (a.position.y > b.position.y) {\n            return 1\n        }\n        // If equal, sort by x (right side first)\n        if (a.position.x < b.position.x) {\n            return 1\n        } else if (a.position.x > b.position.x) {\n            return -1\n        }\n        return 0\n    })\n}\n","import { defaultSettings } from \"../constants/constants\"\nimport { iBlueprint, iBlueprintItem } from \"../constants/interfaces\"\nimport { createNormalStation } from \"./CreateNormalStation\"\nimport { createFluidStation } from \"./CreateFluidStation\"\nimport { createStacker } from \"./CreateStacker\"\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst zlib = require(\"zlib\")\n\nexport const createBlueprint = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    if ([\"Loading Station\", \"Unloading Station\"].includes(bpSettings.stationType)) {\n        return createNormalStation(bpSettings)\n    }\n    if ([\"Fluid Loading Station\", \"Fluid Unloading Station\"].includes(bpSettings.stationType)) {\n        return createFluidStation(bpSettings)\n    } else if (bpSettings.stationType === \"Stacker\") {\n        return createStacker(bpSettings)\n    }\n    return []\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst decode = (blueprintString: string) => {\n    // UNTESTED stolen from https://github.com/demipixel/factorio-blueprint/blob/c21309e9023ee3740a5c3c647d87cb828ab3ecc4/src/util.ts#L20\n    return JSON.parse(\n        zlib.inflateSync(Buffer.from(blueprintString.slice(1), \"base64\")).toString(\"utf8\")\n    )\n}\n\nconst encode = (items: iBlueprintItem[]) => {\n    const blueprint = {\n        blueprint: {\n            icons: [\n                {\n                    signal: {\n                        type: \"item\",\n                        name: \"transport-belt\",\n                    },\n                    index: 1,\n                },\n            ],\n            entities: items,\n            item: \"blueprint\",\n            version: \"0\",\n            label: \"Blueprint\",\n        },\n    }\n    return \"0\" + zlib.deflateSync(JSON.stringify(blueprint), { level: 9 }).toString(\"base64\")\n}\n\nexport const createBlueprintString = (blueprint: iBlueprint): string => {\n    // Stolen from https://github.com/demipixel/factorio-blueprint/blob/c21309e9023ee3740a5c3c647d87cb828ab3ecc4/src/util.ts#L41\n    return encode(blueprint)\n}\n","import {\n    iBeltSides,\n    iBeltTypes,\n    iChestTypes,\n    iEnabledConditionOperators,\n    iInserterTypes,\n    iPumpSides,\n    iRefillFuelTypes,\n} from \"./interfaces\"\n\nexport const mirrorXOffset = -3\n\nexport const stationTypes = [\n    \"Loading Station\",\n    \"Unloading Station\",\n    \"Fluid Loading Station\",\n    \"Fluid Unloading Station\",\n    \"Stacker\",\n]\n\nexport const inserterTypes: iInserterTypes[] = [\"inserter\", \"fast-inserter\", \"stack-inserter\"]\nexport const filterInserters = {\n    inserter: \"filter-inserter\",\n    \"fast-inserter\": \"filter-inserter\",\n    \"stack-inserter\": \"filter-inserter\",\n}\nexport const basicChestTypes: iChestTypes[] = [\"wooden-chest\", \"iron-chest\", \"steel-chest\"]\nexport const botChestTypes: iChestTypes[] = [\n    \"logistic-chest-requester\",\n    \"logistic-chest-buffer\",\n    \"logistic-chest-passive-provider\",\n    \"logistic-chest-active-provider\",\n    \"logistic-chest-storage\",\n]\nexport const chestTypes: iChestTypes[] = [...basicChestTypes, ...botChestTypes]\nexport const chestTypesHuman = {\n    \"wooden-chest\": \"Wooden Chest\",\n    \"iron-chest\": \"Iron Chest\",\n    \"steel-chest\": \"Steel Chest\",\n    \"logistic-chest-requester\": \"Requester Chest\",\n    \"logistic-chest-buffer\": \"Buffer Chest\",\n    \"logistic-chest-passive-provider\": \"Passive Provider Chest\",\n    \"logistic-chest-active-provider\": \"Active Provider Chest\",\n    \"logistic-chest-storage\": \"Storage Chest\",\n}\nexport const beltTypes: iBeltTypes[] = [\n    \"transport-belt\",\n    \"fast-transport-belt\",\n    \"express-transport-belt\",\n]\nexport const beltTypesHuman = {\n    \"transport-belt\": \"Yellow Belt\",\n    \"fast-transport-belt\": \"Red Belt\",\n    \"express-transport-belt\": \"Blue Belt\",\n}\nexport const splitterTypes = {\n    \"transport-belt\": \"splitter\",\n    \"fast-transport-belt\": \"fast-splitter\",\n    \"express-transport-belt\": \"express-splitter\",\n}\nexport const beltSides: iBeltSides[] = [\"Both\", \"Right\", \"Left\"]\nexport const pumpSides: iPumpSides[] = [\"Right\", \"Left\"]\nexport const beltFlowDirections = [\"Front\", \"Back\", \"None\"]\nexport const refillFuelTypes: iRefillFuelTypes[] = [\n    \"wood\",\n    \"coal\",\n    \"solid-fuel\",\n    \"rocket-fuel\",\n    \"nuclear-fuel\",\n]\nexport const refillFuelTypesHuman = {\n    wood: \"Wood\",\n    coal: \"Coal\",\n    \"solid-fuel\": \"Solid Fuel\",\n    \"rocket-fuel\": \"Rocket Fuel\",\n    \"nuclear-fuel\": \"Nuclear Fuel\",\n}\n\nexport const stackerDiagonalTypes = [\"Left-Right\", \"Right-Left\"]\nexport const stackerTypes = [\"Left-Left\", \"Right-Right\", ...stackerDiagonalTypes]\n\nexport enum DIRECTION {\n    UP = 0,\n    RIGHT = 2,\n    DOWN = 4,\n    LEFT = 6,\n}\n\nexport const enabledConditionOperators: iEnabledConditionOperators[] = [\">\", \"<\"]\nexport const enabledConditionOperatorsHuman = { \">\": \"> (more than)\", \"<\": \"< (less than)\" }\n\nexport const defaultSettings = {\n    // Global tooltip text\n    tooltipText: \"\",\n\n    // Station type\n    stationType: [...stationTypes][0],\n    stationName: \"\",\n    trainLimit: \"\",\n\n    // Sequential Station\n    sequentialStation: false,\n    sequentialStationsAmount: \"3\",\n    sequantialStationBeltsGoAllTheWay: true,\n\n    // Train type\n    doubleHeaded: true,\n    locomotivesPerEnd: \"1\",\n    cargoWagon: \"2\",\n    includeTrainInBlueprint: true,\n\n    // Pump Settings\n    pumpSidesToBeUsed: [...pumpSides][0],\n    pumpConnectWithPipe: true,\n\n    // Inserter types\n    inserterType: [...inserterTypes][0],\n    enableFilterInserters: false,\n    // Items that need to be filtered, max array length: 5\n    filterFields: Array(5).fill(\"\"),\n\n    // Chest types and settings\n    chestType: [...chestTypes][1],\n    // How many slots in the chest are enabled\n    chestLimit: \"7\",\n    // For requester and buffer chests\n    chestRequestFromBuffers: true,\n    chestRequestItemsType: Array(12).fill(\"\"),\n    chestRequestItemsAmount: Array(12).fill(\"\"),\n\n    // Belt settings\n    beltType: [...beltTypes][1],\n    beltSidesUsed: [...beltSides][0],\n    beltFlowDirection: [...beltFlowDirections][0],\n\n    // Refill at station?\n    refillEnabled: true,\n    refillFuelType: [...refillFuelTypes][2],\n    refillFuelAmount: \"20\",\n\n    // Wire settings\n    connectChestsWithGreenWire: false,\n    connectBothSideWithGreenWire: false,\n    connectChestsWithRedWire: false,\n    connectBothSideWithRedWire: false,\n\n    // Enabled condition:\n    trainStopUsesEnabledCondition: false,\n    enabledConditionOperator: [...enabledConditionOperators][0],\n    enabledConditionAmount: \"4000\",\n\n    // Lights\n    placeLampsNearPoles: false,\n\n    // Stacker settings\n    stackerNumberParallelLanes: \"3\",\n    diagonalStacker: true,\n    stackerType: [...stackerTypes][0],\n}\n","import { botChestTypes, defaultSettings } from \"../constants/constants\"\nimport { iBlueprintItem } from \"../constants/interfaces\"\nimport {\n    getTrainArray,\n    placeChests,\n    mirrorItemsHorizontal,\n    mixSides,\n    sortByYPosition,\n    connectItemsWithWire,\n    connectTwoEntitiesWithWire,\n    placeInserters,\n    placeLoadingBelts,\n    placeUnloadingBelts,\n    placePoles,\n    placeTrainTracks,\n    placeSignals,\n    placeTrainStop,\n    placeRefuelChestsAndInserters,\n    placeTopRefuelPoles,\n    placeBottomRefuelPoles,\n    placeDecider,\n    placeLamps,\n    placeSplitters,\n    changeItemsCoordinates,\n    placeTrain,\n    placeVerticalBelts,\n    resetEntityNumber,\n} from \"./CreateItems\"\n\nexport const createNormalStation = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    resetEntityNumber()\n    let allItems: iBlueprintItem[] = []\n    let rightSplitters: iBlueprintItem[] = []\n\n    const stationsTarget = bpSettings.sequentialStation ? bpSettings.sequentialStationsAmount : 1\n    // For each station, create all items, then shift them down\n    for (let stationNumber = 0; stationNumber < stationsTarget; stationNumber++) {\n        const stationYOffset = (getTrainArray(bpSettings).length + 2) * stationNumber\n\n        let stationItems: iBlueprintItem[] = []\n        // Create chests and connect them with wire\n        const rightChests = placeChests(bpSettings)\n        const leftChests = mirrorItemsHorizontal(rightChests)\n        const chests = mixSides(bpSettings.beltSidesUsed, leftChests, rightChests)\n        // Sorting not required?\n        sortByYPosition(rightChests)\n        sortByYPosition(leftChests)\n        if (bpSettings.connectChestsWithGreenWire) {\n            connectItemsWithWire(leftChests, \"green\")\n            connectItemsWithWire(rightChests, \"green\")\n            if (bpSettings.connectBothSideWithGreenWire && bpSettings.beltSidesUsed === \"Both\") {\n                connectTwoEntitiesWithWire(rightChests[0], leftChests[0], \"green\")\n            }\n        }\n        if (bpSettings.connectChestsWithRedWire) {\n            connectItemsWithWire(leftChests, \"red\")\n            connectItemsWithWire(rightChests, \"red\")\n            if (bpSettings.connectBothSideWithRedWire && bpSettings.beltSidesUsed === \"Both\") {\n                connectTwoEntitiesWithWire(rightChests[0], leftChests[0], \"red\")\n            }\n        }\n\n        // Mirrorable items\n        let rightSideItems: iBlueprintItem[] = []\n        // Exclude belts and splitters (and without splitters: no vertical belts) if chest type uses bots\n        if (!botChestTypes.includes(bpSettings.chestType)) {\n            const newSplitters = placeSplitters(bpSettings)\n            changeItemsCoordinates(newSplitters, 0, stationYOffset)\n            rightSplitters = [...rightSplitters, ...newSplitters]\n            if (bpSettings.stationType === \"Loading Station\") {\n                rightSideItems = [...rightSideItems, ...placeLoadingBelts(bpSettings)]\n            } else {\n                // Unloading station\n                rightSideItems = [...rightSideItems, ...placeUnloadingBelts(bpSettings)]\n            }\n        }\n        rightSideItems = [...rightSideItems, ...placeInserters(bpSettings)]\n\n        const rightPoles = placePoles(bpSettings)\n        const leftPoles = mirrorItemsHorizontal(rightPoles)\n        const poles = mixSides(bpSettings.beltSidesUsed, leftPoles, rightPoles)\n        let leftSideItems: iBlueprintItem[] = mirrorItemsHorizontal(rightSideItems)\n\n        // Combine remaining items which were already mirrored and offset-ed\n        rightSideItems = [...rightSideItems, ...rightPoles, ...rightChests]\n        leftSideItems = [...leftSideItems, ...leftPoles, ...leftChests]\n        if (bpSettings.placeLampsNearPoles) {\n            const rightLamps = placeLamps(bpSettings)\n            const leftLamps = mirrorItemsHorizontal(rightLamps)\n            rightSideItems = [...rightSideItems, ...rightLamps]\n            leftSideItems = [...leftSideItems, ...leftLamps]\n        }\n\n        // All items that need no mirroring (tracks, signals, train stops, refuel chests and inserter, poles for those, decider combinator)\n        stationItems = [...stationItems, ...placeTrainTracks(bpSettings)]\n        stationItems = [...stationItems, ...placeSignals(bpSettings, stationNumber)]\n        const trainStop = placeTrainStop(bpSettings)[0]\n        stationItems = [...stationItems, trainStop]\n        if (bpSettings.refillEnabled)\n            stationItems = [...stationItems, ...placeRefuelChestsAndInserters(bpSettings)]\n        if (bpSettings.refillEnabled || bpSettings.trainStopUsesEnabledCondition) {\n            const topPoles = placeTopRefuelPoles(bpSettings)\n            const bottomPoles = placeBottomRefuelPoles(bpSettings)\n            stationItems = [...stationItems, ...topPoles, ...bottomPoles]\n            if (bpSettings.trainStopUsesEnabledCondition) {\n                const decider = placeDecider(bpSettings)[0]\n                // Combine decider and trainstop with green wire\n                connectTwoEntitiesWithWire(decider, trainStop, \"green\", \"2\", \"1\")\n                // Combine decider and poles with green wire\n                sortByYPosition(chests)\n                sortByYPosition(poles)\n                const combineArray = [decider, chests[0], poles[0], ...topPoles]\n                sortByYPosition(combineArray)\n                connectItemsWithWire(combineArray, \"green\")\n                stationItems = [...stationItems, decider]\n            }\n        }\n        if (bpSettings.includeTrainInBlueprint) {\n            stationItems = [...stationItems, ...placeTrain(bpSettings)]\n        }\n\n        // Combine left and right side items\n        stationItems = [\n            ...stationItems,\n            ...mixSides(bpSettings.beltSidesUsed, leftSideItems, rightSideItems),\n        ]\n\n        // Move all items by sequential station offset\n        changeItemsCoordinates(stationItems, 0, stationYOffset)\n        allItems = [...allItems, ...stationItems]\n    }\n\n    // If sequential and not lay all the way: go in splitter groups\n    if (bpSettings.sequentialStation && !bpSettings.sequantialStationBeltsGoAllTheWay) {\n        sortByYPosition(rightSplitters)\n        for (\n            let i = 0;\n            i < parseInt(bpSettings.cargoWagon) * parseInt(bpSettings.sequentialStationsAmount);\n            i += parseInt(bpSettings.cargoWagon)\n        ) {\n            const splitterSlice = rightSplitters.slice(i, i + parseInt(bpSettings.cargoWagon))\n            const rightVerticalBelts = placeVerticalBelts(bpSettings, splitterSlice)\n            const leftVerticalBelts = mirrorItemsHorizontal(rightVerticalBelts)\n            allItems = [\n                ...allItems,\n                ...mixSides(bpSettings.beltSidesUsed, leftVerticalBelts, rightVerticalBelts),\n            ]\n        }\n    }\n    // If sequential: lay all-the-way belts\n    else if (bpSettings.beltFlowDirection !== \"None\") {\n        const rightVerticalBelts = placeVerticalBelts(bpSettings, rightSplitters)\n        const leftVerticalBelts = mirrorItemsHorizontal(rightVerticalBelts)\n        allItems = [\n            ...allItems,\n            ...mixSides(bpSettings.beltSidesUsed, leftVerticalBelts, rightVerticalBelts),\n        ]\n    }\n    // Add splitters which were previously globally collected to create vertical belts\n    const leftSplitters = mirrorItemsHorizontal(rightSplitters)\n    allItems = [...allItems, ...mixSides(bpSettings.beltSidesUsed, leftSplitters, rightSplitters)]\n\n    // If sequential: connect train stop with next rail signal (green wire)\n    const trainStops = allItems.filter((item) => {\n        return item.name === \"train-stop\"\n    })\n    const railSignals = allItems.filter((item) => {\n        return item.name === \"rail-signal\"\n    })\n    sortByYPosition(trainStops)\n    sortByYPosition(railSignals)\n    trainStops.slice(1).forEach((stop, i) => {\n        const signal = railSignals[i]\n        connectTwoEntitiesWithWire(stop, signal, \"green\")\n    })\n\n    // All items are off by 0.5, fix here\n    changeItemsCoordinates(allItems, -0.5)\n    return allItems\n}\n","import { defaultSettings } from \"../constants/constants\"\nimport { iBlueprintItem } from \"../constants/interfaces\"\nimport {\n    getTrainArray,\n    mirrorItemsHorizontal,\n    mixSides,\n    sortByYPosition,\n    connectItemsWithWire,\n    connectTwoEntitiesWithWire,\n    placePoles,\n    placeTrainTracks,\n    placeSignals,\n    placeTrainStop,\n    placeRefuelChestsAndInserters,\n    placeTopRefuelPoles,\n    placeBottomRefuelPoles,\n    placeDecider,\n    placeLamps,\n    changeItemsCoordinates,\n    placeTrain,\n    resetEntityNumber,\n    placeStorageTanks,\n    placePumps,\n    placePipes,\n} from \"./CreateItems\"\n\nexport const createFluidStation = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    resetEntityNumber()\n    let allItems: iBlueprintItem[] = []\n\n    const stationsTarget = bpSettings.sequentialStation ? bpSettings.sequentialStationsAmount : 1\n    // For each station, create all items, then shift them down\n    for (let stationNumber = 0; stationNumber < stationsTarget; stationNumber++) {\n        const stationYOffset = (getTrainArray(bpSettings).length + 2) * stationNumber\n\n        let stationItems: iBlueprintItem[] = []\n        // Sorting not required?\n        const rightStorageTanks: iBlueprintItem[] = placeStorageTanks(bpSettings)\n        const leftStorageTanks: iBlueprintItem[] = mirrorItemsHorizontal(rightStorageTanks)\n        sortByYPosition(rightStorageTanks)\n        sortByYPosition(leftStorageTanks)\n        if (bpSettings.connectChestsWithGreenWire) {\n            connectItemsWithWire(leftStorageTanks, \"green\")\n            connectItemsWithWire(rightStorageTanks, \"green\")\n        }\n        if (bpSettings.connectChestsWithRedWire) {\n            connectItemsWithWire(leftStorageTanks, \"red\")\n            connectItemsWithWire(rightStorageTanks, \"red\")\n        }\n\n        // Mirrorable items\n        let rightSideItems: iBlueprintItem[] = []\n\n        const rightPoles = placePoles(bpSettings)\n        const leftPoles = mirrorItemsHorizontal(rightPoles)\n        const poles = mixSides(bpSettings.pumpSidesToBeUsed, leftPoles, rightPoles)\n        let leftSideItems: iBlueprintItem[] = mirrorItemsHorizontal(rightSideItems)\n        const rightPumps = placePumps(bpSettings)\n        const leftPumps = mirrorItemsHorizontal(rightPumps)\n        const rightPipes = placePipes(bpSettings)\n        const leftPipes = mirrorItemsHorizontal(rightPipes)\n\n        // Combine remaining items which were already mirrored and offset-ed\n        if (bpSettings.placeLampsNearPoles) {\n            const rightLamps = placeLamps(bpSettings)\n            const leftLamps = mirrorItemsHorizontal(rightLamps)\n            rightSideItems = [...rightSideItems, ...rightLamps]\n            leftSideItems = [...leftSideItems, ...leftLamps]\n        }\n        rightSideItems = [...rightSideItems, ...rightPoles, ...rightPumps, ...rightPipes]\n        leftSideItems = [...leftSideItems, ...leftPoles, ...leftPumps, ...leftPipes]\n\n        // All items that need no mirroring (tracks, signals, train stops, refuel chests and inserter, poles for those, decider combinator)\n        stationItems = [...stationItems, ...placeTrainTracks(bpSettings)]\n        stationItems = [...stationItems, ...placeSignals(bpSettings, stationNumber)]\n        const trainStop = placeTrainStop(bpSettings)[0]\n        stationItems = [...stationItems, trainStop]\n        if (bpSettings.refillEnabled)\n            stationItems = [...stationItems, ...placeRefuelChestsAndInserters(bpSettings)]\n        if (bpSettings.refillEnabled || bpSettings.trainStopUsesEnabledCondition) {\n            const topPoles = placeTopRefuelPoles(bpSettings)\n            const bottomPoles = placeBottomRefuelPoles(bpSettings)\n            stationItems = [...stationItems, ...topPoles, ...bottomPoles]\n            if (bpSettings.trainStopUsesEnabledCondition) {\n                const decider = placeDecider(bpSettings)[0]\n                // Combine decider and trainstop with green wire\n                connectTwoEntitiesWithWire(decider, trainStop, \"green\", \"2\", \"1\")\n                // Combine decider and poles with green wire\n                const storageTanks = mixSides(\n                    bpSettings.pumpSidesToBeUsed,\n                    leftStorageTanks,\n                    rightStorageTanks\n                )\n                sortByYPosition(storageTanks)\n                sortByYPosition(poles)\n                const combineArray = [decider, storageTanks[0], poles[0], ...topPoles]\n                sortByYPosition(combineArray)\n                connectItemsWithWire(combineArray, \"green\")\n                stationItems = [...stationItems, decider]\n            }\n        }\n        if (bpSettings.includeTrainInBlueprint) {\n            stationItems = [...stationItems, ...placeTrain(bpSettings)]\n        }\n\n        // Combine left and right side items\n        stationItems = [\n            ...stationItems,\n            ...mixSides(bpSettings.pumpSidesToBeUsed, leftSideItems, rightSideItems),\n            ...mixSides(bpSettings.pumpSidesToBeUsed, leftStorageTanks, rightStorageTanks),\n        ]\n\n        // Move all items by sequential station offset\n        changeItemsCoordinates(stationItems, 0, stationYOffset)\n        allItems = [...allItems, ...stationItems]\n    }\n\n    // If sequential: connect train stop with next rail signal (green wire)\n    const trainStops = allItems.filter((item) => {\n        return item.name === \"train-stop\"\n    })\n    const railSignals = allItems.filter((item) => {\n        return item.name === \"rail-signal\"\n    })\n    sortByYPosition(trainStops)\n    sortByYPosition(railSignals)\n    trainStops.slice(1).forEach((stop, i) => {\n        const signal = railSignals[i]\n        connectTwoEntitiesWithWire(stop, signal, \"green\")\n    })\n\n    // All items are off by 0.5, fix here\n    changeItemsCoordinates(allItems, -0.5)\n    return allItems\n}\n","import { iBlueprintItemWithoutNumber } from \"./interfaces\"\n\n// (0, 0) bending left 90 degrees to (-1, 1) curve\nexport const frontLeftCurve: iBlueprintItemWithoutNumber[] = [\n    {\n        name: \"curved-rail\",\n        position: {\n            x: 0,\n            y: 0,\n        },\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -4,\n            y: -4,\n        },\n        direction: 1,\n    },\n    {\n        name: \"curved-rail\",\n        position: {\n            x: -6,\n            y: -6,\n        },\n        direction: 3,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -11,\n            y: -8,\n        },\n        direction: 2,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -13,\n            y: -8,\n        },\n        direction: 2,\n    },\n]\n// (0, 0) bending right 90 degrees to (1, 1) curve\nexport const frontRightCurve: iBlueprintItemWithoutNumber[] = [\n    {\n        name: \"curved-rail\",\n        position: {\n            x: 2,\n            y: 0,\n        },\n        direction: 1,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: 5,\n            y: -5,\n        },\n        direction: 7,\n    },\n    {\n        name: \"curved-rail\",\n        position: {\n            x: 8,\n            y: -6,\n        },\n        direction: 6,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: 13,\n            y: -9,\n        },\n        direction: 2,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: 15,\n            y: -9,\n        },\n        direction: 2,\n    },\n]\n// (-1, -1) bending left 90 degreses to (0, 0)  curve\nexport const backLeftCurve: iBlueprintItemWithoutNumber[] = [\n    {\n        name: \"curved-rail\",\n        position: {\n            x: 0,\n            y: 6,\n        },\n        direction: 5,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -3,\n            y: 7,\n        },\n        direction: 3,\n    },\n    {\n        name: \"curved-rail\",\n        position: {\n            x: -6,\n            y: 12,\n        },\n        direction: 2,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -11,\n            y: 11,\n        },\n        direction: 2,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -13,\n            y: 11,\n        },\n        direction: 2,\n    },\n]\n// (1, -1) bending right 90 degreses to (0, 0)  curve\nexport const backRightCurve: iBlueprintItemWithoutNumber[] = [\n    {\n        name: \"curved-rail\",\n        position: {\n            x: 2,\n            y: 5,\n        },\n        direction: 4,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: 5,\n            y: 7,\n        },\n        direction: 5,\n    },\n    {\n        name: \"curved-rail\",\n        position: {\n            x: 8,\n            y: 11,\n        },\n        direction: 7,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: 13,\n            y: 11,\n        },\n        direction: 2,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: 15,\n            y: 11,\n        },\n        direction: 2,\n    },\n]\n","import { iBlueprintItemWithoutNumber } from \"./interfaces\"\n\n// (0, 0) bending left 45 degrees to (-1, 2) curve\n// The diagonal should be a bottomright-to-topright diagonal with the ending rail piece being the topleft piece\nexport const diagonalFrontLeftCurve: iBlueprintItemWithoutNumber[] = [\n    {\n        name: \"curved-rail\",\n        position: {\n            x: 0,\n            y: 0,\n        },\n        direction: 5,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -1,\n            y: -7,\n        },\n        direction: 0,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -1,\n            y: -9,\n        },\n        direction: 0,\n    },\n    {\n        name: \"rail-chain-signal\",\n        position: {\n            x: -3.5,\n            y: 4.5,\n        },\n        direction: 5,\n    },\n]\n// (0, 0) bending right 45 degrees to (2, 1) curve\n// The diagonal should be a bottomright-to-topright diagonal with the ending rail piece being the topleft piece\nexport const diagonalFrontRightCurve: iBlueprintItemWithoutNumber[] = [\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -3,\n            y: 2,\n        },\n        direction: 7,\n    },\n    {\n        name: \"curved-rail\",\n        position: {\n            x: 2,\n            y: 0,\n        },\n        direction: 6,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: 5,\n            y: -3,\n        },\n        direction: 2,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: 7,\n            y: -3,\n        },\n        direction: 2,\n    },\n    {\n        name: \"rail-chain-signal\",\n        position: {\n            x: -0.5,\n            y: 1.5,\n        },\n        direction: 5,\n    },\n]\n// (-2, -1) bending left 45 degreses to (0, 0) curve\nexport const diagonalBackLeftCurve: iBlueprintItemWithoutNumber[] = [\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -9 - 6,\n            y: 9 - 4,\n        },\n        direction: 2,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -7 - 6,\n            y: 9 - 4,\n        },\n        direction: 2,\n    },\n    {\n        name: \"curved-rail\",\n        position: {\n            x: -6,\n            y: 6,\n        },\n        direction: 2,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -5,\n            y: 1,\n        },\n        direction: 3,\n    },\n    {\n        name: \"rail-signal\",\n        position: {\n            x: -3.5 + 2,\n            y: 4.5 - 2,\n        },\n        direction: 5,\n    },\n]\n// (1, -2) bending right 45 degreses to (0, 0) curve\nexport const diagonalBackRightCurve: iBlueprintItemWithoutNumber[] = [\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -1 - 6,\n            y: 9,\n        },\n        direction: 0,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -1 - 6,\n            y: 11,\n        },\n        direction: 0,\n    },\n    {\n        name: \"curved-rail\",\n        position: {\n            x: -4,\n            y: 6,\n        },\n        direction: 1,\n    },\n    {\n        name: \"rail-signal\",\n        position: {\n            x: -2.5,\n            y: 3.5,\n        },\n        direction: 5,\n    },\n]\n","import { defaultSettings } from \"../constants/constants\"\nimport { iBlueprintItem, iBlueprintItemWithoutNumber } from \"../constants/interfaces\"\nimport {\n    getTrainArray,\n    placeTrainTracks,\n    placeSignals,\n    changeItemsCoordinates,\n    placeTrain,\n    resetEntityNumber,\n    assignEntityNumberToItems,\n    copyPasteItems,\n} from \"./CreateItems\"\nimport {\n    backLeftCurve,\n    backRightCurve,\n    frontLeftCurve,\n    frontRightCurve,\n} from \"../constants/verticalStackerCurves\"\nimport {\n    diagonalBackLeftCurve,\n    diagonalBackRightCurve,\n    diagonalFrontLeftCurve,\n    diagonalFrontRightCurve,\n} from \"../constants/diagonalStackerCurves\"\n\nexport const createStacker = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    resetEntityNumber()\n    if (bpSettings.diagonalStacker) {\n        return createDiagonalStacker(bpSettings)\n    } else {\n        return createVerticalStacker(bpSettings)\n    }\n}\n\nexport const createVerticalStacker = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    const trainLength = Math.floor(getTrainArray(bpSettings).length / 2) * 2\n\n    let frontCurve: iBlueprintItem[]\n    let backCurve: iBlueprintItem[]\n    if (bpSettings.stackerType === \"Left-Left\" || bpSettings.stackerType === \"Right-Left\") {\n        frontCurve = assignEntityNumberToItems(frontLeftCurve, -2, -8)\n    } else {\n        frontCurve = assignEntityNumberToItems(frontRightCurve, -2, -8)\n    }\n\n    if (bpSettings.stackerType === \"Left-Left\" || bpSettings.stackerType === \"Left-Right\") {\n        backCurve = assignEntityNumberToItems(backLeftCurve, -2, trainLength - 2)\n    } else {\n        backCurve = assignEntityNumberToItems(backRightCurve, -2, trainLength - 2)\n    }\n\n    let copyPasteBlueprint = [\n        ...placeTrainTracks(bpSettings),\n        ...placeSignals(bpSettings, 0),\n        ...frontCurve,\n        ...backCurve,\n    ]\n    if (bpSettings.includeTrainInBlueprint)\n        copyPasteBlueprint = [...copyPasteBlueprint, ...placeTrain(bpSettings)]\n    changeItemsCoordinates(copyPasteBlueprint, -0.5)\n\n    let allItems: iBlueprintItem[] = []\n    for (let i = 0; i < parseInt(bpSettings.stackerNumberParallelLanes); i++) {\n        allItems = [...allItems, ...copyPasteItems(copyPasteBlueprint, i * 4)]\n    }\n\n    return allItems\n}\n\nexport const createDiagonalStacker = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    const doubleHeadedFactor = bpSettings.doubleHeaded ? 2 : 1\n    const diagonalLength =\n        Math.round(\n            (2.5 *\n                (doubleHeadedFactor * parseInt(bpSettings.locomotivesPerEnd) +\n                    parseInt(bpSettings.cargoWagon))) /\n                2\n        ) *\n            2 +\n        1\n\n    let frontCurve: iBlueprintItem[]\n    let backCurve: iBlueprintItem[]\n    if (bpSettings.stackerType === \"Right-Left\") {\n        frontCurve = assignEntityNumberToItems(diagonalFrontLeftCurve, 8)\n        backCurve = assignEntityNumberToItems(\n            diagonalBackRightCurve,\n            8 - diagonalLength * 2,\n            diagonalLength * 2\n        )\n    } else {\n        frontCurve = assignEntityNumberToItems(diagonalFrontRightCurve, 8)\n        backCurve = assignEntityNumberToItems(\n            diagonalBackLeftCurve,\n            8 - diagonalLength * 2,\n            diagonalLength * 2\n        )\n    }\n    // TODO Support 'include train in blueprint' for diagonal stackers?\n\n    const diagonals: iBlueprintItemWithoutNumber[] = [\n        {\n            name: \"straight-rail\",\n            position: { x: 3, y: 3 },\n            direction: 7,\n        },\n        {\n            name: \"straight-rail\",\n            position: { x: 3, y: 1 },\n            direction: 3,\n        },\n    ]\n\n    let copyPasteBlueprint: iBlueprintItem[] = []\n    for (let i = 0; i < diagonalLength; i++) {\n        const newDiagonals = assignEntityNumberToItems(diagonals, -i * 2, i * 2)\n        copyPasteBlueprint = [...copyPasteBlueprint, ...newDiagonals]\n    }\n    copyPasteBlueprint = [...copyPasteBlueprint, ...frontCurve, ...backCurve]\n\n    let allItems: iBlueprintItem[] = []\n\n    for (let i = 0; i < parseInt(bpSettings.stackerNumberParallelLanes); i++) {\n        if (bpSettings.stackerType === \"Left-Right\") {\n            allItems = [...allItems, ...copyPasteItems(copyPasteBlueprint, i * 4)]\n        } else {\n            allItems = [...allItems, ...copyPasteItems(copyPasteBlueprint, 0, i * 4)]\n        }\n    }\n    return allItems\n}\n","export const CLASSES = {\n    // Title\n    title: \"self-center underline font-bold text-3xl text-gray-300\",\n\n    // Background\n    background: \"bg-gray-800 h-screen\",\n    background2: \"bg-gray-800 flex flex-col\",\n\n    // Sections\n    section: \"border-black p-1 my-1 w-full bg-blue-700\",\n    gridSection: \"grid grid-cols-2 gap-2\",\n\n    // HTML Elements\n    checkboxElement: \"h-full place-self-center\",\n    labelElement: \"w-full text-white\",\n    inputTextElement: \"border-2 border-gray-600 w-full bg-blue-900 text-white text-center\",\n    selectElement: \"border-2 border-gray-600 w-full bg-blue-900 text-white\",\n    buttonElement: \"border-2 border-gray-600 m-auto px-4 py-1 text-white rounded hover:bg-blue-300\",\n    // Styling doesnt apply for firefox, but works in chrome\n    optionElement: \"\",\n    footerElements: \"text-center text-gray-500 hover:bg-gray-300 rounded m-auto px-2 my-1\",\n    // Error message field\n    errorMessageElement:\n        \"text-center text-red-500 text-2xl m-1 p-2 border-2 border-red-500 bg-blue-800\",\n    // Warning message field\n    warningMessageElement: \"text-center text-yellow-500 text-xl m-1 px-2 bg-blue-800\",\n}\n","const TOOLTIPS = {\n    trainLimit: \"Limits the amount of trains that will be at most going to this station.\",\n    sequentialStation:\n        \"Puts multiple stations with these settings in a row.<br>Stations will be disabled if the next station is free.<br>This makes it so trains go to the first station first, then to the second station and so on.\",\n    sequantialStationBeltsGoAllTheWay:\n        \"If enabled, belts from 'enable belts' setting will go all the way to the top/bottom. Otherwise belts will only go to the top/bottom of each station.\",\n    doubleHeaded: \"Does your train have locomotives at each end (facing both ways)?\",\n    includeTrainInBlueprint:\n        \"If enabled, adds the train with the expected layout to the blueprint.\",\n    enableFilterInserters:\n        \"If enabled, turns all inserters to filters inserters of equivalent level.\",\n    chestType:\n        \"If chest type is a logistic chest, it is expected that bots will deliver/grab items from the chest. No belts will be placed.\",\n    chestLimit:\n        \"Limits the amount of free slots in the chests.<br>A cargo wagon has 40 slots, so 6 chests with 7 slots have enough capacity to fill one wagon, or 12 chests with 4.\",\n    beltFlow: \"If enabled, adds belt flow to the top/bottom of the station.\",\n    refillEnabled:\n        \"If enabled, places an inserter and a requester chest next to each locomotive with the desired fuel type and amount.\",\n    connectChestsWithGreenWire:\n        \"If enabled, connects all chests on the left and all chests / storage tanks on the right together with green wire.\",\n    connectBothSideWithGreenWire:\n        \"If enabled, connects the top left and top right chest / storage tank with green wire.\",\n    connectChestsWithRedWire:\n        \"If enabled, connects all chests on the left and all chests / storage tanks on the right together with green wire.\",\n    connectBothSideWithRedWire:\n        \"If enabled, connects the top left and top right chest / storage tank with red wire.\",\n    trainStopUsesEnabledCondition:\n        \"If enabled, adds a decider combinator.<br>Then it creates a green wire connection with trainStop-deciderCombinator-poles-topChest.<br>The train stop will be enabled if the condition (e.g. sum of items in chests > 4000) is met.\",\n}\nexport default TOOLTIPS\n","import React from \"react\"\nimport { iSectionsProps } from \"../../constants/interfaces\"\nimport { CLASSES } from \"../../css/classes\"\nimport TOOLTIPS from \"../../constants/tooltips\"\n\nexport default function TrainTypeSettings(props: iSectionsProps): JSX.Element {\n    const hideIfDiagonalStacker =\n        props.userSettings.stationType === \"Stacker\" && props.userSettings.diagonalStacker\n    return (\n        <div className={CLASSES.section}>\n            <div className={CLASSES.gridSection}>\n                <input\n                    className={CLASSES.checkboxElement}\n                    type={\"checkbox\"}\n                    min={\"0\"}\n                    id={\"doubleHeaded\"}\n                    data-tip={TOOLTIPS.doubleHeaded}\n                    checked={props.userSettings.doubleHeaded}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            doubleHeaded: e.target.checked,\n                        })\n                    }}\n                />\n                <label className={CLASSES.labelElement} htmlFor={\"doubleHeaded\"}>\n                    Double Headed\n                </label>\n                <input\n                    className={CLASSES.inputTextElement}\n                    type={\"number\"}\n                    min={\"0\"}\n                    id={\"locomotivesPerEnd\"}\n                    value={props.userSettings.locomotivesPerEnd}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            locomotivesPerEnd: e.target.value,\n                        })\n                    }}\n                />\n                <label className={CLASSES.labelElement} htmlFor={\"locomotivesPerEnd\"}>\n                    # locomotives per end\n                </label>\n                <input\n                    className={CLASSES.inputTextElement}\n                    type={\"number\"}\n                    id={\"cargoWagon\"}\n                    value={props.userSettings.cargoWagon}\n                    onChange={(e) => {\n                        props.setUserSettings({ ...props.userSettings, cargoWagon: e.target.value })\n                    }}\n                />\n                <label className={CLASSES.labelElement} htmlFor={\"cargoWagon\"}>\n                    # cargo wagons\n                </label>\n                <input\n                    className={CLASSES.checkboxElement}\n                    hidden={hideIfDiagonalStacker}\n                    type={\"checkbox\"}\n                    id={\"includeTrainInBlueprint\"}\n                    data-tip={TOOLTIPS.includeTrainInBlueprint}\n                    checked={props.userSettings.includeTrainInBlueprint}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            includeTrainInBlueprint: e.target.checked,\n                        })\n                    }}\n                />\n                <label\n                    className={CLASSES.labelElement}\n                    hidden={hideIfDiagonalStacker}\n                    htmlFor={\"includeTrainInBlueprint\"}\n                >\n                    Include Train in Blueprint\n                </label>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport { inserterTypes } from \"../../constants/constants\"\nimport { iInserterTypes, iSectionsProps } from \"../../constants/interfaces\"\nimport { CLASSES } from \"../../css/classes\"\nimport TOOLTIPS from \"../../constants/tooltips\"\n\nexport default function InserterSettings(props: iSectionsProps): JSX.Element {\n    // All inserter types\n    const inserterSelect = (\n        <select\n            id={\"inserterType\"}\n            className={CLASSES.selectElement}\n            value={props.userSettings.inserterType}\n            onChange={(e) => {\n                props.setUserSettings({\n                    ...props.userSettings,\n                    inserterType: e.target.value as iInserterTypes,\n                })\n            }}\n        >\n            {inserterTypes.map((inserterType) => {\n                return (\n                    <option\n                        className={CLASSES.optionElement}\n                        key={inserterType}\n                        value={inserterType}\n                    >\n                        {inserterType}\n                    </option>\n                )\n            })}\n        </select>\n    )\n\n    const setValueAtIndex = (oldArray: string[], newValue: string, index: number) => {\n        props.setUserSettings({\n            ...props.userSettings,\n            // Replace the value at the fieldIndex using spread operator\n            filterFields: [\n                ...props.userSettings.filterFields.slice(0, index),\n                newValue,\n                ...props.userSettings.filterFields.slice(index + 1),\n            ],\n        })\n    }\n\n    const isFilterInserter = props.userSettings.enableFilterInserters\n\n    const newFilterInputField = (index: number) => {\n        return (\n            <input\n                key={`${index}`}\n                className={CLASSES.inputTextElement}\n                hidden={!isFilterInserter}\n                list={\"itemlist\"}\n                value={props.userSettings.filterFields[index]}\n                placeholder={\n                    index === 0 ? \"Filter 1 - e.g. 'iron-ore'\" : `Filter ${index + 1} item type`\n                }\n                onChange={(e) => {\n                    setValueAtIndex(props.userSettings.filterFields, e.target.value, index)\n                }}\n            />\n        )\n    }\n\n    // let filterInserterInputFields = []\n    let previousIsEmpty = -1\n    const filterInserterInputFields = new Array(5).fill(0).map((_, index) => {\n        if (previousIsEmpty !== -1 && previousIsEmpty < index) {\n            return undefined\n        }\n        if (props.userSettings.filterFields[index] === \"\") {\n            previousIsEmpty = index\n        }\n        return newFilterInputField(index)\n    })\n\n    return (\n        <div className={CLASSES.section}>\n            <div className={CLASSES.gridSection}>\n                {inserterSelect}\n                <label className={CLASSES.labelElement} htmlFor={\"inserterType\"}>\n                    Inserter Type\n                </label>\n                <input\n                    className={CLASSES.checkboxElement}\n                    id={\"filterInserterEnabled\"}\n                    type={\"checkbox\"}\n                    data-tip={TOOLTIPS.enableFilterInserters}\n                    checked={props.userSettings.enableFilterInserters}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            enableFilterInserters: e.target.checked,\n                        })\n                    }}\n                />\n                <label className={CLASSES.labelElement} htmlFor={\"filterInserterEnabled\"}>\n                    Enabled Filter Inserters\n                </label>\n                {filterInserterInputFields}\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport { CLASSES } from \"../../css/classes\"\nimport { iSectionsProps } from \"../../constants/interfaces\"\nimport TOOLTIPS from \"../../constants/tooltips\"\n\nexport default function SequentialStationSettings(props: iSectionsProps): JSX.Element {\n    return (\n        <div className={CLASSES.section}>\n            <div className={CLASSES.gridSection}>\n                <input\n                    className={CLASSES.checkboxElement}\n                    type={\"checkbox\"}\n                    id={\"sequentialStation\"}\n                    data-tip={TOOLTIPS.sequentialStation}\n                    checked={props.userSettings.sequentialStation}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            sequentialStation: e.target.checked,\n                        })\n                    }}\n                />\n                <label className={CLASSES.labelElement} htmlFor={\"sequentialStation\"}>\n                    Sequential Station?\n                </label>\n                <input\n                    className={CLASSES.inputTextElement}\n                    hidden={!props.userSettings.sequentialStation}\n                    type={\"number\"}\n                    id={\"sequentialStationsAmount\"}\n                    value={props.userSettings.sequentialStationsAmount}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            sequentialStationsAmount: e.target.value,\n                        })\n                    }}\n                />\n                <label\n                    className={CLASSES.labelElement}\n                    hidden={!props.userSettings.sequentialStation}\n                    htmlFor={\"sequentialStationsAmount\"}\n                >\n                    # sequential stations in a row\n                </label>\n                <input\n                    className={CLASSES.checkboxElement}\n                    hidden={!props.userSettings.sequentialStation}\n                    type={\"checkbox\"}\n                    id={\"sequantialStationBeltsGoAllTheWay\"}\n                    data-tip={TOOLTIPS.sequantialStationBeltsGoAllTheWay}\n                    checked={props.userSettings.sequantialStationBeltsGoAllTheWay}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            sequantialStationBeltsGoAllTheWay: e.target.checked,\n                        })\n                    }}\n                />\n                <label\n                    className={CLASSES.labelElement}\n                    hidden={!props.userSettings.sequentialStation}\n                    htmlFor={\"sequantialStationBeltsGoAllTheWay\"}\n                >\n                    Belts go all the way\n                </label>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport { iChestTypes, iSectionsProps } from \"../../constants/interfaces\"\nimport { CLASSES } from \"../../css/classes\"\nimport { chestTypes, chestTypesHuman } from \"../../constants/constants\"\nimport TOOLTIPS from \"../../constants/tooltips\"\n\nexport default function ChestTypeSettings(props: iSectionsProps): JSX.Element {\n    const chestTypesHtml = (\n        <select\n            id={\"chestTypes\"}\n            className={CLASSES.selectElement}\n            value={props.userSettings.chestType}\n            data-tip={TOOLTIPS.chestType}\n            onChange={(e) => {\n                props.setUserSettings({\n                    ...props.userSettings,\n                    chestType: e.target.value as iChestTypes,\n                })\n            }}\n        >\n            {chestTypes.map((chestType) => {\n                return (\n                    <option className={CLASSES.optionElement} key={chestType} value={chestType}>\n                        {chestTypesHuman[chestType]}\n                    </option>\n                )\n            })}\n        </select>\n    )\n\n    const isRequesterChest = [\"logistic-chest-requester\", \"logistic-chest-buffer\"].includes(\n        props.userSettings.chestType\n    )\n    const canRequestFromBufferChests = props.userSettings.chestType === \"logistic-chest-requester\"\n\n    let previousIsEmpty = -1\n    const chestRequests = new Array(24).fill(0).map((_, i) => {\n        const index = Math.floor(i / 2)\n        if (previousIsEmpty !== -1 && previousIsEmpty < index) {\n            return undefined\n        }\n        if (props.userSettings.chestRequestItemsType[index] === \"\") {\n            previousIsEmpty = index\n        }\n        if (i % 2 === 0) {\n            return (\n                <input\n                    className={CLASSES.inputTextElement}\n                    hidden={!isRequesterChest}\n                    list={\"itemlist\"}\n                    key={`${index} chestRequestItemsType`}\n                    type={\"text\"}\n                    value={props.userSettings.chestRequestItemsType[index]}\n                    placeholder={`Request ${index + 1} item type`}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            chestRequestItemsType: [\n                                ...props.userSettings.chestRequestItemsType.slice(0, index),\n                                e.target.value,\n                                ...props.userSettings.chestRequestItemsType.slice(index + 1),\n                            ],\n                        })\n                    }}\n                />\n            )\n        } else {\n            return (\n                <input\n                    className={CLASSES.inputTextElement}\n                    hidden={!isRequesterChest}\n                    key={`${index} chestRequestItemsAmount`}\n                    type={\"number\"}\n                    min={\"0\"}\n                    value={props.userSettings.chestRequestItemsAmount[index]}\n                    placeholder={`Request ${index + 1} amount`}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            chestRequestItemsAmount: [\n                                ...props.userSettings.chestRequestItemsAmount.slice(0, index),\n                                e.target.value,\n                                ...props.userSettings.chestRequestItemsAmount.slice(index + 1),\n                            ],\n                        })\n                    }}\n                />\n            )\n        }\n    })\n\n    return (\n        <div className={CLASSES.section}>\n            <div className={CLASSES.gridSection}>\n                {chestTypesHtml}\n                <label className={CLASSES.labelElement} htmlFor={\"chestTypes\"}>\n                    Chest Type\n                </label>\n                <input\n                    className={CLASSES.inputTextElement}\n                    type={\"number\"}\n                    value={props.userSettings.chestLimit}\n                    data-tip={TOOLTIPS.chestLimit}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            chestLimit: e.target.value,\n                        })\n                    }}\n                />\n                <label className={CLASSES.labelElement} htmlFor={\"chestTypes\"}>\n                    Chest limit\n                </label>\n                <input\n                    className={CLASSES.checkboxElement}\n                    hidden={!canRequestFromBufferChests}\n                    id={\"requestFromBuffers\"}\n                    type={\"checkbox\"}\n                    checked={props.userSettings.chestRequestFromBuffers}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            chestRequestFromBuffers: e.target.checked,\n                        })\n                    }}\n                />\n                <label\n                    className={CLASSES.labelElement}\n                    hidden={!canRequestFromBufferChests}\n                    htmlFor={\"requestFromBuffers\"}\n                >\n                    Request from Buffers\n                </label>\n                {chestRequests}\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport { iBeltSides, iBeltTypes, iSectionsProps } from \"../../constants/interfaces\"\nimport { CLASSES } from \"../../css/classes\"\nimport {\n    beltFlowDirections,\n    beltSides,\n    beltTypes,\n    beltTypesHuman,\n    botChestTypes,\n} from \"../../constants/constants\"\nimport TOOLTIPS from \"../../constants/tooltips\"\n\nexport default function BeltTypeSettings(props: iSectionsProps): JSX.Element {\n    const hideIfBotChests = botChestTypes.includes(props.userSettings.chestType)\n\n    const beltTypesHtml = (\n        <select\n            id={\"beltType\"}\n            className={CLASSES.selectElement}\n            value={props.userSettings.beltType}\n            onChange={(e) => {\n                props.setUserSettings({\n                    ...props.userSettings,\n                    beltType: e.target.value as iBeltTypes,\n                })\n            }}\n        >\n            {beltTypes.map((beltType) => {\n                return (\n                    <option className={CLASSES.optionElement} key={beltType} value={beltType}>\n                        {beltTypesHuman[beltType]}\n                    </option>\n                )\n            })}\n        </select>\n    )\n\n    const beltSideHtml = (\n        <select\n            id={\"sidesUsed\"}\n            className={CLASSES.selectElement}\n            value={props.userSettings.beltSidesUsed}\n            onChange={(e) => {\n                props.setUserSettings({\n                    ...props.userSettings,\n                    beltSidesUsed: e.target.value as iBeltSides,\n                })\n            }}\n        >\n            {beltSides.map((beltSide) => {\n                return (\n                    <option className={CLASSES.optionElement} key={beltSide} value={beltSide}>\n                        {beltSide}\n                    </option>\n                )\n            })}\n        </select>\n    )\n    const beltFlowHtml = (\n        <select\n            id={\"beltFlow\"}\n            className={CLASSES.selectElement}\n            value={props.userSettings.beltFlowDirection}\n            data-tip={TOOLTIPS.beltFlow}\n            onChange={(e) => {\n                props.setUserSettings({ ...props.userSettings, beltFlowDirection: e.target.value })\n            }}\n        >\n            {beltFlowDirections.map((beltFlow) => {\n                return (\n                    <option className={CLASSES.optionElement} key={beltFlow} value={beltFlow}>\n                        {beltFlow}\n                    </option>\n                )\n            })}\n        </select>\n    )\n\n    return (\n        <div className={CLASSES.section} hidden={hideIfBotChests}>\n            <div className={CLASSES.gridSection}>\n                {beltTypesHtml}\n                <label className={CLASSES.labelElement} htmlFor={\"beltType\"}>\n                    Belt Type\n                </label>\n                {beltSideHtml}\n                <label className={CLASSES.labelElement} htmlFor={\"sidesUsed\"}>\n                    Sides to be used\n                </label>\n                {beltFlowHtml}\n                <label className={CLASSES.labelElement} htmlFor={\"beltFlow\"}>\n                    Belt Flow\n                </label>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport { iRefillFuelTypes, iSectionsProps } from \"../../constants/interfaces\"\nimport { CLASSES } from \"../../css/classes\"\nimport { refillFuelTypes, refillFuelTypesHuman } from \"../../constants/constants\"\nimport TOOLTIPS from \"../../constants/tooltips\"\n\nexport default function RefillSettings(props: iSectionsProps): JSX.Element {\n    const fuelTypesHtml = (\n        <select\n            className={CLASSES.selectElement}\n            hidden={!props.userSettings.refillEnabled}\n            value={props.userSettings.refillFuelType}\n            onChange={(e) => {\n                props.setUserSettings({\n                    ...props.userSettings,\n                    refillFuelType: e.target.value as iRefillFuelTypes,\n                })\n            }}\n        >\n            {refillFuelTypes.map((fuelType) => {\n                return (\n                    <option className={CLASSES.optionElement} key={fuelType} value={fuelType}>\n                        {refillFuelTypesHuman[fuelType]}\n                    </option>\n                )\n            })}\n        </select>\n    )\n\n    return (\n        <div className={CLASSES.section}>\n            <div className={CLASSES.gridSection}>\n                <input\n                    className={CLASSES.checkboxElement}\n                    type={\"checkbox\"}\n                    id={\"refillEnabled\"}\n                    checked={props.userSettings.refillEnabled}\n                    data-tip={TOOLTIPS.refillEnabled}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            refillEnabled: e.target.checked,\n                        })\n                    }}\n                />\n                <label className={CLASSES.labelElement} htmlFor={\"refillEnabled\"}>\n                    Refill at this Station?\n                </label>\n                {fuelTypesHtml}\n                <label\n                    className={CLASSES.labelElement}\n                    hidden={!props.userSettings.refillEnabled}\n                    htmlFor={\"fuelTypes\"}\n                >\n                    Fuel Type\n                </label>\n                <input\n                    type={\"number\"}\n                    className={CLASSES.inputTextElement}\n                    hidden={!props.userSettings.refillEnabled}\n                    value={props.userSettings.refillFuelAmount}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            refillFuelAmount: e.target.value,\n                        })\n                    }}\n                />\n                <label\n                    className={CLASSES.labelElement}\n                    hidden={!props.userSettings.refillEnabled}\n                    htmlFor={\"fuelAmount\"}\n                >\n                    Amount\n                </label>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport { iSectionsProps } from \"../../constants/interfaces\"\nimport { CLASSES } from \"../../css/classes\"\nimport TOOLTIPS from \"../../constants/tooltips\"\n\nexport default function WireSettings(props: iSectionsProps): JSX.Element {\n    const normalTypes = [\"Loading Station\", \"Unloading Station\"]\n    const fluidTypes = [\"Fluid Loading Station\", \"Fluid Unloading Station\"]\n    const hiddenWhenNormalStation = normalTypes.includes(props.userSettings.stationType)\n    const hiddenWhenFluidStation = fluidTypes.includes(props.userSettings.stationType)\n    const hiddenWhenNotBothSides = props.userSettings.beltSidesUsed !== \"Both\"\n\n    const myCheckbox = (\n        keyName:\n            | \"connectChestsWithGreenWire\"\n            | \"connectBothSideWithGreenWire\"\n            | \"connectChestsWithRedWire\"\n            | \"connectBothSideWithRedWire\",\n        hidden = false\n    ) => {\n        return (\n            <input\n                className={CLASSES.checkboxElement}\n                hidden={hidden}\n                key={keyName}\n                type={\"checkbox\"}\n                id={keyName}\n                checked={props.userSettings[keyName]}\n                data-tip={TOOLTIPS[keyName]}\n                onChange={(e) => {\n                    props.setUserSettings({\n                        ...props.userSettings,\n                        [keyName]: e.target.checked,\n                    })\n                }}\n            />\n        )\n    }\n\n    return (\n        <div className={CLASSES.section}>\n            <div className={CLASSES.gridSection}>\n                {myCheckbox(\"connectChestsWithGreenWire\")}\n                <label\n                    className={CLASSES.labelElement}\n                    hidden={hiddenWhenFluidStation}\n                    htmlFor={\"connectChestsWithGreenWire\"}\n                >\n                    Connect chests with green wire?\n                </label>\n                <label\n                    className={CLASSES.labelElement}\n                    hidden={hiddenWhenNormalStation}\n                    htmlFor={\"connectChestsWithGreenWire\"}\n                >\n                    Connect storage tanks with green wire?\n                </label>\n                {myCheckbox(\n                    \"connectBothSideWithGreenWire\",\n                    hiddenWhenFluidStation || hiddenWhenNotBothSides\n                )}\n                <label\n                    className={CLASSES.labelElement}\n                    hidden={hiddenWhenFluidStation || hiddenWhenNotBothSides}\n                    htmlFor={\"connectBothSideWithGreenWire\"}\n                >\n                    Connect both sides with green wire?\n                </label>\n                {myCheckbox(\"connectChestsWithRedWire\")}\n                <label\n                    className={CLASSES.labelElement}\n                    hidden={hiddenWhenFluidStation}\n                    htmlFor={\"connectChestsWithRedWire\"}\n                >\n                    Connect chests with red wire?\n                </label>\n                <label\n                    className={CLASSES.labelElement}\n                    hidden={hiddenWhenNormalStation}\n                    htmlFor={\"connectChestsWithGreenWire\"}\n                >\n                    Connect storage tanks with red wire?\n                </label>\n                {myCheckbox(\n                    \"connectBothSideWithRedWire\",\n                    hiddenWhenFluidStation || hiddenWhenNotBothSides\n                )}\n                <label\n                    className={CLASSES.labelElement}\n                    hidden={hiddenWhenFluidStation || hiddenWhenNotBothSides}\n                    htmlFor={\"connectBothSideWithRedWire\"}\n                >\n                    Connect both sides with red wire?\n                </label>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport { iEnabledConditionOperators, iSectionsProps } from \"../../constants/interfaces\"\nimport { CLASSES } from \"../../css/classes\"\nimport {\n    enabledConditionOperators,\n    enabledConditionOperatorsHuman,\n} from \"../../constants/constants\"\nimport TOOLTIPS from \"../../constants/tooltips\"\n\nexport default function EnabledConditionSettings(props: iSectionsProps): JSX.Element {\n    const hideIfCheckboxDisabled = !props.userSettings.trainStopUsesEnabledCondition\n\n    const enabledConditionOperatorHtml = (\n        <select\n            className={CLASSES.selectElement}\n            hidden={hideIfCheckboxDisabled}\n            value={props.userSettings.enabledConditionOperator}\n            onChange={(e) => {\n                props.setUserSettings({\n                    ...props.userSettings,\n                    enabledConditionOperator: e.target.value as iEnabledConditionOperators,\n                })\n            }}\n        >\n            {enabledConditionOperators.map((operator) => {\n                return (\n                    <option className={CLASSES.optionElement} key={operator} value={operator}>\n                        {enabledConditionOperatorsHuman[operator]}\n                    </option>\n                )\n            })}\n        </select>\n    )\n\n    return (\n        <div className={CLASSES.section}>\n            <div className={CLASSES.gridSection}>\n                <input\n                    className={CLASSES.checkboxElement}\n                    type={\"checkbox\"}\n                    id={\"trainStopUsesEnabledCondition\"}\n                    checked={props.userSettings.trainStopUsesEnabledCondition}\n                    data-tip={TOOLTIPS.trainStopUsesEnabledCondition}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            trainStopUsesEnabledCondition: e.target.checked,\n                        })\n                    }}\n                />\n                <label className={CLASSES.labelElement} htmlFor={\"trainStopUsesEnabledCondition\"}>\n                    {\"Train stop uses 'enabled-condition'?\"}\n                </label>\n                {enabledConditionOperatorHtml}\n                <input\n                    type={\"number\"}\n                    className={CLASSES.selectElement}\n                    hidden={hideIfCheckboxDisabled}\n                    placeholder={\"Amount of items\"}\n                    value={props.userSettings.enabledConditionAmount}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            enabledConditionAmount: e.target.value,\n                        })\n                    }}\n                />\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport { iSectionsProps } from \"../../constants/interfaces\"\nimport { CLASSES } from \"../../css/classes\"\n\nexport default function LampsSettings(props: iSectionsProps): JSX.Element {\n    return (\n        <div className={CLASSES.section}>\n            <div className={CLASSES.gridSection}>\n                <input\n                    className={CLASSES.checkboxElement}\n                    type={\"checkbox\"}\n                    id={\"placeLampsNearPoles\"}\n                    checked={props.userSettings.placeLampsNearPoles}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            placeLampsNearPoles: e.target.checked,\n                        })\n                    }}\n                />\n                <label className={CLASSES.labelElement} htmlFor={\"placeLampsNearPoles\"}>\n                    Place lamps near poles?\n                </label>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport { iSectionsProps } from \"../../constants/interfaces\"\nimport { CLASSES } from \"../../css/classes\"\nimport TOOLTIPS from \"../../constants/tooltips\"\n\nexport default function StationNameSettings(props: iSectionsProps): JSX.Element {\n    return (\n        <div>\n            <div className={CLASSES.section}>\n                <input\n                    className={CLASSES.inputTextElement}\n                    type={\"text\"}\n                    placeholder={\"Station Name\"}\n                    value={props.userSettings.stationName}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            stationName: e.target.value,\n                        })\n                    }}\n                />\n                <input\n                    className={CLASSES.inputTextElement}\n                    type={\"number\"}\n                    placeholder={\"Train limit\"}\n                    data-tip={TOOLTIPS.trainLimit}\n                    value={props.userSettings.trainLimit}\n                    min={\"-1\"}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            trainLimit: e.target.value,\n                        })\n                    }}\n                />\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport TrainTypeSettings from \"../Sections/TrainTypeSettings\"\nimport { iSectionsProps } from \"../../constants/interfaces\"\nimport InserterSettings from \"../Sections/InserterSettings\"\nimport SequentialStationSettings from \"../Sections/SequentialStationSettings\"\nimport ChestTypeSettings from \"../Sections/ChestTypeSettings\"\nimport BeltTypeSettings from \"../Sections/BeltTypeSettings\"\nimport RefillSettings from \"../Sections/RefillSettings\"\nimport WireSettings from \"../Sections/WireSettings\"\nimport EnabledConditionSettings from \"../Sections/EnabledConditionSettings\"\nimport LampsSettings from \"../Sections/LampsSettings\"\nimport StationNameSettings from \"../Sections/StationNameSettings\"\n\nexport default function NormalStation(props: iSectionsProps): JSX.Element {\n    return (\n        <div className={\"flex flex-col\"}>\n            <div className={\"grid gap-x-4 grid-cols-1 lg:grid-cols-2\"}>\n                <div>\n                    <StationNameSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                    <SequentialStationSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                    <TrainTypeSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                    <InserterSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n\n                    <ChestTypeSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                </div>\n                <div>\n                    <BeltTypeSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n\n                    <RefillSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                    <WireSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                    <EnabledConditionSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                    <LampsSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport { iPumpSides, iSectionsProps } from \"../../constants/interfaces\"\nimport { CLASSES } from \"../../css/classes\"\nimport { pumpSides } from \"../../constants/constants\"\n\nexport default function FluidSettings(props: iSectionsProps): JSX.Element {\n    const pumpSideHtml = (\n        <select\n            id={\"sidesUsed\"}\n            className={CLASSES.selectElement}\n            value={props.userSettings.pumpSidesToBeUsed}\n            onChange={(e) => {\n                props.setUserSettings({\n                    ...props.userSettings,\n                    pumpSidesToBeUsed: e.target.value as iPumpSides,\n                })\n            }}\n        >\n            {pumpSides.map((pumpSide) => {\n                return (\n                    <option className={CLASSES.optionElement} key={pumpSide} value={pumpSide}>\n                        {pumpSide}\n                    </option>\n                )\n            })}\n        </select>\n    )\n\n    return (\n        <div className={CLASSES.section}>\n            <div className={CLASSES.gridSection}>\n                {pumpSideHtml}\n                <label className={CLASSES.labelElement} htmlFor={\"sidesUsed\"}>\n                    Sides to be used\n                </label>\n                <input\n                    className={CLASSES.checkboxElement}\n                    type={\"checkbox\"}\n                    id={\"connectTanks\"}\n                    checked={props.userSettings.pumpConnectWithPipe}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            pumpConnectWithPipe: e.target.checked,\n                        })\n                    }}\n                />\n                <label className={CLASSES.labelElement} htmlFor={\"connectTanks\"}>\n                    Connect tank with pipe?\n                </label>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport TrainTypeSettings from \"../Sections/TrainTypeSettings\"\nimport { iSectionsProps } from \"../../constants/interfaces\"\nimport RefillSettings from \"../Sections/RefillSettings\"\nimport WireSettings from \"../Sections/WireSettings\"\nimport EnabledConditionSettings from \"../Sections/EnabledConditionSettings\"\nimport LampsSettings from \"../Sections/LampsSettings\"\nimport StationNameSettings from \"../Sections/StationNameSettings\"\nimport FluidSettings from \"../Sections/FluidSettings\"\n\nexport default function FluidStation(props: iSectionsProps): JSX.Element {\n    return (\n        <div className={\"flex flex-col\"}>\n            <div className={\"grid gap-x-4 grid-cols-1 lg:grid-cols-2\"}>\n                <div>\n                    <StationNameSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                    <TrainTypeSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                    <FluidSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                </div>\n                <div>\n                    <RefillSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                    <WireSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                    <EnabledConditionSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                    <LampsSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport { CLASSES } from \"../css/classes\"\n\nexport default function Title(): JSX.Element {\n    return <div className={CLASSES.title}>{\"Burny's Train Station Blueprint Creator\"}</div>\n}\n","import React from \"react\"\nimport { CLASSES } from \"../css/classes\"\n\nexport default function Footer(): JSX.Element {\n    return (\n        <div className={`flex flex-col my-2`}>\n            <a\n                className={CLASSES.footerElements}\n                target=\"_blank\"\n                rel=\"noreferrer\"\n                href=\"https://github.com/BurnySc2/Factorio-Train-Station-Blueprint-Creator\"\n            >\n                Contribute\n            </a>\n            <a\n                className={CLASSES.footerElements}\n                target=\"_blank\"\n                rel=\"noreferrer\"\n                href=\"https://github.com/BurnySc2/Factorio-Train-Station-Blueprint-Creator/issues/new\"\n            >\n                Suggestions / Report Bugs\n            </a>\n            <a\n                className={CLASSES.footerElements}\n                target=\"_blank\"\n                rel=\"noreferrer\"\n                href=\"https://www.reddit.com/message/compose/?to=BurnySc2\"\n            >\n                Contact (Reddit)\n            </a>\n        </div>\n    )\n}\n","import React from \"react\"\nimport { iSectionsProps } from \"../../constants/interfaces\"\nimport { CLASSES } from \"../../css/classes\"\nimport { stackerDiagonalTypes, stackerTypes } from \"../../constants/constants\"\n\nexport default function StackerSettings(props: iSectionsProps): JSX.Element {\n    const myCheckbox = (keyName: \"diagonalStacker\") => {\n        return (\n            <input\n                className={CLASSES.checkboxElement}\n                key={keyName}\n                type={\"checkbox\"}\n                id={keyName}\n                checked={props.userSettings[keyName]}\n                onChange={(e) => {\n                    props.setUserSettings({\n                        ...props.userSettings,\n                        [keyName]: e.target.checked,\n                    })\n                }}\n            />\n        )\n    }\n\n    const stackerTypesHtml = (\n        <select\n            className={CLASSES.selectElement}\n            value={props.userSettings.stackerType}\n            onChange={(e) => {\n                props.setUserSettings({\n                    ...props.userSettings,\n                    stackerType: e.target.value,\n                })\n            }}\n        >\n            {stackerTypes.map((type) => {\n                if (props.userSettings.diagonalStacker) return undefined\n                return (\n                    <option key={type} value={type}>\n                        {type}\n                    </option>\n                )\n            })}\n            {stackerDiagonalTypes.map((type) => {\n                if (!props.userSettings.diagonalStacker) return undefined\n                return (\n                    <option key={type} value={type}>\n                        {type}\n                    </option>\n                )\n            })}\n        </select>\n    )\n\n    return (\n        <div className={CLASSES.section}>\n            <div className={CLASSES.gridSection}>\n                <input\n                    className={CLASSES.inputTextElement}\n                    id={\"stackerNumberParallelLanes\"}\n                    value={props.userSettings.stackerNumberParallelLanes}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            stackerNumberParallelLanes: e.target.value,\n                        })\n                    }}\n                />\n                <label className={CLASSES.labelElement} htmlFor={\"stackerNumberParallelLanes\"}>\n                    # of parallel lanes\n                </label>\n                {myCheckbox(\"diagonalStacker\")}\n                <label className={CLASSES.labelElement} htmlFor={\"diagonalStacker\"}>\n                    Diagonal Stacker?\n                </label>\n                {stackerTypesHtml}\n                <label className={CLASSES.labelElement} htmlFor={\"leftRightStacker\"}>\n                    Stacker Type\n                </label>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport TrainTypeSettings from \"../Sections/TrainTypeSettings\"\nimport { iSectionsProps } from \"../../constants/interfaces\"\nimport StackerSettings from \"../Sections/StackerSettings\"\n\nexport default function Stacker(props: iSectionsProps): JSX.Element {\n    return (\n        <div className={\"flex flex-col\"}>\n            <TrainTypeSettings\n                userSettings={props.userSettings}\n                setUserSettings={props.setUserSettings}\n            />\n            <StackerSettings\n                userSettings={props.userSettings}\n                setUserSettings={props.setUserSettings}\n            />\n        </div>\n    )\n}\n","import React from \"react\"\nimport { CLASSES } from \"../css/classes\"\nimport { defaultSettings } from \"../constants/constants\"\n\ninterface MyProps {\n    warningMessage: string\n    userSettings: typeof defaultSettings\n}\nexport default function WarningMessage(props: MyProps): JSX.Element | null {\n    if (props.warningMessage === \"\") {\n        return null\n    }\n    return <div className={CLASSES.warningMessageElement}>Hint: {props.warningMessage}</div>\n}\n","import React from \"react\"\nimport { CLASSES } from \"../css/classes\"\n\ninterface MyProps {\n    errorMessage: string\n}\n\nexport default function ErrorMessage(props: MyProps): JSX.Element | null {\n    if (props.errorMessage === \"\") {\n        return null\n    }\n    return <div className={CLASSES.errorMessageElement}>{props.errorMessage}</div>\n}\n","import { defaultSettings } from \"./constants\"\n\nconst verifyNumberInput = (myInput: string) => {\n    return !isNaN(parseInt(myInput))\n}\n\nexport const checkForHintsBlueprintSettings = (bpSettings: typeof defaultSettings): string => {\n    if (parseInt(bpSettings.locomotivesPerEnd) + parseInt(bpSettings.cargoWagon) > 1000) {\n        return \"Your amount of locomotives and cargo wagons is extremely high and might crash your browser!\"\n    }\n    if (\n        (bpSettings.stationType === \"Loading Station\" ||\n            bpSettings.stationType === \"Unloading Station\") &&\n        bpSettings.sequentialStation &&\n        parseInt(bpSettings.sequentialStationsAmount) > 20\n    ) {\n        return \"Your amount of sequential stations is extremely high and might crash your browser!\"\n    }\n    if (bpSettings.stationType !== \"Stacker\") {\n        if (bpSettings.trainStopUsesEnabledCondition && !bpSettings.connectChestsWithGreenWire) {\n            return \"If 'train stop uses-enabled condition' is enabled, you should also enable 'connect chests/storage tanks with green wire'.\"\n        }\n        if (\n            [\"Loading Station\", \"Unloading Station\"].includes(bpSettings.stationType) &&\n            bpSettings.sequentialStation &&\n            !bpSettings.trainStopUsesEnabledCondition\n        ) {\n            return \"If 'sequential stations' is enabled, you should enable 'train stop uses enabled-condition' for full capacity.\"\n        }\n    }\n    // No hint could be found\n    return \"\"\n}\n\nexport const validateBlueprintSettings = (bpSettings: typeof defaultSettings): string => {\n    if (!verifyNumberInput(bpSettings.locomotivesPerEnd)) {\n        return \"The given locomotive count is not a number.\"\n    }\n    if (!verifyNumberInput(bpSettings.cargoWagon)) {\n        return \"The given cargo count is not a number.\"\n    }\n    if (\n        bpSettings.stationType === \"Loading Station\" ||\n        bpSettings.stationType === \"Unloading Station\"\n    ) {\n        for (let i = 0; i < 12; i++) {\n            const itemType = bpSettings.chestRequestItemsType[i]\n            const numberAsString = bpSettings.chestRequestItemsAmount[i]\n\n            if (itemType !== \"\" && !verifyNumberInput(numberAsString)) {\n                return `Chest request at position ${i + 1} is not a number.`\n            }\n        }\n    }\n    if (bpSettings.stationType !== \"Stacker\") {\n        if (bpSettings.trainLimit !== \"\" && !verifyNumberInput(bpSettings.trainLimit)) {\n            return \"The given 'Train limit' is not a number.\"\n        }\n        if (!verifyNumberInput(bpSettings.chestLimit)) {\n            return \"The given chest limit is not a number.\"\n        }\n        if (bpSettings.refillEnabled && !verifyNumberInput(bpSettings.refillFuelAmount)) {\n            return \"The given refill amount is not a number.\"\n        }\n        if (\n            bpSettings.trainStopUsesEnabledCondition &&\n            !verifyNumberInput(bpSettings.enabledConditionAmount)\n        ) {\n            return \"The given 'enabled-condition' amount is not a number.\"\n        }\n    }\n    // No error was found\n    return \"\"\n}\n","import React, { useEffect, useState } from \"react\"\nimport NormalStation from \"./StationTypes/NormalStation\"\nimport FluidStation from \"./StationTypes/FluidStation\"\nimport Title from \"./Title\"\nimport { defaultSettings, stationTypes } from \"../constants/constants\"\nimport { CLASSES } from \"../css/classes\"\nimport Footer from \"./Footer\"\nimport Stacker from \"./StationTypes/Stacker\"\nimport copy from \"copy-to-clipboard\"\nimport { createBlueprint, createBlueprintString } from \"../BlueprintCreation/CreateBlueprint\"\nimport WarningMessage from \"./WarningMessage\"\nimport ErrorMessage from \"./ErrorMessage\"\nimport { checkForHintsBlueprintSettings, validateBlueprintSettings } from \"../constants/helper\"\nimport ReactTooltip from \"react-tooltip\"\nimport itemlist from \"../constants/itemlist.json\"\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst cloneDeep = require(\"clone-deep\")\n\nexport default function Website(): JSX.Element {\n    const [userSettings, setUserSettings] = useState(cloneDeep(defaultSettings))\n    const [blueprintString, setBlueprintString] = useState(\"\")\n    const [warningMessage, setWarningMessage] = useState(\"\")\n    const [errorMessage, setErrorMessage] = useState(\"\")\n\n    useEffect(() => {\n        const newWarningMessage = checkForHintsBlueprintSettings(userSettings)\n        setWarningMessage(newWarningMessage)\n        const newErrorMessage = validateBlueprintSettings(userSettings)\n        setErrorMessage(newErrorMessage)\n    }, [userSettings])\n\n    const stationTypeSelect = (\n        <select\n            className={CLASSES.selectElement}\n            value={userSettings.stationType}\n            onChange={(e) => {\n                setUserSettings({ ...userSettings, stationType: e.target.value })\n            }}\n        >\n            {stationTypes.map((stationType) => {\n                return (\n                    <option className={CLASSES.optionElement} key={stationType} value={stationType}>\n                        {stationType}\n                    </option>\n                )\n            })}\n        </select>\n    )\n\n    // Select which sub-station settings are available\n    let stationTypeHtml: JSX.Element = <div>ERROR LOADING CORRECT STATION TYPE</div>\n    if ([\"Loading Station\", \"Unloading Station\"].includes(userSettings.stationType)) {\n        stationTypeHtml = (\n            <NormalStation userSettings={userSettings} setUserSettings={setUserSettings} />\n        )\n    } else if (\n        [\"Fluid Loading Station\", \"Fluid Unloading Station\"].includes(userSettings.stationType)\n    ) {\n        stationTypeHtml = (\n            <FluidStation userSettings={userSettings} setUserSettings={setUserSettings} />\n        )\n    } else if (userSettings.stationType === \"Stacker\") {\n        stationTypeHtml = <Stacker userSettings={userSettings} setUserSettings={setUserSettings} />\n    }\n\n    // Creates the datalist item names to make it easier for autocomplete\n    // Source: https://github.com/kevinta893/factorio-recipes-json recipes.json\n    const itemdatalist = (\n        <datalist id={\"itemlist\"}>\n            {itemlist.map((itemInfo) => {\n                return <option key={itemInfo.id} value={itemInfo.id} />\n            })}\n        </datalist>\n    )\n\n    return (\n        <div className={CLASSES.background}>\n            <div className={CLASSES.background2}>\n                <Title />\n                <div className={\"grid grid-cols-1 justify-items-center m-auto bg-blue-800\"}>\n                    <div className={CLASSES.section}>{stationTypeSelect}</div>\n                    {stationTypeHtml}\n                    {/*Blueprint generation will not work with the current settings, give the user hints how to fix the configuration*/}\n                    <ErrorMessage errorMessage={errorMessage} />\n                    {/*Figure out if some combinations do not work properly and give the user hints how to fix it*/}\n                    <WarningMessage warningMessage={warningMessage} userSettings={userSettings} />\n                    <button\n                        className={CLASSES.buttonElement}\n                        onClick={() => {\n                            if (errorMessage === \"\") {\n                                setBlueprintString(\n                                    createBlueprintString(createBlueprint(userSettings))\n                                )\n                            }\n                        }}\n                    >\n                        Generate Blueprint\n                    </button>\n                    <input\n                        className={`${CLASSES.inputTextElement} my-2`}\n                        placeholder={\"Blueprint string will be generated here.\"}\n                        value={blueprintString}\n                        readOnly\n                    />\n                    <button\n                        className={CLASSES.buttonElement}\n                        onClick={() => {\n                            // Copy to clipboard\n                            copy(blueprintString, {\n                                debug: true,\n                                message: \"asd\",\n                            })\n                        }}\n                    >\n                        Copy to Clipboard\n                    </button>\n                    <Footer />\n                    <ReactTooltip place={\"bottom\"} multiline />\n                    {itemdatalist}\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport Website from \"./Website\"\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\"\n\nexport default function MyRouter(): JSX.Element {\n    return (\n        // TODO use path (params) to be able to link a setting to a friend\n        <Router>\n            <Switch>\n                <Route path=\"/\">\n                    <Website />\n                </Route>\n            </Switch>\n        </Router>\n    )\n}\n","import React from \"react\"\nimport MyRouter from \"./components/MyRouter\"\n\nfunction App(): JSX.Element {\n    return <MyRouter />\n}\n\nexport default App\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport \"./css/style.css\"\nimport App from \"./App\"\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}