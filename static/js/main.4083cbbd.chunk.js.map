{"version":3,"sources":["BlueprintCreation/CreateItems.ts","constants/constants.ts","BlueprintCreation/CreateBlueprint.ts","BlueprintCreation/CreateNormalStation.ts","BlueprintCreation/CreateFluidStation.ts","constants/verticalStackerCurves.ts","constants/diagonalStackerCurves.ts","BlueprintCreation/CreateStacker.ts","css/classes.ts","constants/tooltips.tsx","components/Sections/TrainTypeSettings.tsx","components/Sections/InserterSettings.tsx","components/Sections/ChestTypeSettings.tsx","components/Sections/BeltTypeSettings.tsx","components/Sections/RefillSettings.tsx","components/Sections/WireSettings.tsx","components/Sections/EnabledConditionSettings.tsx","components/Sections/LampsSettings.tsx","components/Sections/StationNameSettings.tsx","constants/helper.ts","components/Sections/StationSettings.tsx","components/StationTypes/NormalStation.tsx","components/Sections/FluidSettings.tsx","components/StationTypes/FluidStation.tsx","components/Title.tsx","components/Footer.tsx","components/Sections/StackerSettings.tsx","components/StationTypes/Stacker.tsx","components/WarningMessage.tsx","components/ErrorMessage.tsx","components/Website.tsx","components/MyRouter.tsx","App.tsx","index.tsx"],"names":["cloneDeep","require","entityNumber","resetEntityNumber","newItem","itemName","x","y","options","item","entity_number","name","position","direction","orientation","bar","filters","request_filters","request_from_buffers","control_behavior","station","manual_trains_limit","trains_limit_signal","assignEntityNumberToItems","items","xOffset","yOffset","map","getTrainArray","bpSettings","startOffset","bottomOffset","returnArray","doubleHeaded","i","parseInt","locomotivesPerEnd","cargoWagon","push","getFrontLocomotivesArray","getBackLocomotivesArray","getCargoArray","placeTrainTracks","forEach","placeSignals","singleHeadedOffset","end","stationType","start","DIRECTION","DOWN","UP","placeTrainStop","stationName","undefined","controlBehavior","trainStopUsesEnabledCondition","circuit_enable_disable","circuit_condition","first_signal","type","constant","comparator","trainLimit","normalStation","includes","set_trains_limit","fluidStation","placeTrain","count","locoCount","cargoCount","placeInserters","filterArray","inserterType","enableFilterInserters","filterInserters","inserterDirection","RIGHT","LEFT","filterFields","index","botChestTypes","chestType","placeChests","isRequesterChest","requestChestTypes","requests","itemType","chestRequestItemsType","itemAmount","chestRequestItemsAmount","requestFromBuffers","chestRequestFromBuffers","chestLimit","length","placeLoadingBelts","beltType","placeUnloadingBelts","placePumps","pumpDirection","placeStorageTanks","placePipes","array","placeVerticalBelts","splitters","mode","beltEnd","beltFlowDirection","sortByYPosition","splitter","reverse","placeSplitters","splitterType","splitterTypes","splitterDirection","placePoles","placeLamps","placeEnabledConditionDecider","topPole","trainStop","decider","decider_conditions","enabledConditionAmount","enabledConditionOperator","output_signal","copy_count_from_input","connectTwoEntitiesWithWire","placeDynamicTrainLimitCombinators","deciderXOffset","arithmeticXOffset","placeLampsNearPoles","arithmetic1Condition","operation","trainLimitArithmetic1Operator","trainLimitArithmetic1Constant1","allowedCharacters","trainLimitArithmetic1Constant2","arithmetic1","arithmetic_conditions","arithmetic2Condition","trainLimitArithmetic2Operator","trainLimitArithmetic2Constant1","trainLimitArithmetic2Constant2","arithmetic2","placeTopRefuelPoles","placeBottomRefuelPoles","placeRefuelChestsAndInserters","refillFuelType","refillFuelAmount","entity1","entity2","color","entity1ConNumber","entity2ConNumber","circuit1Number","circuit2Number","entity1Number","entity2Number","createWirePath","entity","conNumber","connections","entityColor","conn1","entity_id","conn2","circuit_id","connectItemsWithWire","item1","item2","mirrorItemsHorizontal","copy","mirrorXOffset","changeItemsCoordinates","copyPasteItems","clone","mixSides","sidesUsed","leftArray","rightArray","console","assert","sort","a","b","stationTypes","inserterTypes","inserter","chestTypes","chestTypesHuman","beltTypes","beltTypesHuman","beltSides","pumpSides","beltFlowDirections","refillFuelTypes","refillFuelTypesHuman","wood","coal","stackerDiagonalTypes","stackerTypes","enabledConditionOperators","enabledConditionOperatorsHuman","operatorTypes","defaultSettings","tooltipText","includeTrainInBlueprint","pumpSidesToBeUsed","pumpConnectWithPipe","Array","fill","beltSidesUsed","refillEnabled","connectChestsWithGreenWire","connectBothSideWithGreenWire","connectChestsWithRedWire","connectBothSideWithRedWire","stackerNumberParallelLanes","diagonalStacker","stackerType","zlib","createBlueprint","createNormalStation","createFluidStation","createStacker","createBlueprintString","blueprint","icons","signal","entities","version","label","deflateSync","JSON","stringify","level","toString","encode","allItems","rightSplitters","stationItems","rightChests","leftChests","chests","rightSideItems","newSplitters","rightPoles","leftPoles","poles","leftSideItems","rightLamps","leftLamps","topPoles","combinators","combineArray","rightVerticalBelts","leftVerticalBelts","leftSplitters","trainStops","filter","railSignals","slice","stop","rightStorageTanks","leftStorageTanks","rightPumps","leftPumps","rightPipes","leftPipes","bottomPoles","storageTanks","frontLeftCurve","frontRightCurve","backLeftCurve","backRightCurve","diagonalFrontLeftCurve","diagonalFrontRightCurve","diagonalBackLeftCurve","diagonalBackRightCurve","createDiagonalStacker","createVerticalStacker","frontCurve","backCurve","trainLength","Math","floor","copyPasteBlueprint","doubleHeadedFactor","diagonalLength","round","diagonals","newDiagonals","CLASSES","TOOLTIPS","trainLimitNumberInput","beltFlow","TrainTypeSettings","props","hideIfDiagonalStacker","userSettings","className","min","id","data-tip","checked","onChange","e","setUserSettings","target","htmlFor","value","hidden","InserterSettings","inserterSelect","isFilterInserter","newFilterInputField","list","placeholder","oldArray","newValue","setValueAtIndex","previousIsEmpty","filterInserterInputFields","_","ChestTypeSettings","chestTypesHtml","canRequestFromBufferChests","chestRequests","BeltTypeSettings","hideIfBotChests","beltTypesHtml","beltSideHtml","beltSide","beltFlowHtml","RefillSettings","fuelTypesHtml","fuelType","WireSettings","hiddenWhenNormalStation","hiddenWhenFluidStation","hiddenWhenNotBothSides","myCheckbox","keyName","EnabledConditionSettings","hideIfCheckboxDisabled","enabledConditionOperatorHtml","operator","LampsSettings","StationNameSettings","verifyNumberInput","myInput","isNaN","calcCombinatorSettings","stackSize","connectedChestCount","cargoWagonsConnectedToChest","chestSlotsCount","chestTotalItemCount","trainSlotsCount","trainTotalItemCount","StationSettings","hideWhenTrainLimitIsNotDynamic","key","mySelectOperator","trainLimitHtml","optionStr","applyArray","combinatorArray","onClick","NormalStation","FluidSettings","pumpSideHtml","pumpSide","FluidStation","Title","Footer","rel","href","StackerSettings","stackerTypesHtml","Stacker","WarningMessage","warningMessage","ErrorMessage","errorMessage","Website","useState","blueprintString","setBlueprintString","setWarningMessage","setErrorMessage","useEffect","newWarningMessage","newErrorMessage","numberAsString","validateBlueprintSettings","stationTypeSelect","stationTypeHtml","itemdatalist","itemlist","itemInfo","readOnly","debug","message","place","multiline","MyRouter","path","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4083cbbd.chunk.js","sourcesContent":["import {\n    iArithmeticCondition,\n    iBlueprintItem,\n    iBlueprintItemWithoutNumber,\n    iCircuitConnection,\n    iOptions,\n    iTrainStopControlBehavior,\n    iWireColor,\n} from \"../constants/interfaces\"\nimport {\n    allowedCharacters,\n    botChestTypes,\n    defaultSettings,\n    DIRECTION,\n    filterInserters,\n    fluidStation,\n    mirrorXOffset,\n    normalStation,\n    requestChestTypes,\n    splitterTypes,\n} from \"../constants/constants\"\n\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst cloneDeep = require(\"clone-deep\")\n\nexport let entityNumber = 1\nexport let circuitNumber = 1\nexport const resetEntityNumber = (): void => {\n    entityNumber = 1\n    circuitNumber = 1\n}\n\nexport const newItem = (\n    itemName: string,\n    x: number,\n    y: number,\n    options: iOptions = {}\n): iBlueprintItem => {\n    const item: iBlueprintItem = {\n        entity_number: entityNumber,\n        name: itemName,\n        position: {\n            x: x,\n            y: y,\n        },\n    }\n    if (options.direction) {\n        item.direction = options.direction\n    }\n    if (options.orientation) {\n        item.orientation = options.orientation\n    }\n    if (options.bar) {\n        item.bar = options.bar\n    }\n    if (options.filters) {\n        item.filters = options.filters\n    }\n    if (options.request_filters) {\n        item.request_filters = options.request_filters\n    }\n    if (options.request_from_buffers) {\n        item.request_from_buffers = options.request_from_buffers\n    }\n    if (options.control_behavior) {\n        item.control_behavior = options.control_behavior\n    }\n    if (options.station) {\n        item.station = options.station\n    }\n    if (options.manual_trains_limit) {\n        item.manual_trains_limit = options.manual_trains_limit\n    }\n    if (options.trains_limit_signal) {\n        item.trains_limit_signal = options.trains_limit_signal\n    }\n    entityNumber += 1\n    return item\n}\nexport const assignEntityNumberToItems = (\n    items: iBlueprintItemWithoutNumber[],\n    xOffset = 0,\n    yOffset = 0\n): iBlueprintItem[] => {\n    return items.map((item) => {\n        return newItem(item.name, item.position.x + xOffset, item.position.y + yOffset, {\n            direction: item.direction,\n        })\n    })\n}\n// Get total train length but as array so I can loop over it\nexport const getTrainArray = (\n    bpSettings: typeof defaultSettings,\n    startOffset = 0,\n    bottomOffset = 0\n): number[] => {\n    const returnArray: number[] = []\n    const doubleHeaded = bpSettings.doubleHeaded ? 2 : 1\n    for (\n        let i = startOffset;\n        i <\n        (doubleHeaded * parseInt(bpSettings.locomotivesPerEnd) + parseInt(bpSettings.cargoWagon)) *\n            7 +\n            bottomOffset;\n        i++\n    ) {\n        returnArray.push(i)\n    }\n    return returnArray\n}\n// Only front locomotives as array\nexport const getFrontLocomotivesArray = (\n    bpSettings: typeof defaultSettings,\n    startOffset = -3,\n    bottomOffset = -3\n): number[] => {\n    const returnArray: number[] = []\n    for (let i = startOffset; i < parseInt(bpSettings.locomotivesPerEnd) * 7 + bottomOffset; i++) {\n        returnArray.push(i)\n    }\n    return returnArray\n}\n// Only back locomotives as array (or empty array if single headed)\nexport const getBackLocomotivesArray = (\n    bpSettings: typeof defaultSettings,\n    startOffset = -3,\n    bottomOffset = -3\n): number[] => {\n    if (!bpSettings.doubleHeaded) return []\n    const returnArray: number[] = []\n    for (\n        let i =\n            (parseInt(bpSettings.locomotivesPerEnd) + parseInt(bpSettings.cargoWagon)) * 7 +\n            startOffset;\n        i <\n        (2 * parseInt(bpSettings.locomotivesPerEnd) + parseInt(bpSettings.cargoWagon)) * 7 +\n            bottomOffset;\n        i++\n    ) {\n        returnArray.push(i)\n    }\n    return returnArray\n}\n// Returns an array of y-offsets where the cargo is\nexport const getCargoArray = (bpSettings: typeof defaultSettings, startOffset = -3): number[] => {\n    const returnArray: number[] = []\n    const bottomOffset = 1\n    for (\n        let i = parseInt(bpSettings.locomotivesPerEnd) * 7 + startOffset;\n        i <\n        (parseInt(bpSettings.locomotivesPerEnd) + parseInt(bpSettings.cargoWagon)) * 7 +\n            startOffset +\n            bottomOffset;\n        i++\n    ) {\n        returnArray.push(i)\n    }\n    return returnArray\n}\n\nexport const placeTrainTracks = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    const returnArray: iBlueprintItem[] = []\n    getTrainArray(bpSettings, -4).forEach((i) => {\n        if (i % 2 === 1) return\n        returnArray.push(newItem(\"straight-rail\", -1.5, i))\n    })\n    return returnArray\n}\n\nexport const placeSignals = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    // Size is 1x1, so coordinate ends in 0.5\n    const returnArray: iBlueprintItem[] = []\n    const start = 0\n    const doubleHeaded = bpSettings.doubleHeaded ? 2 : 1\n    const singleHeadedOffset = bpSettings.doubleHeaded ? 0 : 1\n    const end =\n        (doubleHeaded * parseInt(bpSettings.locomotivesPerEnd) + parseInt(bpSettings.cargoWagon)) *\n            7 +\n        singleHeadedOffset\n    // Stacker\n    if (bpSettings.stationType === \"Stacker\") {\n        returnArray.push(\n            newItem(\"rail-chain-signal\", 0, start - 3.5, { direction: DIRECTION.DOWN })\n        )\n        returnArray.push(newItem(\"rail-signal\", 0, end - 2.5, { direction: DIRECTION.DOWN }))\n    }\n    // Normal station\n    else {\n        if (bpSettings.doubleHeaded) {\n            // Chain signal at the back if double headed, because I assume double headed trains exit the same way they went in\n            returnArray.push(\n                newItem(\"rail-chain-signal\", -3, end - 2.5, { direction: DIRECTION.UP })\n            )\n        } else {\n            // Chain signal at the front if not double headed\n            returnArray.push(\n                newItem(\"rail-chain-signal\", 0, start - 3.5, { direction: DIRECTION.DOWN })\n            )\n        }\n        // Rail signal at the back\n        returnArray.push(newItem(\"rail-signal\", 0, end - 2.5, { direction: DIRECTION.DOWN }))\n    }\n\n    return returnArray\n}\n\nexport const placeTrainStop = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    // Size is 2x2, so coordinate ends in .0\n    const returnArray: iBlueprintItem[] = []\n    const options: iOptions = {\n        station: bpSettings.stationName !== \"\" ? bpSettings.stationName : undefined,\n    }\n    const controlBehavior: iTrainStopControlBehavior = {}\n    if (bpSettings.trainStopUsesEnabledCondition) {\n        controlBehavior.circuit_enable_disable = true\n        controlBehavior.circuit_condition = {\n            first_signal: {\n                type: \"virtual\",\n                name: \"signal-red\",\n            },\n            constant: 0,\n            comparator: \">\",\n        }\n    }\n    if (bpSettings.trainLimit === \"Dynamic\" && normalStation.includes(bpSettings.stationType)) {\n        controlBehavior.set_trains_limit = bpSettings.trainLimit === \"Dynamic\"\n        controlBehavior.trains_limit_signal = {\n            type: \"virtual\",\n            name: \"signal-L\",\n        }\n    } else {\n        if (bpSettings.trainLimit === \"Dynamic\" && fluidStation.includes(bpSettings.stationType)) {\n            options.manual_trains_limit = 2\n        } else {\n            options.manual_trains_limit = parseInt(bpSettings.trainLimit)\n        }\n    }\n    options.control_behavior = controlBehavior\n    returnArray.push(newItem(\"train-stop\", 0.5, -2, options))\n    return returnArray\n}\n\nexport const placeTrain = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    const returnArray: iBlueprintItem[] = []\n    let count = 0\n    const doubleHeaded = bpSettings.doubleHeaded ? 2 : 1\n    const locoCount = parseInt(bpSettings.locomotivesPerEnd)\n    const cargoCount = parseInt(bpSettings.cargoWagon)\n    parseInt(bpSettings.cargoWagon)\n    getTrainArray(bpSettings).forEach((y, i) => {\n        if (i % 7 !== 0) return\n        if (count < locoCount) {\n            returnArray.push(newItem(\"locomotive\", -1.5, y + 1))\n        } else if (count < locoCount + cargoCount) {\n            if (!fluidStation.includes(bpSettings.stationType))\n                returnArray.push(newItem(\"cargo-wagon\", -1.5, y + 1))\n            else returnArray.push(newItem(\"fluid-wagon\", -1.5, y + 1))\n        } else if (count < locoCount * doubleHeaded + cargoCount) {\n            returnArray.push(newItem(\"locomotive\", -1.5, y + 1, { orientation: 0.5 }))\n        }\n        count += 1\n    })\n    return returnArray\n}\n\nexport const placeInserters = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    // Size is 1x1, so coordinate ends in 0.5\n    // Inserter direction = direction it grabs from\n    const returnArray: iBlueprintItem[] = []\n    const inserterType = bpSettings.enableFilterInserters\n        ? filterInserters[bpSettings.inserterType]\n        : bpSettings.inserterType\n    const inserterDirection =\n        bpSettings.stationType === \"Loading Station\" ? DIRECTION.RIGHT : DIRECTION.LEFT\n    let filterArray:\n        | undefined\n        | Array<{\n              index: number\n              name: string\n          }>\n    if (bpSettings.enableFilterInserters) {\n        filterArray = []\n        for (let i = 0; i < 5; i++) {\n            if (bpSettings.filterFields[i] === \"\") break\n            filterArray.push({\n                index: i + 1,\n                name: bpSettings.filterFields[i],\n            })\n        }\n    }\n    getCargoArray(bpSettings).forEach((y, i) => {\n        if (i % 7 === 0) return\n        returnArray.push(\n            newItem(inserterType, 0, y + 0.5, {\n                direction: inserterDirection,\n                filters: filterArray,\n            })\n        )\n\n        if (!botChestTypes.includes(bpSettings.chestType)) {\n            returnArray.push(\n                newItem(inserterType, 2, y + 0.5, {\n                    direction: inserterDirection,\n                    filters: filterArray,\n                })\n            )\n        }\n    })\n    return returnArray\n}\nexport const placeChests = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    // Size is 1x1, so coordinate ends in 0.5\n    const returnArray: iBlueprintItem[] = []\n\n    // For requester and buffer chests, add the requests\n    const isRequesterChest = requestChestTypes.includes(bpSettings.chestType)\n    const requests: Array<{\n        index: number\n        name: string\n        count: number\n    }> = []\n    if (isRequesterChest) {\n        for (let i = 0; i < 12; i++) {\n            const itemType = bpSettings.chestRequestItemsType[i]\n            if (itemType === \"\") break\n            const itemAmount = bpSettings.chestRequestItemsAmount[i]\n            requests.push({\n                index: i + 1,\n                name: itemType,\n                count: parseInt(itemAmount),\n            })\n        }\n    }\n\n    const requestFromBuffers =\n        bpSettings.chestRequestFromBuffers && bpSettings.chestType === \"logistic-chest-requester\"\n            ? true\n            : undefined\n    getCargoArray(bpSettings).forEach((y, i) => {\n        if (i % 7 === 0) return\n        returnArray.push(\n            newItem(bpSettings.chestType, 1, y + 0.5, {\n                bar: parseInt(bpSettings.chestLimit),\n                request_filters: requests.length === 0 ? undefined : requests,\n                request_from_buffers: requestFromBuffers,\n            })\n        )\n    })\n    return returnArray\n}\n// Belts between inserter and splitter\nexport const placeLoadingBelts = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    // Size is 1x1, so coordinate ends in 0.5\n    const returnArray: iBlueprintItem[] = []\n    getCargoArray(bpSettings).forEach((y, i) => {\n        if (i % 7 === 1) {\n            returnArray.push(\n                newItem(bpSettings.beltType, 3, y + 0.5, { direction: DIRECTION.LEFT })\n            )\n        } else if (i % 7 === 2) {\n            returnArray.push(newItem(bpSettings.beltType, 3, y + 0.5, { direction: DIRECTION.UP }))\n        } else if (i % 7 === 3) {\n            returnArray.push(newItem(bpSettings.beltType, 3, y + 0.5, { direction: DIRECTION.UP }))\n        } else if (i % 7 === 4) {\n            returnArray.push(\n                newItem(bpSettings.beltType, 3, y + 0.5, { direction: DIRECTION.DOWN })\n            )\n        } else if (i % 7 === 5) {\n            returnArray.push(\n                newItem(bpSettings.beltType, 3, y + 0.5, { direction: DIRECTION.DOWN })\n            )\n        } else if (i % 7 === 6) {\n            returnArray.push(\n                newItem(bpSettings.beltType, 3, y + 0.5, { direction: DIRECTION.LEFT })\n            )\n        }\n    })\n    return returnArray\n}\nexport const placeUnloadingBelts = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    // Size is 1x1, so coordinate ends in 0.5\n    const returnArray: iBlueprintItem[] = []\n    getCargoArray(bpSettings).forEach((y, i) => {\n        if (i % 7 === 1) {\n            returnArray.push(\n                newItem(bpSettings.beltType, 3, y + 0.5, { direction: DIRECTION.DOWN })\n            )\n        } else if (i % 7 === 2) {\n            returnArray.push(\n                newItem(bpSettings.beltType, 3, y + 0.5, { direction: DIRECTION.DOWN })\n            )\n        } else if (i % 7 === 3) {\n            returnArray.push(\n                newItem(bpSettings.beltType, 3, y + 0.5, { direction: DIRECTION.RIGHT })\n            )\n        } else if (i % 7 === 4) {\n            returnArray.push(\n                newItem(bpSettings.beltType, 3, y + 0.5, { direction: DIRECTION.RIGHT })\n            )\n        } else if (i % 7 === 5) {\n            returnArray.push(newItem(bpSettings.beltType, 3, y + 0.5, { direction: DIRECTION.UP }))\n        } else if (i % 7 === 6) {\n            returnArray.push(newItem(bpSettings.beltType, 3, y + 0.5, { direction: DIRECTION.UP }))\n        }\n    })\n    return returnArray\n}\nexport const placePumps = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    const returnArray: iBlueprintItem[] = []\n    const pumpDirection =\n        bpSettings.stationType === \"Fluid Loading Station\" ? DIRECTION.LEFT : DIRECTION.RIGHT\n    getCargoArray(bpSettings).forEach((y, i) => {\n        if (i % 7 === 1) {\n            returnArray.push(\n                // Storage tank facing UP has connection topleft and bottomright\n                newItem(\"pump\", 0.5, y + 0.5, { direction: pumpDirection })\n            )\n        }\n        if (i % 7 === 6) {\n            // Storage tank facing RIGHT has connection topright and bottomleft\n            returnArray.push(newItem(\"pump\", 0.5, y + 0.5, { direction: pumpDirection }))\n        }\n    })\n    return returnArray\n}\nexport const placeStorageTanks = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    // Size is 3x3, so coordinate ends in 0.5\n    const returnArray: iBlueprintItem[] = []\n    getCargoArray(bpSettings).forEach((y, i) => {\n        if (i % 7 === 2) {\n            // Storage tank facing UP has connection topleft and bottomright\n            returnArray.push(newItem(\"storage-tank\", 3, y + 0.5))\n        }\n        if (i % 7 === 5) {\n            // Storage tank facing RIGHT has connection topright and bottomleft\n            returnArray.push(newItem(\"storage-tank\", 3, y + 0.5, { direction: DIRECTION.RIGHT }))\n        }\n    })\n    return returnArray\n}\nexport const placePipes = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    // Size is 1x1, so coordinate ends in 0.5\n    const returnArray: iBlueprintItem[] = []\n    getCargoArray(bpSettings).forEach((y, i, array) => {\n        if (i !== 0 && i !== array.length - 1 && i % 7 === 0) {\n            // Storage tank facing UP has connection topleft and bottomright\n            returnArray.push(newItem(\"pipe\", 2, y + 0.5))\n        }\n    })\n    return returnArray\n}\n// Belts that go from splitter to front/back\nexport const placeVerticalBelts = (\n    bpSettings: typeof defaultSettings,\n    splitters: Array<iBlueprintItem>\n): iBlueprintItem[] => {\n    const returnArray: iBlueprintItem[] = []\n    const mode = bpSettings.stationType === \"Loading Station\" ? \"load\" : \"unload\"\n    const beltEnd = bpSettings.beltFlowDirection\n    sortByYPosition(splitters)\n    let x = 5\n    // Unloading to front, splitters[0] is the front splitter\n    if (mode === \"unload\" && beltEnd === \"Front\") {\n        splitters.forEach((splitter) => {\n            for (let y = splitters[0].position.y; y <= splitter.position.y; y++) {\n                returnArray.push(\n                    newItem(bpSettings.beltType, x, y - 0.5, { direction: DIRECTION.UP })\n                )\n            }\n            for (let i = splitter.position.x + 1; i < x; i++) {\n                returnArray.push(\n                    newItem(bpSettings.beltType, i, splitter.position.y - 0.5, {\n                        direction: DIRECTION.RIGHT,\n                    })\n                )\n            }\n            x += 1\n        })\n    }\n    // Unloading to back, splitters[0] is the back splitter\n    if (mode === \"unload\" && beltEnd === \"Back\") {\n        splitters.reverse()\n        splitters.forEach((splitter) => {\n            for (let y = splitters[0].position.y; y >= splitter.position.y; y--) {\n                returnArray.push(\n                    newItem(bpSettings.beltType, x, y + 0.5, { direction: DIRECTION.DOWN })\n                )\n            }\n            for (let i = splitter.position.x + 1; i < x; i++) {\n                returnArray.push(\n                    newItem(bpSettings.beltType, i, splitter.position.y + 0.5, {\n                        direction: DIRECTION.RIGHT,\n                    })\n                )\n            }\n            x += 1\n        })\n    }\n    // Loading from front, splitters[0] is the front splitter\n    if (mode === \"load\" && beltEnd === \"Front\") {\n        splitters.forEach((splitter) => {\n            for (let y = splitters[0].position.y; y < splitter.position.y; y++) {\n                returnArray.push(\n                    newItem(bpSettings.beltType, x, y - 0.5, { direction: DIRECTION.DOWN })\n                )\n            }\n            for (let i = splitter.position.x + 1; i <= x; i++) {\n                returnArray.push(\n                    newItem(bpSettings.beltType, i, splitter.position.y - 0.5, {\n                        direction: DIRECTION.LEFT,\n                    })\n                )\n            }\n            x += 1\n        })\n    }\n    // Loading from back, splitters[0] is the back splitter\n    if (mode === \"load\" && beltEnd === \"Back\") {\n        splitters.reverse()\n        splitters.forEach((splitter) => {\n            for (let y = splitters[0].position.y; y > splitter.position.y; y--) {\n                returnArray.push(\n                    newItem(bpSettings.beltType, x, y + 0.5, { direction: DIRECTION.UP })\n                )\n            }\n            for (let i = splitter.position.x + 1; i <= x; i++) {\n                returnArray.push(\n                    newItem(bpSettings.beltType, i, splitter.position.y + 0.5, {\n                        direction: DIRECTION.LEFT,\n                    })\n                )\n            }\n            x += 1\n        })\n    }\n    return returnArray\n}\nexport const placeSplitters = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    const returnArray: iBlueprintItem[] = []\n    const splitterType = splitterTypes[bpSettings.beltType]\n    const splitterDirection =\n        bpSettings.stationType === \"Loading Station\" ? DIRECTION.LEFT : DIRECTION.RIGHT\n    getCargoArray(bpSettings).forEach((y, i) => {\n        if (i % 7 !== 4) return\n        returnArray.push(newItem(splitterType, 4, y, { direction: splitterDirection }))\n    })\n    return returnArray\n}\nexport const placePoles = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    // Size is 1x1, so coordinate ends in 0.5\n    const returnArray: iBlueprintItem[] = []\n    getCargoArray(bpSettings).forEach((y, i) => {\n        if (i % 7 !== 0) return\n        returnArray.push(newItem(\"medium-electric-pole\", 0, y + 0.5))\n    })\n    return returnArray\n}\nexport const placeLamps = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    // Size is 1x1, so coordinate ends in 0.5\n    const returnArray: iBlueprintItem[] = []\n    getCargoArray(bpSettings).forEach((y, i) => {\n        if (i % 7 !== 0) return\n        returnArray.push(newItem(\"small-lamp\", 1, y + 0.5))\n    })\n    // TODO Fix lamps for refill inserters/chests?\n    // if (\n    //     bpSettings.refillEnabled ||\n    //     bpSettings.trainStopUsesEnabledCondition ||\n    //     (bpSettings.trainLimit === \"Dynamic\" && normalStation.includes(bpSettings.stationType))\n    // ) {\n    //     getFrontLocomotivesArray(bpSettings).forEach((y, i, array) => {\n    //         if (i % 7 !== 0 || array.length === i - 1 || i === 0) return\n    //         returnArray.push(newItem(\"small-lamp\", 1, y + 0.5))\n    //     })\n    // }\n    // if (bpSettings.refillEnabled) {\n    //     getBackLocomotivesArray(bpSettings).forEach((y, i, array) => {\n    //         if (i % 7 !== 0 || array.length === i - 1 || i === 0) return\n    //         returnArray.push(newItem(\"small-lamp\", 1, y + 0.5))\n    //     })\n    // }\n    return returnArray\n}\n// Decider for enabled-condition\nexport const placeEnabledConditionDecider = (\n    bpSettings: typeof defaultSettings,\n    topPole: iBlueprintItem,\n    trainStop: iBlueprintItem\n): iBlueprintItem[] => {\n    const decider = newItem(\"decider-combinator\", 0, 1, {\n        control_behavior: {\n            decider_conditions: {\n                first_signal: {\n                    type: \"virtual\",\n                    name: \"signal-anything\",\n                },\n                constant: parseInt(bpSettings.enabledConditionAmount),\n                comparator: bpSettings.enabledConditionOperator,\n                output_signal: {\n                    type: \"virtual\",\n                    name: \"signal-red\",\n                },\n                copy_count_from_input: false,\n            },\n        },\n    })\n    // Combine decider output with trainstop with green wire\n    connectTwoEntitiesWithWire(decider, trainStop, \"green\", \"2\", \"1\")\n    // Combine decider input with pole with green wire\n    connectTwoEntitiesWithWire(decider, topPole, \"green\")\n    return [decider]\n}\n// Combinators for set train limit dynamically\nexport const placeDynamicTrainLimitCombinators = (\n    bpSettings: typeof defaultSettings,\n    topPole: iBlueprintItem,\n    trainStop: iBlueprintItem\n): iBlueprintItem[] => {\n    const deciderXOffset = bpSettings.trainStopUsesEnabledCondition ? 1 : 0\n    const arithmeticXOffset = bpSettings.placeLampsNearPoles ? 1 : 0\n    const decider = newItem(\"decider-combinator\", deciderXOffset, 1, {\n        control_behavior: {\n            decider_conditions: {\n                first_signal: {\n                    type: \"virtual\",\n                    name: \"signal-each\",\n                },\n                constant: 0,\n                comparator: \">\",\n                output_signal: {\n                    type: \"virtual\",\n                    name: \"signal-L\",\n                },\n                copy_count_from_input: true,\n            },\n        },\n    })\n    // Set settings of the first arithmetic combinator\n    const arithmetic1Condition: iArithmeticCondition = {\n        operation: bpSettings.trainLimitArithmetic1Operator,\n        output_signal: {\n            type: \"virtual\",\n            name: \"signal-A\",\n        },\n    }\n    if (\n        bpSettings.trainLimitArithmetic1Constant1 === \"each\" ||\n        allowedCharacters.includes(bpSettings.trainLimitArithmetic1Constant1)\n    )\n        arithmetic1Condition[\"first_signal\"] = {\n            type: \"virtual\",\n            name:\n                bpSettings.trainLimitArithmetic1Constant1 === \"each\"\n                    ? \"signal-each\"\n                    : `signal-${bpSettings.trainLimitArithmetic1Constant1}`,\n        }\n    else\n        arithmetic1Condition[\"first_constant\"] = parseInt(bpSettings.trainLimitArithmetic1Constant1)\n    if (\n        bpSettings.trainLimitArithmetic1Constant2 === \"each\" ||\n        allowedCharacters.includes(bpSettings.trainLimitArithmetic1Constant2)\n    )\n        arithmetic1Condition[\"second_signal\"] = {\n            type: \"virtual\",\n            name:\n                bpSettings.trainLimitArithmetic1Constant2 === \"each\"\n                    ? \"signal-each\"\n                    : `signal-${bpSettings.trainLimitArithmetic1Constant2}`,\n        }\n    else\n        arithmetic1Condition[\"second_constant\"] = parseInt(\n            bpSettings.trainLimitArithmetic1Constant2\n        )\n    const arithmetic1 = newItem(\"arithmetic-combinator\", 1 + arithmeticXOffset, 4, {\n        control_behavior: {\n            arithmetic_conditions: arithmetic1Condition,\n        },\n    })\n    // Set settings of the second arithmetic combinator\n    const arithmetic2Condition: iArithmeticCondition = {\n        operation: bpSettings.trainLimitArithmetic2Operator,\n        output_signal: {\n            type: \"virtual\",\n            name: \"signal-A\",\n        },\n    }\n    if (\n        bpSettings.trainLimitArithmetic2Constant1 === \"each\" ||\n        allowedCharacters.includes(bpSettings.trainLimitArithmetic2Constant1)\n    )\n        arithmetic2Condition[\"first_signal\"] = {\n            type: \"virtual\",\n            name:\n                bpSettings.trainLimitArithmetic2Constant1 === \"each\"\n                    ? \"signal-each\"\n                    : `signal-${bpSettings.trainLimitArithmetic2Constant1}`,\n        }\n    else\n        arithmetic2Condition[\"first_constant\"] = parseInt(bpSettings.trainLimitArithmetic2Constant1)\n    if (\n        bpSettings.trainLimitArithmetic2Constant2 === \"each\" ||\n        allowedCharacters.includes(bpSettings.trainLimitArithmetic2Constant2)\n    )\n        arithmetic2Condition[\"second_signal\"] = {\n            type: \"virtual\",\n            name:\n                bpSettings.trainLimitArithmetic2Constant2 === \"each\"\n                    ? \"signal-each\"\n                    : `signal-${bpSettings.trainLimitArithmetic2Constant2}`,\n        }\n    else\n        arithmetic2Condition[\"second_constant\"] = parseInt(\n            bpSettings.trainLimitArithmetic2Constant2\n        )\n    const arithmetic2 = newItem(\"arithmetic-combinator\", 2 + arithmeticXOffset, 4, {\n        control_behavior: {\n            arithmetic_conditions: arithmetic2Condition,\n        },\n    })\n    // Combine decider output with trainstop with green wire\n    connectTwoEntitiesWithWire(decider, trainStop, \"green\", \"2\", \"1\")\n    // arithmentic gets: \"2\"(output) green connection with circuit number 1 to decider which gets \"1\"(input) green connection with circuit number 2\n    connectTwoEntitiesWithWire(arithmetic2, decider, \"green\", \"2\", \"1\", 1, 2)\n    connectTwoEntitiesWithWire(arithmetic1, arithmetic2, \"green\", \"2\", \"1\", 1, 2)\n    // Combine decider input with pole with green wire\n    connectTwoEntitiesWithWire(arithmetic1, topPole, \"green\")\n    return [decider, arithmetic1, arithmetic2]\n}\n// Refuel\nexport const placeTopRefuelPoles = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    const returnArray: iBlueprintItem[] = []\n    getFrontLocomotivesArray(bpSettings).forEach((y, i, array) => {\n        if (i % 7 !== 0 || array.length === i - 1 || i === 0) return\n        returnArray.push(newItem(\"medium-electric-pole\", 0, y + 0.5))\n    })\n    return returnArray\n}\nexport const placeBottomRefuelPoles = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    const returnArray: iBlueprintItem[] = []\n    getBackLocomotivesArray(bpSettings).forEach((y, i, array) => {\n        if (i % 7 !== 0 || array.length === i - 1 || i === 0) return\n        returnArray.push(newItem(\"medium-electric-pole\", 0, y + 0.5))\n    })\n    return returnArray\n}\nexport const placeRefuelChestsAndInserters = (\n    bpSettings: typeof defaultSettings\n): iBlueprintItem[] => {\n    // Size is 1x1, so coordinate ends in 0.5\n    const returnArray: iBlueprintItem[] = []\n    getFrontLocomotivesArray(bpSettings).forEach((y, i) => {\n        if (i % 7 !== 5) return\n        returnArray.push(newItem(\"inserter\", 0, y + 0.5, { direction: DIRECTION.RIGHT }))\n        returnArray.push(\n            newItem(\"logistic-chest-requester\", 1, y + 0.5, {\n                request_filters: [\n                    {\n                        index: 1,\n                        name: bpSettings.refillFuelType,\n                        count: parseInt(bpSettings.refillFuelAmount),\n                    },\n                ],\n            })\n        )\n    })\n    getBackLocomotivesArray(bpSettings).forEach((y, i) => {\n        if (i % 7 !== 2) return\n        returnArray.push(newItem(\"inserter\", 0, y + 0.5, { direction: DIRECTION.RIGHT }))\n        returnArray.push(\n            newItem(\"logistic-chest-requester\", 1, y + 0.5, {\n                request_filters: [\n                    {\n                        index: 1,\n                        name: bpSettings.refillFuelType,\n                        count: parseInt(bpSettings.refillFuelAmount),\n                    },\n                ],\n            })\n        )\n    })\n    return returnArray\n}\n// Wire functions\nexport const connectTwoEntitiesWithWire = (\n    entity1: iBlueprintItem,\n    entity2: iBlueprintItem,\n    color: iWireColor,\n    entity1ConNumber: \"1\" | \"2\" = \"1\",\n    entity2ConNumber: \"1\" | \"2\" = \"1\",\n    circuit1Number: 1 | 2 | undefined = undefined,\n    circuit2Number: 1 | 2 | undefined = undefined\n): void => {\n    const entity1Number = entity1.entity_number\n    const entity2Number = entity2.entity_number\n\n    const createWirePath = (entity: iBlueprintItem, conNumber: \"1\" | \"2\") => {\n        if (!entity.connections) {\n            entity.connections = {}\n        }\n        if (!entity.connections[conNumber]) {\n            entity.connections[conNumber] = {}\n        }\n        const entityColor = entity.connections[conNumber] as {\n            red?: iCircuitConnection[]\n            green?: iCircuitConnection[]\n        }\n        if (!entityColor[color]) {\n            entityColor[color] = []\n        }\n        // Or in short but typescript doesnt let me:\n        // if (!entity.connections[conNumber][color]) {\n        //     entity.connections[conNumber][color] = []\n        // }\n    }\n\n    createWirePath(entity1, entity1ConNumber)\n    createWirePath(entity2, entity2ConNumber)\n\n    const conn1: iCircuitConnection = {\n        entity_id: entity2Number,\n    }\n    const conn2: iCircuitConnection = {\n        entity_id: entity1Number,\n    }\n    // Add circuit_id if both items are of type combinator (decider, arithmetic etc)\n    if (circuit1Number) {\n        conn1.circuit_id = circuit1Number\n    }\n    if (circuit2Number) {\n        conn2.circuit_id = circuit2Number\n    }\n    // Let me know if you come up with a readable solution for this:\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    entity1.connections[entity1ConNumber][color].push(conn1)\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    entity2.connections[entity2ConNumber][color].push(conn2)\n}\nexport const connectItemsWithWire = (items: iBlueprintItem[], color: iWireColor): void => {\n    items.forEach((item1, index) => {\n        if (index === 0) return\n        const item2 = items[index - 1]\n        connectTwoEntitiesWithWire(item1, item2, color)\n    })\n}\n// Helper functions\nexport const mirrorItemsHorizontal = (items: iBlueprintItem[]): iBlueprintItem[] => {\n    // Returns a new array with clones of items\n    return items.map((item) => {\n        const copy = cloneDeep(item) as iBlueprintItem\n        copy.entity_number = entityNumber\n        entityNumber += 1\n        copy.position.x = -copy.position.x + mirrorXOffset\n        if (copy.name === \"storage-tank\") {\n            if (!copy.direction) copy.direction = 2\n            else copy.direction = undefined\n        } else {\n            if (copy.direction === DIRECTION.LEFT) copy.direction = DIRECTION.RIGHT\n            else if (copy.direction === DIRECTION.RIGHT) copy.direction = DIRECTION.LEFT\n        }\n        return copy\n    })\n}\nexport const changeItemsCoordinates = (items: iBlueprintItem[], x = 0, y = 0): void => {\n    // Changes the items directly\n    items.forEach((item) => {\n        item.position = {\n            x: item.position.x + x,\n            y: item.position.y + y,\n        }\n    })\n}\nexport const copyPasteItems = (items: iBlueprintItem[], x = 0, y = 0): iBlueprintItem[] => {\n    // Changes the items directly\n    return items.map((item) => {\n        const clone: iBlueprintItem = cloneDeep(item)\n        clone.entity_number = entityNumber\n        entityNumber += 1\n        clone.position = {\n            x: clone.position.x + x,\n            y: clone.position.y + y,\n        }\n        return clone\n    })\n}\nexport const mixSides = (\n    sidesUsed: \"Both\" | \"Right\" | \"Left\",\n    leftArray: iBlueprintItem[],\n    rightArray: iBlueprintItem[]\n): iBlueprintItem[] => {\n    if (sidesUsed === \"Both\") {\n        return [...leftArray, ...rightArray]\n    } else if (sidesUsed === \"Left\") {\n        return leftArray\n    } else if (sidesUsed === \"Right\") {\n        return rightArray\n    }\n    console.assert(\"Error returning empty array\")\n    return []\n}\nexport const sortByYPosition = (items: iBlueprintItem[]): void => {\n    items.sort((a, b) => {\n        // Smaller y first\n        if (a.position.y < b.position.y) {\n            return -1\n        } else if (a.position.y > b.position.y) {\n            return 1\n        }\n        // If equal, sort by x (right side first)\n        if (a.position.x < b.position.x) {\n            return 1\n        } else if (a.position.x > b.position.x) {\n            return -1\n        }\n        return 0\n    })\n}\n","import {\n    iBeltSides,\n    iBeltTypes,\n    iChestTypes,\n    iEnabledConditionOperators,\n    iInserterTypes,\n    iPumpSides,\n    iRefillFuelTypes,\n} from \"./interfaces\"\n\nexport const mirrorXOffset = -3\n\nexport type iStationType =\n    | \"Loading Station\"\n    | \"Unloading Station\"\n    | \"Fluid Loading Station\"\n    | \"Fluid Unloading Station\"\n    | \"Stacker\"\nexport const stationTypes: iStationType[] = [\n    \"Loading Station\",\n    \"Unloading Station\",\n    \"Fluid Loading Station\",\n    \"Fluid Unloading Station\",\n    \"Stacker\",\n]\nexport const normalStation: iStationType[] = [\"Loading Station\", \"Unloading Station\"]\nexport const fluidStation: iStationType[] = [\"Fluid Loading Station\", \"Fluid Unloading Station\"]\nexport const trainLimit = [\"Disabled\", \"Dynamic\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]\n\nexport const inserterTypes: iInserterTypes[] = [\"inserter\", \"fast-inserter\", \"stack-inserter\"]\nexport const filterInserters = {\n    inserter: \"filter-inserter\",\n    \"fast-inserter\": \"filter-inserter\",\n    \"stack-inserter\": \"filter-inserter\",\n}\nexport const basicChestTypes: iChestTypes[] = [\"wooden-chest\", \"iron-chest\", \"steel-chest\"]\nexport const botChestTypes: iChestTypes[] = [\n    \"logistic-chest-requester\",\n    \"logistic-chest-buffer\",\n    \"logistic-chest-passive-provider\",\n    \"logistic-chest-active-provider\",\n    \"logistic-chest-storage\",\n]\nexport const chestTypes: iChestTypes[] = [...basicChestTypes, ...botChestTypes]\nexport const requestChestTypes: iChestTypes[] = [\n    \"logistic-chest-requester\",\n    \"logistic-chest-buffer\",\n]\nexport const chestTypesHuman = {\n    \"wooden-chest\": \"Wooden Chest\",\n    \"iron-chest\": \"Iron Chest\",\n    \"steel-chest\": \"Steel Chest\",\n    \"logistic-chest-requester\": \"Requester Chest\",\n    \"logistic-chest-buffer\": \"Buffer Chest\",\n    \"logistic-chest-passive-provider\": \"Passive Provider Chest\",\n    \"logistic-chest-active-provider\": \"Active Provider Chest\",\n    \"logistic-chest-storage\": \"Storage Chest\",\n}\nexport const beltTypes: iBeltTypes[] = [\n    \"transport-belt\",\n    \"fast-transport-belt\",\n    \"express-transport-belt\",\n]\nexport const beltTypesHuman = {\n    \"transport-belt\": \"Yellow Belt\",\n    \"fast-transport-belt\": \"Red Belt\",\n    \"express-transport-belt\": \"Blue Belt\",\n}\nexport const splitterTypes = {\n    \"transport-belt\": \"splitter\",\n    \"fast-transport-belt\": \"fast-splitter\",\n    \"express-transport-belt\": \"express-splitter\",\n}\nexport const beltSides: iBeltSides[] = [\"Both\", \"Right\", \"Left\"]\nexport const pumpSides: iPumpSides[] = [\"Right\", \"Left\"]\nexport const beltFlowDirections = [\"Front\", \"Back\", \"None\"]\nexport const refillFuelTypes: iRefillFuelTypes[] = [\n    \"wood\",\n    \"coal\",\n    \"solid-fuel\",\n    \"rocket-fuel\",\n    \"nuclear-fuel\",\n]\nexport const refillFuelTypesHuman = {\n    wood: \"Wood\",\n    coal: \"Coal\",\n    \"solid-fuel\": \"Solid Fuel\",\n    \"rocket-fuel\": \"Rocket Fuel\",\n    \"nuclear-fuel\": \"Nuclear Fuel\",\n}\n\nexport const stackerDiagonalTypes = [\"Left-Right\", \"Right-Left\"]\nexport const stackerTypes = [\"Left-Left\", \"Right-Right\", ...stackerDiagonalTypes]\n\nexport enum DIRECTION {\n    UP = 0,\n    RIGHT = 2,\n    DOWN = 4,\n    LEFT = 6,\n}\n\nexport const enabledConditionOperators: iEnabledConditionOperators[] = [\">\", \"<\"]\nexport const enabledConditionOperatorsHuman = { \">\": \"> (more than)\", \"<\": \"< (less than)\" }\n\nexport type iCombinator = \"arithmetic-combinator\" | \"decider-combinator\"\nexport const combinatorTypes: iCombinator[] = [\"arithmetic-combinator\", \"decider-combinator\"]\nexport type iOperator = \"+\" | \"-\" | \"*\" | \"/\" | \"^\" | \"%\" | \"<<\" | \">>\" | \"AND\" | \"OR\" | \"XOR\"\nexport const operatorTypes: iOperator[] = [\n    \"+\",\n    \"-\",\n    \"*\",\n    \"/\",\n    \"^\",\n    \"%\",\n    \"<<\",\n    \">>\",\n    \"AND\",\n    \"OR\",\n    \"XOR\",\n]\nexport const allowedCharacters = [\n    \"A\",\n    \"B\",\n    \"C\",\n    \"D\",\n    \"E\",\n    \"F\",\n    \"G\",\n    \"H\",\n    \"I\",\n    \"J\",\n    \"K\",\n    \"L\",\n    \"M\",\n    \"N\",\n    \"O\",\n    \"P\",\n    \"Q\",\n    \"R\",\n    \"S\",\n    \"T\",\n    \"U\",\n    \"V\",\n    \"W\",\n    \"X\",\n    \"Y\",\n    \"Z\",\n]\n\nexport const defaultSettings = {\n    // Global tooltip text\n    tooltipText: \"\",\n\n    // Station type\n    stationType: [...stationTypes][0],\n    stationName: \"\",\n\n    trainLimit: trainLimit[0],\n\n    trainLimitArithmetic1Constant1: \"each\",\n    trainLimitArithmetic1Constant2: \"333\",\n    trainLimitArithmetic1Operator: \"/\",\n\n    trainLimitArithmetic2Constant1: \"each\",\n    trainLimitArithmetic2Constant2: \"0\",\n    trainLimitArithmetic2Operator: \"+\",\n\n    // Train type\n    doubleHeaded: true,\n    locomotivesPerEnd: \"1\",\n    cargoWagon: \"2\",\n    includeTrainInBlueprint: true,\n\n    // Pump Settings\n    pumpSidesToBeUsed: [...pumpSides][0],\n    pumpConnectWithPipe: true,\n\n    // Inserter types\n    inserterType: [...inserterTypes][0],\n    enableFilterInserters: false,\n    // Items that need to be filtered, max array length: 5\n    filterFields: Array(5).fill(\"\"),\n\n    // Chest types and settings\n    chestType: [...chestTypes][1],\n    // How many slots in the chest are enabled\n    chestLimit: \"7\",\n    // For requester and buffer chests\n    chestRequestFromBuffers: true,\n    chestRequestItemsType: Array(12).fill(\"\"),\n    chestRequestItemsAmount: Array(12).fill(\"\"),\n\n    // Belt settings\n    beltType: [...beltTypes][1],\n    beltSidesUsed: [...beltSides][0],\n    beltFlowDirection: [...beltFlowDirections][0],\n\n    // Refill at station?\n    refillEnabled: true,\n    refillFuelType: [...refillFuelTypes][2],\n    refillFuelAmount: \"20\",\n\n    // Wire settings\n    connectChestsWithGreenWire: false,\n    connectBothSideWithGreenWire: false,\n    connectChestsWithRedWire: false,\n    connectBothSideWithRedWire: false,\n\n    // Enabled condition:\n    trainStopUsesEnabledCondition: false,\n    enabledConditionOperator: [...enabledConditionOperators][0],\n    enabledConditionAmount: \"4000\",\n\n    // Lights\n    placeLampsNearPoles: false,\n\n    // Stacker settings\n    stackerNumberParallelLanes: \"3\",\n    diagonalStacker: true,\n    stackerType: [...stackerTypes][0],\n}\n","import { defaultSettings, normalStation, fluidStation } from \"../constants/constants\"\nimport { iBlueprint, iBlueprintItem } from \"../constants/interfaces\"\nimport { createNormalStation } from \"./CreateNormalStation\"\nimport { createFluidStation } from \"./CreateFluidStation\"\nimport { createStacker } from \"./CreateStacker\"\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst zlib = require(\"zlib\")\n\nexport const createBlueprint = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    if (normalStation.includes(bpSettings.stationType)) {\n        return createNormalStation(bpSettings)\n    }\n    if (fluidStation.includes(bpSettings.stationType)) {\n        return createFluidStation(bpSettings)\n    } else if (bpSettings.stationType === \"Stacker\") {\n        return createStacker(bpSettings)\n    }\n    return []\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst decode = (blueprintString: string) => {\n    // UNTESTED stolen from https://github.com/demipixel/factorio-blueprint/blob/c21309e9023ee3740a5c3c647d87cb828ab3ecc4/src/util.ts#L20\n    return JSON.parse(\n        zlib.inflateSync(Buffer.from(blueprintString.slice(1), \"base64\")).toString(\"utf8\")\n    )\n}\n\nconst encode = (items: iBlueprintItem[]) => {\n    const blueprint = {\n        blueprint: {\n            icons: [\n                {\n                    signal: {\n                        type: \"item\",\n                        name: \"transport-belt\",\n                    },\n                    index: 1,\n                },\n            ],\n            entities: items,\n            item: \"blueprint\",\n            version: \"0\",\n            label: \"Blueprint\",\n        },\n    }\n    return \"0\" + zlib.deflateSync(JSON.stringify(blueprint), { level: 9 }).toString(\"base64\")\n}\n\nexport const createBlueprintString = (blueprint: iBlueprint): string => {\n    // Stolen from https://github.com/demipixel/factorio-blueprint/blob/c21309e9023ee3740a5c3c647d87cb828ab3ecc4/src/util.ts#L41\n    return encode(blueprint)\n}\n","import { botChestTypes, defaultSettings } from \"../constants/constants\"\nimport { iBlueprintItem } from \"../constants/interfaces\"\nimport {\n    placeChests,\n    mirrorItemsHorizontal,\n    mixSides,\n    sortByYPosition,\n    connectItemsWithWire,\n    connectTwoEntitiesWithWire,\n    placeInserters,\n    placeLoadingBelts,\n    placeUnloadingBelts,\n    placePoles,\n    placeTrainTracks,\n    placeSignals,\n    placeTrainStop,\n    placeRefuelChestsAndInserters,\n    placeTopRefuelPoles,\n    placeBottomRefuelPoles,\n    placeEnabledConditionDecider,\n    placeLamps,\n    placeSplitters,\n    changeItemsCoordinates,\n    placeTrain,\n    placeVerticalBelts,\n    resetEntityNumber,\n    placeDynamicTrainLimitCombinators,\n} from \"./CreateItems\"\n\nexport const createNormalStation = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    resetEntityNumber()\n    let allItems: iBlueprintItem[] = []\n    let rightSplitters: iBlueprintItem[] = []\n\n    // For each station, create all items, then shift them down\n    let stationItems: iBlueprintItem[] = []\n    // Create chests and connect them with wire\n    const rightChests = placeChests(bpSettings)\n    const leftChests = mirrorItemsHorizontal(rightChests)\n    const chests = mixSides(bpSettings.beltSidesUsed, leftChests, rightChests)\n    // Sorting not required?\n    sortByYPosition(rightChests)\n    sortByYPosition(leftChests)\n    if (bpSettings.connectChestsWithGreenWire) {\n        connectItemsWithWire(leftChests, \"green\")\n        connectItemsWithWire(rightChests, \"green\")\n        if (bpSettings.connectBothSideWithGreenWire && bpSettings.beltSidesUsed === \"Both\") {\n            connectTwoEntitiesWithWire(rightChests[0], leftChests[0], \"green\")\n        }\n    }\n    if (bpSettings.connectChestsWithRedWire) {\n        connectItemsWithWire(leftChests, \"red\")\n        connectItemsWithWire(rightChests, \"red\")\n        if (bpSettings.connectBothSideWithRedWire && bpSettings.beltSidesUsed === \"Both\") {\n            connectTwoEntitiesWithWire(rightChests[0], leftChests[0], \"red\")\n        }\n    }\n\n    // Mirrorable items\n    let rightSideItems: iBlueprintItem[] = []\n    // Exclude belts and splitters (and without splitters: no vertical belts) if chest type uses bots\n    if (!botChestTypes.includes(bpSettings.chestType)) {\n        const newSplitters = placeSplitters(bpSettings)\n        rightSplitters = [...rightSplitters, ...newSplitters]\n        if (bpSettings.stationType === \"Loading Station\") {\n            rightSideItems = [...rightSideItems, ...placeLoadingBelts(bpSettings)]\n        } else {\n            // Unloading station\n            rightSideItems = [...rightSideItems, ...placeUnloadingBelts(bpSettings)]\n        }\n    }\n    rightSideItems = [...rightSideItems, ...placeInserters(bpSettings)]\n\n    const rightPoles = placePoles(bpSettings)\n    const leftPoles = mirrorItemsHorizontal(rightPoles)\n    const poles = mixSides(bpSettings.beltSidesUsed, leftPoles, rightPoles)\n    let leftSideItems: iBlueprintItem[] = mirrorItemsHorizontal(rightSideItems)\n\n    // Combine remaining items which were already mirrored and offset-ed\n    rightSideItems = [...rightSideItems, ...rightPoles, ...rightChests]\n    leftSideItems = [...leftSideItems, ...leftPoles, ...leftChests]\n    if (bpSettings.placeLampsNearPoles) {\n        const rightLamps = placeLamps(bpSettings)\n        const leftLamps = mirrorItemsHorizontal(rightLamps)\n        rightSideItems = [...rightSideItems, ...rightLamps]\n        leftSideItems = [...leftSideItems, ...leftLamps]\n    }\n\n    // All items that need no mirroring (tracks, signals, train stops, refuel chests and inserter, poles for those, decider combinator)\n    stationItems = [...stationItems, ...placeTrainTracks(bpSettings)]\n    stationItems = [...stationItems, ...placeSignals(bpSettings)]\n    const trainStop = placeTrainStop(bpSettings)[0]\n    stationItems = [...stationItems, trainStop]\n    if (bpSettings.refillEnabled) {\n        // Place inserters, chests, and bottom poles\n        stationItems = [...stationItems, ...placeRefuelChestsAndInserters(bpSettings)]\n        stationItems = [...stationItems, ...placeBottomRefuelPoles(bpSettings)]\n    }\n    if (\n        bpSettings.refillEnabled ||\n        bpSettings.trainStopUsesEnabledCondition ||\n        bpSettings.trainLimit === \"Dynamic\"\n    ) {\n        // Place top poles if refil enabled\n        const topPoles = placeTopRefuelPoles(bpSettings)\n        stationItems = [...stationItems, ...topPoles]\n\n        // Connect top chest with top pole, and top pole with the top-refill-poles\n        sortByYPosition(poles)\n        // In enabled-condition: place decider\n        if (bpSettings.trainStopUsesEnabledCondition) {\n            stationItems = [\n                ...stationItems,\n                placeEnabledConditionDecider(bpSettings, poles[0], trainStop)[0],\n            ]\n        }\n        // If dynamic train limit: place decider and arithmetic (2 arithmetic for unloading)\n        if (bpSettings.trainLimit === \"Dynamic\") {\n            const combinators = placeDynamicTrainLimitCombinators(bpSettings, poles[0], trainStop)\n            stationItems = [...stationItems, ...combinators]\n        }\n        // Connect top refill poles if enabled-condition or trainLimit=dynamic\n        if (bpSettings.trainStopUsesEnabledCondition || bpSettings.trainLimit === \"Dynamic\") {\n            sortByYPosition(chests)\n            const combineArray = [chests[0], poles[0], ...topPoles]\n            sortByYPosition(combineArray)\n            connectItemsWithWire(combineArray, \"green\")\n        }\n    }\n    if (bpSettings.includeTrainInBlueprint) {\n        stationItems = [...stationItems, ...placeTrain(bpSettings)]\n    }\n\n    // Combine left and right side items\n    stationItems = [\n        ...stationItems,\n        ...mixSides(bpSettings.beltSidesUsed, leftSideItems, rightSideItems),\n    ]\n\n    allItems = [...allItems, ...stationItems]\n\n    if (bpSettings.beltFlowDirection !== \"None\") {\n        const rightVerticalBelts = placeVerticalBelts(bpSettings, rightSplitters)\n        const leftVerticalBelts = mirrorItemsHorizontal(rightVerticalBelts)\n        allItems = [\n            ...allItems,\n            ...mixSides(bpSettings.beltSidesUsed, leftVerticalBelts, rightVerticalBelts),\n        ]\n    }\n    // Add splitters which were previously globally collected to create vertical belts\n    const leftSplitters = mirrorItemsHorizontal(rightSplitters)\n    allItems = [...allItems, ...mixSides(bpSettings.beltSidesUsed, leftSplitters, rightSplitters)]\n\n    const trainStops = allItems.filter((item) => {\n        return item.name === \"train-stop\"\n    })\n    const railSignals = allItems.filter((item) => {\n        return item.name === \"rail-signal\"\n    })\n    sortByYPosition(trainStops)\n    sortByYPosition(railSignals)\n    trainStops.slice(1).forEach((stop, i) => {\n        const signal = railSignals[i]\n        connectTwoEntitiesWithWire(stop, signal, \"green\")\n    })\n\n    // All items are off by 0.5, fix here\n    changeItemsCoordinates(allItems, -0.5)\n    return allItems\n}\n","import { defaultSettings } from \"../constants/constants\"\nimport { iBlueprintItem } from \"../constants/interfaces\"\nimport {\n    mirrorItemsHorizontal,\n    mixSides,\n    sortByYPosition,\n    connectItemsWithWire,\n    connectTwoEntitiesWithWire,\n    placePoles,\n    placeTrainTracks,\n    placeSignals,\n    placeTrainStop,\n    placeRefuelChestsAndInserters,\n    placeTopRefuelPoles,\n    placeBottomRefuelPoles,\n    placeEnabledConditionDecider,\n    placeLamps,\n    changeItemsCoordinates,\n    placeTrain,\n    resetEntityNumber,\n    placeStorageTanks,\n    placePumps,\n    placePipes,\n} from \"./CreateItems\"\n\nexport const createFluidStation = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    resetEntityNumber()\n    let allItems: iBlueprintItem[] = []\n\n    // For each station, create all items, then shift them down\n    let stationItems: iBlueprintItem[] = []\n    // Sorting not required?\n    const rightStorageTanks: iBlueprintItem[] = placeStorageTanks(bpSettings)\n    const leftStorageTanks: iBlueprintItem[] = mirrorItemsHorizontal(rightStorageTanks)\n    sortByYPosition(rightStorageTanks)\n    sortByYPosition(leftStorageTanks)\n    if (bpSettings.connectChestsWithGreenWire) {\n        connectItemsWithWire(leftStorageTanks, \"green\")\n        connectItemsWithWire(rightStorageTanks, \"green\")\n    }\n    if (bpSettings.connectChestsWithRedWire) {\n        connectItemsWithWire(leftStorageTanks, \"red\")\n        connectItemsWithWire(rightStorageTanks, \"red\")\n    }\n\n    // Mirrorable items\n    let rightSideItems: iBlueprintItem[] = []\n\n    const rightPoles = placePoles(bpSettings)\n    const leftPoles = mirrorItemsHorizontal(rightPoles)\n    const poles = mixSides(bpSettings.pumpSidesToBeUsed, leftPoles, rightPoles)\n    let leftSideItems: iBlueprintItem[] = mirrorItemsHorizontal(rightSideItems)\n    const rightPumps = placePumps(bpSettings)\n    const leftPumps = mirrorItemsHorizontal(rightPumps)\n    const rightPipes = placePipes(bpSettings)\n    const leftPipes = mirrorItemsHorizontal(rightPipes)\n\n    // Combine remaining items which were already mirrored and offset-ed\n    if (bpSettings.placeLampsNearPoles) {\n        const rightLamps = placeLamps(bpSettings)\n        const leftLamps = mirrorItemsHorizontal(rightLamps)\n        rightSideItems = [...rightSideItems, ...rightLamps]\n        leftSideItems = [...leftSideItems, ...leftLamps]\n    }\n    rightSideItems = [...rightSideItems, ...rightPoles, ...rightPumps, ...rightPipes]\n    leftSideItems = [...leftSideItems, ...leftPoles, ...leftPumps, ...leftPipes]\n\n    // All items that need no mirroring (tracks, signals, train stops, refuel chests and inserter, poles for those, decider combinator)\n    stationItems = [...stationItems, ...placeTrainTracks(bpSettings)]\n    stationItems = [...stationItems, ...placeSignals(bpSettings)]\n    const trainStop = placeTrainStop(bpSettings)[0]\n    stationItems = [...stationItems, trainStop]\n    if (bpSettings.refillEnabled) {\n        stationItems = [...stationItems, ...placeRefuelChestsAndInserters(bpSettings)]\n        const bottomPoles = placeBottomRefuelPoles(bpSettings)\n        stationItems = [...stationItems, ...bottomPoles]\n    }\n    if (bpSettings.refillEnabled || bpSettings.trainStopUsesEnabledCondition) {\n        const topPoles = placeTopRefuelPoles(bpSettings)\n        stationItems = [...stationItems, ...topPoles]\n        if (bpSettings.trainStopUsesEnabledCondition) {\n            const storageTanks = mixSides(\n                bpSettings.pumpSidesToBeUsed,\n                leftStorageTanks,\n                rightStorageTanks\n            )\n            sortByYPosition(poles)\n            stationItems = [\n                ...stationItems,\n                placeEnabledConditionDecider(bpSettings, poles[0], trainStop)[0],\n            ]\n            sortByYPosition(storageTanks)\n            const combineArray = [storageTanks[0], poles[0], ...topPoles]\n            sortByYPosition(combineArray)\n            connectItemsWithWire(combineArray, \"green\")\n        }\n    }\n    if (bpSettings.includeTrainInBlueprint) {\n        stationItems = [...stationItems, ...placeTrain(bpSettings)]\n    }\n\n    // Combine left and right side items\n    stationItems = [\n        ...stationItems,\n        ...mixSides(bpSettings.pumpSidesToBeUsed, leftSideItems, rightSideItems),\n        ...mixSides(bpSettings.pumpSidesToBeUsed, leftStorageTanks, rightStorageTanks),\n    ]\n\n    allItems = [...allItems, ...stationItems]\n\n    const trainStops = allItems.filter((item) => {\n        return item.name === \"train-stop\"\n    })\n    const railSignals = allItems.filter((item) => {\n        return item.name === \"rail-signal\"\n    })\n    sortByYPosition(trainStops)\n    sortByYPosition(railSignals)\n    trainStops.slice(1).forEach((stop, i) => {\n        const signal = railSignals[i]\n        connectTwoEntitiesWithWire(stop, signal, \"green\")\n    })\n\n    // All items are off by 0.5, fix here\n    changeItemsCoordinates(allItems, -0.5)\n    return allItems\n}\n","import { iBlueprintItemWithoutNumber } from \"./interfaces\"\n\n// (0, 0) bending left 90 degrees to (-1, 1) curve\nexport const frontLeftCurve: iBlueprintItemWithoutNumber[] = [\n    {\n        name: \"curved-rail\",\n        position: {\n            x: 0,\n            y: 0,\n        },\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -4,\n            y: -4,\n        },\n        direction: 1,\n    },\n    {\n        name: \"curved-rail\",\n        position: {\n            x: -6,\n            y: -6,\n        },\n        direction: 3,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -11,\n            y: -8,\n        },\n        direction: 2,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -13,\n            y: -8,\n        },\n        direction: 2,\n    },\n]\n// (0, 0) bending right 90 degrees to (1, 1) curve\nexport const frontRightCurve: iBlueprintItemWithoutNumber[] = [\n    {\n        name: \"curved-rail\",\n        position: {\n            x: 2,\n            y: 0,\n        },\n        direction: 1,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: 5,\n            y: -5,\n        },\n        direction: 7,\n    },\n    {\n        name: \"curved-rail\",\n        position: {\n            x: 8,\n            y: -6,\n        },\n        direction: 6,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: 13,\n            y: -9,\n        },\n        direction: 2,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: 15,\n            y: -9,\n        },\n        direction: 2,\n    },\n]\n// (-1, -1) bending left 90 degreses to (0, 0)  curve\nexport const backLeftCurve: iBlueprintItemWithoutNumber[] = [\n    {\n        name: \"curved-rail\",\n        position: {\n            x: 0,\n            y: 6,\n        },\n        direction: 5,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -3,\n            y: 7,\n        },\n        direction: 3,\n    },\n    {\n        name: \"curved-rail\",\n        position: {\n            x: -6,\n            y: 12,\n        },\n        direction: 2,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -11,\n            y: 11,\n        },\n        direction: 2,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -13,\n            y: 11,\n        },\n        direction: 2,\n    },\n]\n// (1, -1) bending right 90 degreses to (0, 0)  curve\nexport const backRightCurve: iBlueprintItemWithoutNumber[] = [\n    {\n        name: \"curved-rail\",\n        position: {\n            x: 2,\n            y: 5,\n        },\n        direction: 4,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: 5,\n            y: 7,\n        },\n        direction: 5,\n    },\n    {\n        name: \"curved-rail\",\n        position: {\n            x: 8,\n            y: 11,\n        },\n        direction: 7,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: 13,\n            y: 11,\n        },\n        direction: 2,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: 15,\n            y: 11,\n        },\n        direction: 2,\n    },\n]\n","import { iBlueprintItemWithoutNumber } from \"./interfaces\"\n\n// (0, 0) bending left 45 degrees to (-1, 2) curve\n// The diagonal should be a bottomright-to-topright diagonal with the ending rail piece being the topleft piece\nexport const diagonalFrontLeftCurve: iBlueprintItemWithoutNumber[] = [\n    {\n        name: \"curved-rail\",\n        position: {\n            x: 0,\n            y: 0,\n        },\n        direction: 5,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -1,\n            y: -7,\n        },\n        direction: 0,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -1,\n            y: -9,\n        },\n        direction: 0,\n    },\n    {\n        name: \"rail-chain-signal\",\n        position: {\n            x: -3.5,\n            y: 4.5,\n        },\n        direction: 5,\n    },\n]\n// (0, 0) bending right 45 degrees to (2, 1) curve\n// The diagonal should be a bottomright-to-topright diagonal with the ending rail piece being the topleft piece\nexport const diagonalFrontRightCurve: iBlueprintItemWithoutNumber[] = [\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -3,\n            y: 2,\n        },\n        direction: 7,\n    },\n    {\n        name: \"curved-rail\",\n        position: {\n            x: 2,\n            y: 0,\n        },\n        direction: 6,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: 5,\n            y: -3,\n        },\n        direction: 2,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: 7,\n            y: -3,\n        },\n        direction: 2,\n    },\n    {\n        name: \"rail-chain-signal\",\n        position: {\n            x: -0.5,\n            y: 1.5,\n        },\n        direction: 5,\n    },\n]\n// (-2, -1) bending left 45 degreses to (0, 0) curve\nexport const diagonalBackLeftCurve: iBlueprintItemWithoutNumber[] = [\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -9 - 6,\n            y: 9 - 4,\n        },\n        direction: 2,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -7 - 6,\n            y: 9 - 4,\n        },\n        direction: 2,\n    },\n    {\n        name: \"curved-rail\",\n        position: {\n            x: -6,\n            y: 6,\n        },\n        direction: 2,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -5,\n            y: 1,\n        },\n        direction: 3,\n    },\n    {\n        name: \"rail-signal\",\n        position: {\n            x: -3.5 + 2,\n            y: 4.5 - 2,\n        },\n        direction: 5,\n    },\n]\n// (1, -2) bending right 45 degreses to (0, 0) curve\nexport const diagonalBackRightCurve: iBlueprintItemWithoutNumber[] = [\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -1 - 6,\n            y: 9,\n        },\n        direction: 0,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -1 - 6,\n            y: 11,\n        },\n        direction: 0,\n    },\n    {\n        name: \"curved-rail\",\n        position: {\n            x: -4,\n            y: 6,\n        },\n        direction: 1,\n    },\n    {\n        name: \"rail-signal\",\n        position: {\n            x: -2.5,\n            y: 3.5,\n        },\n        direction: 5,\n    },\n]\n","import { defaultSettings } from \"../constants/constants\"\nimport { iBlueprintItem, iBlueprintItemWithoutNumber } from \"../constants/interfaces\"\nimport {\n    getTrainArray,\n    placeTrainTracks,\n    placeSignals,\n    changeItemsCoordinates,\n    placeTrain,\n    resetEntityNumber,\n    assignEntityNumberToItems,\n    copyPasteItems,\n} from \"./CreateItems\"\nimport {\n    backLeftCurve,\n    backRightCurve,\n    frontLeftCurve,\n    frontRightCurve,\n} from \"../constants/verticalStackerCurves\"\nimport {\n    diagonalBackLeftCurve,\n    diagonalBackRightCurve,\n    diagonalFrontLeftCurve,\n    diagonalFrontRightCurve,\n} from \"../constants/diagonalStackerCurves\"\n\nexport const createStacker = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    resetEntityNumber()\n    if (bpSettings.diagonalStacker) {\n        return createDiagonalStacker(bpSettings)\n    } else {\n        return createVerticalStacker(bpSettings)\n    }\n}\n\nexport const createVerticalStacker = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    const trainLength = Math.floor(getTrainArray(bpSettings).length / 2) * 2\n\n    let frontCurve: iBlueprintItem[]\n    let backCurve: iBlueprintItem[]\n    if (bpSettings.stackerType === \"Left-Left\" || bpSettings.stackerType === \"Right-Left\") {\n        frontCurve = assignEntityNumberToItems(frontLeftCurve, -2, -8)\n    } else {\n        frontCurve = assignEntityNumberToItems(frontRightCurve, -2, -8)\n    }\n\n    if (bpSettings.stackerType === \"Left-Left\" || bpSettings.stackerType === \"Left-Right\") {\n        backCurve = assignEntityNumberToItems(backLeftCurve, -2, trainLength - 2)\n    } else {\n        backCurve = assignEntityNumberToItems(backRightCurve, -2, trainLength - 2)\n    }\n\n    let copyPasteBlueprint = [\n        ...placeTrainTracks(bpSettings),\n        ...placeSignals(bpSettings),\n        ...frontCurve,\n        ...backCurve,\n    ]\n    if (bpSettings.includeTrainInBlueprint)\n        copyPasteBlueprint = [...copyPasteBlueprint, ...placeTrain(bpSettings)]\n    changeItemsCoordinates(copyPasteBlueprint, -0.5)\n\n    let allItems: iBlueprintItem[] = []\n    for (let i = 0; i < parseInt(bpSettings.stackerNumberParallelLanes); i++) {\n        allItems = [...allItems, ...copyPasteItems(copyPasteBlueprint, i * 4)]\n    }\n\n    return allItems\n}\n\nexport const createDiagonalStacker = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    const doubleHeadedFactor = bpSettings.doubleHeaded ? 2 : 1\n    const diagonalLength =\n        Math.round(\n            (2.5 *\n                (doubleHeadedFactor * parseInt(bpSettings.locomotivesPerEnd) +\n                    parseInt(bpSettings.cargoWagon))) /\n                2\n        ) *\n            2 +\n        1\n\n    let frontCurve: iBlueprintItem[]\n    let backCurve: iBlueprintItem[]\n    if (bpSettings.stackerType === \"Right-Left\") {\n        frontCurve = assignEntityNumberToItems(diagonalFrontLeftCurve, 8)\n        backCurve = assignEntityNumberToItems(\n            diagonalBackRightCurve,\n            8 - diagonalLength * 2,\n            diagonalLength * 2\n        )\n    } else {\n        frontCurve = assignEntityNumberToItems(diagonalFrontRightCurve, 8)\n        backCurve = assignEntityNumberToItems(\n            diagonalBackLeftCurve,\n            8 - diagonalLength * 2,\n            diagonalLength * 2\n        )\n    }\n    // TODO Support 'include train in blueprint' for diagonal stackers?\n\n    const diagonals: iBlueprintItemWithoutNumber[] = [\n        {\n            name: \"straight-rail\",\n            position: { x: 3, y: 3 },\n            direction: 7,\n        },\n        {\n            name: \"straight-rail\",\n            position: { x: 3, y: 1 },\n            direction: 3,\n        },\n    ]\n\n    let copyPasteBlueprint: iBlueprintItem[] = []\n    for (let i = 0; i < diagonalLength; i++) {\n        const newDiagonals = assignEntityNumberToItems(diagonals, -i * 2, i * 2)\n        copyPasteBlueprint = [...copyPasteBlueprint, ...newDiagonals]\n    }\n    copyPasteBlueprint = [...copyPasteBlueprint, ...frontCurve, ...backCurve]\n\n    let allItems: iBlueprintItem[] = []\n\n    for (let i = 0; i < parseInt(bpSettings.stackerNumberParallelLanes); i++) {\n        if (bpSettings.stackerType === \"Left-Right\") {\n            allItems = [...allItems, ...copyPasteItems(copyPasteBlueprint, i * 4, 0)]\n        } else {\n            allItems = [...allItems, ...copyPasteItems(copyPasteBlueprint, 0, i * 4)]\n        }\n    }\n    return allItems\n}\n","export const CLASSES = {\n    // Title\n    title: \"self-center underline font-bold text-3xl text-gray-300\",\n\n    // Background\n    background: \"bg-gray-800 h-screen\",\n    background2: \"bg-gray-800 flex flex-col\",\n\n    // Sections\n    section: \"border-black p-1 my-1 w-full bg-blue-700\",\n    gridSection: \"grid grid-cols-2 gap-2\",\n    gridSection3cols: \"grid grid-cols-3 gap-2\",\n    gridSection12cols: \"grid grid-cols-12 gap-2 my-1\",\n\n    // HTML Elements\n    checkboxElement: \"h-full place-self-center\",\n    labelElement: \"w-full text-white\",\n    inputTextElement: \"border-2 border-gray-600 w-full bg-blue-900 text-white text-center\",\n    selectElement: \"border-2 border-gray-600 w-full bg-blue-900 text-white\",\n    buttonElement: \"border-2 border-gray-600 m-auto px-4 py-1 text-white rounded hover:bg-blue-300\",\n    // Styling doesnt apply for firefox, but works in chrome\n    optionElement: \"\",\n    footerElements: \"text-center text-gray-500 hover:bg-gray-300 rounded m-auto px-2 my-1\",\n    // Error message field\n    errorMessageElement:\n        \"text-center text-red-500 text-2xl m-1 p-2 border-2 border-red-500 bg-blue-800\",\n    // Warning message field\n    warningMessageElement: \"text-center text-yellow-500 text-xl m-1 px-2 bg-blue-800\",\n}\n","const TOOLTIPS = {\n    trainLimit:\n        \"Limits the amount of trains that will be at going to this station.<br>If set to dynamic, will automatically set the max amount based on used (loading station) / free (unloading station) space in your chests.\",\n    trainLimitNumberInput: \"Valid: numbers, 'each', alphabetical characters (A, B, ...)\",\n    doubleHeaded: \"Does your train have locomotives at each end (facing both ways)?\",\n    includeTrainInBlueprint:\n        \"If enabled, adds the train with the expected layout to the blueprint.\",\n    enableFilterInserters:\n        \"If enabled, turns all inserters to filters inserters of equivalent level.\",\n    chestType:\n        \"If chest type is a logistic chest, it is expected that bots will deliver/grab items from the chest. No belts will be placed.\",\n    chestLimit:\n        \"Limits the amount of free slots in the chests.<br>A cargo wagon has 40 slots, so 6 chests with 7 slots have enough capacity to fill one wagon, or 12 chests with 4.\",\n    beltFlow: \"If enabled, adds belt flow to the top/bottom of the station.\",\n    refillEnabled:\n        \"If enabled, places an inserter and a requester chest next to each locomotive with the desired fuel type and amount.\",\n    connectChestsWithGreenWire:\n        \"If enabled, connects all chests on the left and all chests / storage tanks on the right together with green wire.\",\n    connectBothSideWithGreenWire:\n        \"If enabled, connects the top left and top right chest / storage tank with green wire.\",\n    connectChestsWithRedWire:\n        \"If enabled, connects all chests on the left and all chests / storage tanks on the right together with green wire.\",\n    connectBothSideWithRedWire:\n        \"If enabled, connects the top left and top right chest / storage tank with red wire.\",\n    trainStopUsesEnabledCondition:\n        \"If enabled, adds a decider combinator.<br>Then it creates a green wire connection with trainStop-deciderCombinator-poles-topChest.<br>The train stop will be enabled if the condition (e.g. sum of items in chests > 4000) is met.\",\n}\nexport default TOOLTIPS\n","import React from \"react\"\nimport { iSectionsProps } from \"../../constants/interfaces\"\nimport { CLASSES } from \"../../css/classes\"\nimport TOOLTIPS from \"../../constants/tooltips\"\n\nexport default function TrainTypeSettings(props: iSectionsProps): JSX.Element {\n    const hideIfDiagonalStacker =\n        props.userSettings.stationType === \"Stacker\" && props.userSettings.diagonalStacker\n    return (\n        <div className={CLASSES.section}>\n            <div className={CLASSES.gridSection}>\n                <input\n                    className={CLASSES.checkboxElement}\n                    type={\"checkbox\"}\n                    min={\"0\"}\n                    id={\"doubleHeaded\"}\n                    data-tip={TOOLTIPS.doubleHeaded}\n                    checked={props.userSettings.doubleHeaded}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            doubleHeaded: e.target.checked,\n                        })\n                    }}\n                />\n                <label className={CLASSES.labelElement} htmlFor={\"doubleHeaded\"}>\n                    Double Headed\n                </label>\n                <input\n                    className={CLASSES.inputTextElement}\n                    type={\"number\"}\n                    min={\"0\"}\n                    id={\"locomotivesPerEnd\"}\n                    value={props.userSettings.locomotivesPerEnd}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            locomotivesPerEnd: e.target.value,\n                        })\n                    }}\n                />\n                <label className={CLASSES.labelElement} htmlFor={\"locomotivesPerEnd\"}>\n                    # locomotives per end\n                </label>\n                <input\n                    className={CLASSES.inputTextElement}\n                    type={\"number\"}\n                    id={\"cargoWagon\"}\n                    value={props.userSettings.cargoWagon}\n                    onChange={(e) => {\n                        props.setUserSettings({ ...props.userSettings, cargoWagon: e.target.value })\n                    }}\n                />\n                <label className={CLASSES.labelElement} htmlFor={\"cargoWagon\"}>\n                    # cargo wagons\n                </label>\n                <input\n                    className={CLASSES.checkboxElement}\n                    hidden={hideIfDiagonalStacker}\n                    type={\"checkbox\"}\n                    id={\"includeTrainInBlueprint\"}\n                    data-tip={TOOLTIPS.includeTrainInBlueprint}\n                    checked={props.userSettings.includeTrainInBlueprint}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            includeTrainInBlueprint: e.target.checked,\n                        })\n                    }}\n                />\n                <label\n                    className={CLASSES.labelElement}\n                    hidden={hideIfDiagonalStacker}\n                    htmlFor={\"includeTrainInBlueprint\"}\n                >\n                    Include Train in Blueprint\n                </label>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport { inserterTypes } from \"../../constants/constants\"\nimport { iInserterTypes, iSectionsProps } from \"../../constants/interfaces\"\nimport { CLASSES } from \"../../css/classes\"\nimport TOOLTIPS from \"../../constants/tooltips\"\n\nexport default function InserterSettings(props: iSectionsProps): JSX.Element {\n    // All inserter types\n    const inserterSelect = (\n        <select\n            id={\"inserterType\"}\n            className={CLASSES.selectElement}\n            value={props.userSettings.inserterType}\n            onChange={(e) => {\n                props.setUserSettings({\n                    ...props.userSettings,\n                    inserterType: e.target.value as iInserterTypes,\n                })\n            }}\n        >\n            {inserterTypes.map((inserterType) => {\n                return (\n                    <option\n                        className={CLASSES.optionElement}\n                        key={inserterType}\n                        value={inserterType}\n                    >\n                        {inserterType}\n                    </option>\n                )\n            })}\n        </select>\n    )\n\n    const setValueAtIndex = (oldArray: string[], newValue: string, index: number) => {\n        props.setUserSettings({\n            ...props.userSettings,\n            // Replace the value at the fieldIndex using spread operator\n            filterFields: [\n                ...props.userSettings.filterFields.slice(0, index),\n                newValue,\n                ...props.userSettings.filterFields.slice(index + 1),\n            ],\n        })\n    }\n\n    const isFilterInserter = props.userSettings.enableFilterInserters\n\n    const newFilterInputField = (index: number) => {\n        return (\n            <input\n                key={`${index}`}\n                className={CLASSES.inputTextElement}\n                hidden={!isFilterInserter}\n                list={\"itemlist\"}\n                value={props.userSettings.filterFields[index]}\n                placeholder={\n                    index === 0 ? \"Filter 1 - e.g. 'iron-ore'\" : `Filter ${index + 1} item type`\n                }\n                onChange={(e) => {\n                    setValueAtIndex(props.userSettings.filterFields, e.target.value, index)\n                }}\n            />\n        )\n    }\n\n    // let filterInserterInputFields = []\n    let previousIsEmpty = -1\n    const filterInserterInputFields = new Array(5).fill(0).map((_, index) => {\n        if (previousIsEmpty !== -1 && previousIsEmpty < index) {\n            return undefined\n        }\n        if (props.userSettings.filterFields[index] === \"\") {\n            previousIsEmpty = index\n        }\n        return newFilterInputField(index)\n    })\n\n    return (\n        <div className={CLASSES.section}>\n            <div className={CLASSES.gridSection}>\n                {inserterSelect}\n                <label className={CLASSES.labelElement} htmlFor={\"inserterType\"}>\n                    Inserter Type\n                </label>\n                <input\n                    className={CLASSES.checkboxElement}\n                    id={\"filterInserterEnabled\"}\n                    type={\"checkbox\"}\n                    data-tip={TOOLTIPS.enableFilterInserters}\n                    checked={props.userSettings.enableFilterInserters}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            enableFilterInserters: e.target.checked,\n                        })\n                    }}\n                />\n                <label className={CLASSES.labelElement} htmlFor={\"filterInserterEnabled\"}>\n                    Enabled Filter Inserters\n                </label>\n                {filterInserterInputFields}\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport { iChestTypes, iSectionsProps } from \"../../constants/interfaces\"\nimport { CLASSES } from \"../../css/classes\"\nimport { chestTypes, chestTypesHuman, requestChestTypes } from \"../../constants/constants\"\nimport TOOLTIPS from \"../../constants/tooltips\"\n\nexport default function ChestTypeSettings(props: iSectionsProps): JSX.Element {\n    const chestTypesHtml = (\n        <select\n            id={\"chestTypes\"}\n            className={CLASSES.selectElement}\n            value={props.userSettings.chestType}\n            data-tip={TOOLTIPS.chestType}\n            onChange={(e) => {\n                props.setUserSettings({\n                    ...props.userSettings,\n                    chestType: e.target.value as iChestTypes,\n                })\n            }}\n        >\n            {chestTypes.map((chestType) => {\n                return (\n                    <option className={CLASSES.optionElement} key={chestType} value={chestType}>\n                        {chestTypesHuman[chestType]}\n                    </option>\n                )\n            })}\n        </select>\n    )\n\n    const isRequesterChest = requestChestTypes.includes(props.userSettings.chestType)\n    const canRequestFromBufferChests = props.userSettings.chestType === \"logistic-chest-requester\"\n\n    let previousIsEmpty = -1\n    const chestRequests = new Array(24).fill(0).map((_, i) => {\n        const index = Math.floor(i / 2)\n        if (previousIsEmpty !== -1 && previousIsEmpty < index) {\n            return undefined\n        }\n        if (props.userSettings.chestRequestItemsType[index] === \"\") {\n            previousIsEmpty = index\n        }\n        if (i % 2 === 0) {\n            return (\n                <input\n                    className={CLASSES.inputTextElement}\n                    hidden={!isRequesterChest}\n                    list={\"itemlist\"}\n                    key={`${index} chestRequestItemsType`}\n                    type={\"text\"}\n                    value={props.userSettings.chestRequestItemsType[index]}\n                    placeholder={`Request ${index + 1} item type`}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            chestRequestItemsType: [\n                                ...props.userSettings.chestRequestItemsType.slice(0, index),\n                                e.target.value,\n                                ...props.userSettings.chestRequestItemsType.slice(index + 1),\n                            ],\n                        })\n                    }}\n                />\n            )\n        } else {\n            return (\n                <input\n                    className={CLASSES.inputTextElement}\n                    hidden={!isRequesterChest}\n                    key={`${index} chestRequestItemsAmount`}\n                    type={\"number\"}\n                    min={\"0\"}\n                    value={props.userSettings.chestRequestItemsAmount[index]}\n                    placeholder={`Request ${index + 1} amount`}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            chestRequestItemsAmount: [\n                                ...props.userSettings.chestRequestItemsAmount.slice(0, index),\n                                e.target.value,\n                                ...props.userSettings.chestRequestItemsAmount.slice(index + 1),\n                            ],\n                        })\n                    }}\n                />\n            )\n        }\n    })\n\n    return (\n        <div className={CLASSES.section}>\n            <div className={CLASSES.gridSection}>\n                {chestTypesHtml}\n                <label className={CLASSES.labelElement} htmlFor={\"chestTypes\"}>\n                    Chest Type\n                </label>\n                <input\n                    className={CLASSES.inputTextElement}\n                    type={\"number\"}\n                    value={props.userSettings.chestLimit}\n                    data-tip={TOOLTIPS.chestLimit}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            chestLimit: e.target.value,\n                        })\n                    }}\n                />\n                <label className={CLASSES.labelElement} htmlFor={\"chestTypes\"}>\n                    Chest limit\n                </label>\n                <input\n                    className={CLASSES.checkboxElement}\n                    hidden={!canRequestFromBufferChests}\n                    id={\"requestFromBuffers\"}\n                    type={\"checkbox\"}\n                    checked={props.userSettings.chestRequestFromBuffers}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            chestRequestFromBuffers: e.target.checked,\n                        })\n                    }}\n                />\n                <label\n                    className={CLASSES.labelElement}\n                    hidden={!canRequestFromBufferChests}\n                    htmlFor={\"requestFromBuffers\"}\n                >\n                    Request from Buffers\n                </label>\n                {chestRequests}\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport { iBeltSides, iBeltTypes, iSectionsProps } from \"../../constants/interfaces\"\nimport { CLASSES } from \"../../css/classes\"\nimport {\n    beltFlowDirections,\n    beltSides,\n    beltTypes,\n    beltTypesHuman,\n    botChestTypes,\n} from \"../../constants/constants\"\nimport TOOLTIPS from \"../../constants/tooltips\"\n\nexport default function BeltTypeSettings(props: iSectionsProps): JSX.Element {\n    const hideIfBotChests = botChestTypes.includes(props.userSettings.chestType)\n\n    const beltTypesHtml = (\n        <select\n            id={\"beltType\"}\n            className={CLASSES.selectElement}\n            value={props.userSettings.beltType}\n            onChange={(e) => {\n                props.setUserSettings({\n                    ...props.userSettings,\n                    beltType: e.target.value as iBeltTypes,\n                })\n            }}\n        >\n            {beltTypes.map((beltType) => {\n                return (\n                    <option className={CLASSES.optionElement} key={beltType} value={beltType}>\n                        {beltTypesHuman[beltType]}\n                    </option>\n                )\n            })}\n        </select>\n    )\n\n    const beltSideHtml = (\n        <select\n            id={\"sidesUsed\"}\n            className={CLASSES.selectElement}\n            value={props.userSettings.beltSidesUsed}\n            onChange={(e) => {\n                props.setUserSettings({\n                    ...props.userSettings,\n                    beltSidesUsed: e.target.value as iBeltSides,\n                })\n            }}\n        >\n            {beltSides.map((beltSide) => {\n                return (\n                    <option className={CLASSES.optionElement} key={beltSide} value={beltSide}>\n                        {beltSide}\n                    </option>\n                )\n            })}\n        </select>\n    )\n    const beltFlowHtml = (\n        <select\n            id={\"beltFlow\"}\n            className={CLASSES.selectElement}\n            value={props.userSettings.beltFlowDirection}\n            data-tip={TOOLTIPS.beltFlow}\n            onChange={(e) => {\n                props.setUserSettings({ ...props.userSettings, beltFlowDirection: e.target.value })\n            }}\n        >\n            {beltFlowDirections.map((beltFlow) => {\n                return (\n                    <option className={CLASSES.optionElement} key={beltFlow} value={beltFlow}>\n                        {beltFlow}\n                    </option>\n                )\n            })}\n        </select>\n    )\n\n    return (\n        <div className={CLASSES.section} hidden={hideIfBotChests}>\n            <div className={CLASSES.gridSection}>\n                {beltTypesHtml}\n                <label className={CLASSES.labelElement} htmlFor={\"beltType\"}>\n                    Belt Type\n                </label>\n                {beltSideHtml}\n                <label className={CLASSES.labelElement} htmlFor={\"sidesUsed\"}>\n                    Sides to be used\n                </label>\n                {beltFlowHtml}\n                <label className={CLASSES.labelElement} htmlFor={\"beltFlow\"}>\n                    Belt Flow\n                </label>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport { iRefillFuelTypes, iSectionsProps } from \"../../constants/interfaces\"\nimport { CLASSES } from \"../../css/classes\"\nimport { refillFuelTypes, refillFuelTypesHuman } from \"../../constants/constants\"\nimport TOOLTIPS from \"../../constants/tooltips\"\n\nexport default function RefillSettings(props: iSectionsProps): JSX.Element {\n    const fuelTypesHtml = (\n        <select\n            className={CLASSES.selectElement}\n            hidden={!props.userSettings.refillEnabled}\n            value={props.userSettings.refillFuelType}\n            onChange={(e) => {\n                props.setUserSettings({\n                    ...props.userSettings,\n                    refillFuelType: e.target.value as iRefillFuelTypes,\n                })\n            }}\n        >\n            {refillFuelTypes.map((fuelType) => {\n                return (\n                    <option className={CLASSES.optionElement} key={fuelType} value={fuelType}>\n                        {refillFuelTypesHuman[fuelType]}\n                    </option>\n                )\n            })}\n        </select>\n    )\n\n    return (\n        <div className={CLASSES.section}>\n            <div className={CLASSES.gridSection}>\n                <input\n                    className={CLASSES.checkboxElement}\n                    type={\"checkbox\"}\n                    id={\"refillEnabled\"}\n                    checked={props.userSettings.refillEnabled}\n                    data-tip={TOOLTIPS.refillEnabled}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            refillEnabled: e.target.checked,\n                        })\n                    }}\n                />\n                <label className={CLASSES.labelElement} htmlFor={\"refillEnabled\"}>\n                    Refill at this Station?\n                </label>\n                {fuelTypesHtml}\n                <label\n                    className={CLASSES.labelElement}\n                    hidden={!props.userSettings.refillEnabled}\n                    htmlFor={\"fuelTypes\"}\n                >\n                    Fuel Type\n                </label>\n                <input\n                    type={\"number\"}\n                    className={CLASSES.inputTextElement}\n                    hidden={!props.userSettings.refillEnabled}\n                    value={props.userSettings.refillFuelAmount}\n                    min={\"0\"}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            refillFuelAmount: e.target.value,\n                        })\n                    }}\n                />\n                <label\n                    className={CLASSES.labelElement}\n                    hidden={!props.userSettings.refillEnabled}\n                    htmlFor={\"fuelAmount\"}\n                >\n                    Amount\n                </label>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport { iSectionsProps } from \"../../constants/interfaces\"\nimport { CLASSES } from \"../../css/classes\"\nimport TOOLTIPS from \"../../constants/tooltips\"\n\nexport default function WireSettings(props: iSectionsProps): JSX.Element {\n    const normalTypes = [\"Loading Station\", \"Unloading Station\"]\n    const fluidTypes = [\"Fluid Loading Station\", \"Fluid Unloading Station\"]\n    const hiddenWhenNormalStation = normalTypes.includes(props.userSettings.stationType)\n    const hiddenWhenFluidStation = fluidTypes.includes(props.userSettings.stationType)\n    const hiddenWhenNotBothSides = props.userSettings.beltSidesUsed !== \"Both\"\n\n    const myCheckbox = (\n        keyName:\n            | \"connectChestsWithGreenWire\"\n            | \"connectBothSideWithGreenWire\"\n            | \"connectChestsWithRedWire\"\n            | \"connectBothSideWithRedWire\",\n        hidden = false\n    ) => {\n        return (\n            <input\n                className={CLASSES.checkboxElement}\n                hidden={hidden}\n                key={keyName}\n                type={\"checkbox\"}\n                id={keyName}\n                checked={props.userSettings[keyName]}\n                data-tip={TOOLTIPS[keyName]}\n                onChange={(e) => {\n                    props.setUserSettings({\n                        ...props.userSettings,\n                        [keyName]: e.target.checked,\n                    })\n                }}\n            />\n        )\n    }\n\n    return (\n        <div className={CLASSES.section}>\n            <div className={CLASSES.gridSection}>\n                {myCheckbox(\"connectChestsWithGreenWire\")}\n                <label\n                    className={CLASSES.labelElement}\n                    hidden={hiddenWhenFluidStation}\n                    htmlFor={\"connectChestsWithGreenWire\"}\n                >\n                    Connect chests with green wire?\n                </label>\n                <label\n                    className={CLASSES.labelElement}\n                    hidden={hiddenWhenNormalStation}\n                    htmlFor={\"connectChestsWithGreenWire\"}\n                >\n                    Connect storage tanks with green wire?\n                </label>\n                {myCheckbox(\n                    \"connectBothSideWithGreenWire\",\n                    hiddenWhenFluidStation || hiddenWhenNotBothSides\n                )}\n                <label\n                    className={CLASSES.labelElement}\n                    hidden={hiddenWhenFluidStation || hiddenWhenNotBothSides}\n                    htmlFor={\"connectBothSideWithGreenWire\"}\n                >\n                    Connect both sides with green wire?\n                </label>\n                {myCheckbox(\"connectChestsWithRedWire\")}\n                <label\n                    className={CLASSES.labelElement}\n                    hidden={hiddenWhenFluidStation}\n                    htmlFor={\"connectChestsWithRedWire\"}\n                >\n                    Connect chests with red wire?\n                </label>\n                <label\n                    className={CLASSES.labelElement}\n                    hidden={hiddenWhenNormalStation}\n                    htmlFor={\"connectChestsWithGreenWire\"}\n                >\n                    Connect storage tanks with red wire?\n                </label>\n                {myCheckbox(\n                    \"connectBothSideWithRedWire\",\n                    hiddenWhenFluidStation || hiddenWhenNotBothSides\n                )}\n                <label\n                    className={CLASSES.labelElement}\n                    hidden={hiddenWhenFluidStation || hiddenWhenNotBothSides}\n                    htmlFor={\"connectBothSideWithRedWire\"}\n                >\n                    Connect both sides with red wire?\n                </label>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport { iEnabledConditionOperators, iSectionsProps } from \"../../constants/interfaces\"\nimport { CLASSES } from \"../../css/classes\"\nimport {\n    enabledConditionOperators,\n    enabledConditionOperatorsHuman,\n} from \"../../constants/constants\"\nimport TOOLTIPS from \"../../constants/tooltips\"\n\nexport default function EnabledConditionSettings(props: iSectionsProps): JSX.Element {\n    const hideIfCheckboxDisabled = !props.userSettings.trainStopUsesEnabledCondition\n\n    const enabledConditionOperatorHtml = (\n        <select\n            className={CLASSES.selectElement}\n            hidden={hideIfCheckboxDisabled}\n            value={props.userSettings.enabledConditionOperator}\n            onChange={(e) => {\n                props.setUserSettings({\n                    ...props.userSettings,\n                    enabledConditionOperator: e.target.value as iEnabledConditionOperators,\n                })\n            }}\n        >\n            {enabledConditionOperators.map((operator) => {\n                return (\n                    <option className={CLASSES.optionElement} key={operator} value={operator}>\n                        {enabledConditionOperatorsHuman[operator]}\n                    </option>\n                )\n            })}\n        </select>\n    )\n\n    return (\n        <div className={CLASSES.section}>\n            <div className={CLASSES.gridSection}>\n                <input\n                    className={CLASSES.checkboxElement}\n                    type={\"checkbox\"}\n                    id={\"trainStopUsesEnabledCondition\"}\n                    checked={props.userSettings.trainStopUsesEnabledCondition}\n                    data-tip={TOOLTIPS.trainStopUsesEnabledCondition}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            trainStopUsesEnabledCondition: e.target.checked,\n                        })\n                    }}\n                />\n                <label className={CLASSES.labelElement} htmlFor={\"trainStopUsesEnabledCondition\"}>\n                    {\"Train stop uses 'enabled-condition'?\"}\n                </label>\n                {enabledConditionOperatorHtml}\n                <input\n                    type={\"number\"}\n                    className={CLASSES.selectElement}\n                    hidden={hideIfCheckboxDisabled}\n                    placeholder={\"Amount of items\"}\n                    value={props.userSettings.enabledConditionAmount}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            enabledConditionAmount: e.target.value,\n                        })\n                    }}\n                />\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport { iSectionsProps } from \"../../constants/interfaces\"\nimport { CLASSES } from \"../../css/classes\"\n\nexport default function LampsSettings(props: iSectionsProps): JSX.Element {\n    return (\n        <div className={CLASSES.section}>\n            <div className={CLASSES.gridSection}>\n                <input\n                    className={CLASSES.checkboxElement}\n                    type={\"checkbox\"}\n                    id={\"placeLampsNearPoles\"}\n                    checked={props.userSettings.placeLampsNearPoles}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            placeLampsNearPoles: e.target.checked,\n                        })\n                    }}\n                />\n                <label className={CLASSES.labelElement} htmlFor={\"placeLampsNearPoles\"}>\n                    Place lamps near poles?\n                </label>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport { iSectionsProps } from \"../../constants/interfaces\"\nimport { CLASSES } from \"../../css/classes\"\n\nexport default function StationNameSettings(props: iSectionsProps): JSX.Element {\n    return (\n        <div>\n            <div className={CLASSES.section}>\n                <input\n                    className={CLASSES.inputTextElement}\n                    type={\"text\"}\n                    placeholder={\"Station Name\"}\n                    value={props.userSettings.stationName}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            stationName: e.target.value,\n                        })\n                    }}\n                />\n            </div>\n        </div>\n    )\n}\n","import { allowedCharacters, defaultSettings, iOperator, normalStation } from \"./constants\"\n\nconst verifyNumberInput = (myInput: string) => {\n    // Return true if it is a parseable number\n    return !isNaN(parseInt(myInput))\n}\n\nexport const checkForHintsBlueprintSettings = (bpSettings: typeof defaultSettings): string => {\n    if (parseInt(bpSettings.locomotivesPerEnd) + parseInt(bpSettings.cargoWagon) > 200) {\n        return \"Your amount of locomotives and cargo wagons is extremely high and might crash your browser!\"\n    }\n    if (bpSettings.stationType === \"Stacker\") {\n        if (parseInt(bpSettings.stackerNumberParallelLanes) > 100) {\n            return \"Your amount of parallel stacker lanes is extremely high and may crash your browser!\"\n        }\n    }\n    if (bpSettings.stationType !== \"Stacker\") {\n        if (bpSettings.trainStopUsesEnabledCondition && !bpSettings.connectChestsWithGreenWire) {\n            return \"If 'train stop uses-enabled condition' is enabled, you should also enable 'connect chests/storage tanks with green wire'.\"\n        }\n    }\n    // No hint could be found\n    return \"\"\n}\n\nexport const validateBlueprintSettings = (bpSettings: typeof defaultSettings): string => {\n    if (!verifyNumberInput(bpSettings.locomotivesPerEnd)) {\n        return \"The given locomotive count is not a number.\"\n    }\n    if (!verifyNumberInput(bpSettings.cargoWagon)) {\n        return \"The given cargo count is not a number.\"\n    }\n    if (\n        bpSettings.stationType === \"Loading Station\" ||\n        bpSettings.stationType === \"Unloading Station\"\n    ) {\n        for (let i = 0; i < 12; i++) {\n            const itemType = bpSettings.chestRequestItemsType[i]\n            const numberAsString = bpSettings.chestRequestItemsAmount[i]\n\n            if (itemType !== \"\" && !verifyNumberInput(numberAsString)) {\n                return `Chest request at position ${i + 1} is not a number.`\n            }\n        }\n    }\n    if (parseInt(bpSettings.locomotivesPerEnd) < 0) {\n        return \"The given locomotives amount is invalid.\"\n    }\n    if (parseInt(bpSettings.cargoWagon) < 0) {\n        return \"The given cargo wagon amount is invalid.\"\n    }\n    if (bpSettings.stationType === \"Stacker\") {\n        if (parseInt(bpSettings.stackerNumberParallelLanes) < 0) {\n            return \"Invalid number of parallel stacker lanes.\"\n        }\n    }\n    if (normalStation.includes(bpSettings.stationType) && bpSettings.trainLimit === \"Dynamic\") {\n        if (\n            !verifyNumberInput(bpSettings.trainLimitArithmetic1Constant1) &&\n            !allowedCharacters.includes(bpSettings.trainLimitArithmetic1Constant1) &&\n            bpSettings.trainLimitArithmetic1Constant1 !== \"each\"\n        ) {\n            return \"First input in the first arithmetic combinator is invalid.\"\n        }\n        if (\n            !verifyNumberInput(bpSettings.trainLimitArithmetic1Constant2) &&\n            !allowedCharacters.includes(bpSettings.trainLimitArithmetic1Constant2) &&\n            bpSettings.trainLimitArithmetic1Constant2 !== \"each\"\n        ) {\n            return \"Last input in the first arithmetic combinator is invalid.\"\n        }\n        if (\n            !verifyNumberInput(bpSettings.trainLimitArithmetic2Constant1) &&\n            !allowedCharacters.includes(bpSettings.trainLimitArithmetic2Constant1) &&\n            bpSettings.trainLimitArithmetic2Constant1 !== \"each\"\n        ) {\n            return \"First input in the second arithmetic combinator is invalid.\"\n        }\n        if (\n            !verifyNumberInput(bpSettings.trainLimitArithmetic2Constant2) &&\n            !allowedCharacters.includes(bpSettings.trainLimitArithmetic2Constant2) &&\n            bpSettings.trainLimitArithmetic2Constant2 !== \"each\"\n        ) {\n            return \"Last input in the second arithmetic combinator is invalid.\"\n        }\n    }\n    if (bpSettings.stationType !== \"Stacker\") {\n        if (parseInt(bpSettings.chestLimit) < 0) {\n            return \"The given chest limit is invalid.\"\n        }\n        if (bpSettings.refillEnabled && parseInt(bpSettings.refillFuelAmount) < 0) {\n            return \"The given fuel amount is invalid.\"\n        }\n        if (bpSettings.chestLimit != \"\" && !verifyNumberInput(bpSettings.chestLimit)) {\n            return \"The given chest limit is not a number.\"\n        }\n        if (bpSettings.refillEnabled && !verifyNumberInput(bpSettings.refillFuelAmount)) {\n            return \"The given refill amount is not a number.\"\n        }\n        if (\n            bpSettings.trainStopUsesEnabledCondition &&\n            !verifyNumberInput(bpSettings.enabledConditionAmount)\n        ) {\n            return \"The given 'enabled-condition' amount is not a number.\"\n        }\n    }\n    // No error was found\n    return \"\"\n}\n\nexport const calcCombinatorSettings = (\n    bpSettings: typeof defaultSettings,\n    stackSize = 50\n): [string, iOperator, string, string, iOperator, string] => {\n    const cargoCount = parseInt(bpSettings.cargoWagon)\n\n    // Calculate how many items the green-wire connected chests can contain\n    const chestLimit = parseInt(bpSettings.chestLimit)\n    let connectedChestCount = 1\n    let cargoWagonsConnectedToChest = 1 / 6\n    if (bpSettings.connectChestsWithGreenWire) {\n        connectedChestCount *= 6 * cargoCount\n        cargoWagonsConnectedToChest *= 6 * cargoCount\n    }\n    if (bpSettings.connectBothSideWithGreenWire && bpSettings.beltSidesUsed === \"Both\") {\n        connectedChestCount *= 2\n        cargoWagonsConnectedToChest *= 2\n    }\n    const chestType = bpSettings.chestType\n    let chestSlotsCount = chestType === \"wooden-chest\" ? 16 : chestType === \"iron-chest\" ? 32 : 48\n    chestSlotsCount = Math.min(chestLimit, chestSlotsCount)\n    const chestTotalItemCount = stackSize * chestSlotsCount * connectedChestCount\n\n    // Calculate how many items the cargo wagons can contain\n    const trainSlotsCount = 40\n    const trainTotalItemCount = cargoWagonsConnectedToChest * trainSlotsCount * stackSize\n\n    if (bpSettings.stationType === \"Loading Station\") {\n        return [\"each\", \"/\", Math.round(trainTotalItemCount).toString(), \"each\", \"+\", \"0\"]\n    }\n\n    if (bpSettings.stationType === \"Unloading Station\") {\n        return [\n            \"each\",\n            \"/\",\n            Math.round(trainTotalItemCount).toString(),\n            Math.floor(chestTotalItemCount / trainTotalItemCount).toString(),\n            \"-\",\n            \"A\",\n        ]\n    }\n\n    return [\"0\", \"+\", \"0\", \"0\", \"+\", \"0\"]\n}\n","import React from \"react\"\nimport { iSectionsProps } from \"../../constants/interfaces\"\nimport { CLASSES } from \"../../css/classes\"\nimport TOOLTIPS from \"../../constants/tooltips\"\nimport { fluidStation, iOperator, operatorTypes, trainLimit } from \"../../constants/constants\"\nimport { calcCombinatorSettings } from \"../../constants/helper\"\n\nexport default function StationSettings(props: iSectionsProps): JSX.Element {\n    const hideWhenTrainLimitIsNotDynamic =\n        props.userSettings.trainLimit !== \"Dynamic\" ||\n        fluidStation.includes(props.userSettings.stationType)\n\n    const myInput = (\n        key:\n            | \"trainLimitArithmetic1Constant1\"\n            | \"trainLimitArithmetic1Constant2\"\n            | \"trainLimitArithmetic2Constant1\"\n            | \"trainLimitArithmetic2Constant2\"\n    ) => {\n        return (\n            <input\n                type={\"text\"}\n                className={`${CLASSES.inputTextElement} col-span-2`}\n                data-tip={TOOLTIPS.trainLimitNumberInput}\n                hidden={hideWhenTrainLimitIsNotDynamic}\n                value={props.userSettings[key]}\n                onChange={(e) => {\n                    props.setUserSettings({\n                        ...props.userSettings,\n                        [key]: e.target.value,\n                    })\n                }}\n            />\n        )\n    }\n\n    const mySelectOperator = (\n        key: \"trainLimitArithmetic1Operator\" | \"trainLimitArithmetic2Operator\"\n    ) => {\n        return (\n            <select\n                className={`${CLASSES.selectElement} col-span-1`}\n                hidden={hideWhenTrainLimitIsNotDynamic}\n                value={props.userSettings[key]}\n                onChange={(e) => {\n                    props.setUserSettings({\n                        ...props.userSettings,\n                        [key]: e.target.value,\n                    })\n                }}\n            >\n                {operatorTypes.map((operator) => {\n                    return (\n                        <option key={operator} value={operator}>\n                            {operator}\n                        </option>\n                    )\n                })}\n            </select>\n        )\n    }\n\n    const trainLimitHtml = (\n        <select\n            className={`${CLASSES.selectElement} col-span-5`}\n            data-tip={TOOLTIPS.trainLimit}\n            value={props.userSettings.trainLimit}\n            onChange={(e) => {\n                props.setUserSettings({\n                    ...props.userSettings,\n                    trainLimit: e.target.value,\n                })\n            }}\n        >\n            {trainLimit.map((optionStr) => {\n                return (\n                    <option key={optionStr} value={optionStr}>\n                        {optionStr}\n                    </option>\n                )\n            })}\n        </select>\n    )\n\n    const applyArray = (\n        combinatorArray: [string, iOperator, string, string, iOperator, string]\n    ) => {\n        props.setUserSettings({\n            ...props.userSettings,\n            trainLimitArithmetic1Constant1: combinatorArray[0],\n            trainLimitArithmetic1Operator: combinatorArray[1],\n            trainLimitArithmetic1Constant2: combinatorArray[2],\n            trainLimitArithmetic2Constant1: combinatorArray[3],\n            trainLimitArithmetic2Operator: combinatorArray[4],\n            trainLimitArithmetic2Constant2: combinatorArray[5],\n        })\n    }\n\n    return (\n        <div>\n            <div className={CLASSES.section}>\n                <div className={CLASSES.gridSection12cols}>\n                    {trainLimitHtml}\n                    <label className={`${CLASSES.labelElement} col-span-7`}>Train Limit</label>\n                    {myInput(\"trainLimitArithmetic1Constant1\")}\n                    {mySelectOperator(\"trainLimitArithmetic1Operator\")}\n                    {myInput(\"trainLimitArithmetic1Constant2\")}\n                    <label\n                        className={`${CLASSES.labelElement} col-span-7`}\n                        hidden={hideWhenTrainLimitIsNotDynamic}\n                    >\n                        First arithmetic combinator settings\n                    </label>\n                    {myInput(\"trainLimitArithmetic2Constant1\")}\n                    {mySelectOperator(\"trainLimitArithmetic2Operator\")}\n                    {myInput(\"trainLimitArithmetic2Constant2\")}\n                    <label\n                        className={`${CLASSES.labelElement} col-span-7`}\n                        hidden={hideWhenTrainLimitIsNotDynamic}\n                    >\n                        Second arithmetic combinator settings\n                    </label>\n                    <button\n                        className={`${CLASSES.buttonElement} w-full my-1 col-span-4`}\n                        hidden={hideWhenTrainLimitIsNotDynamic}\n                        onClick={() => {\n                            applyArray(calcCombinatorSettings(props.userSettings, 50))\n                        }}\n                    >\n                        Calculate for item stack size 50\n                    </button>\n                    <button\n                        className={`${CLASSES.buttonElement} w-full my-1 col-span-4`}\n                        hidden={hideWhenTrainLimitIsNotDynamic}\n                        onClick={() => {\n                            applyArray(calcCombinatorSettings(props.userSettings, 100))\n                        }}\n                    >\n                        Calculate for item stack size 100\n                    </button>\n                    <button\n                        className={`${CLASSES.buttonElement} w-full my-1 col-span-4`}\n                        hidden={hideWhenTrainLimitIsNotDynamic}\n                        onClick={() => {\n                            applyArray(calcCombinatorSettings(props.userSettings, 200))\n                        }}\n                    >\n                        Calculate for item stack size 200\n                    </button>\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport TrainTypeSettings from \"../Sections/TrainTypeSettings\"\nimport { iSectionsProps } from \"../../constants/interfaces\"\nimport InserterSettings from \"../Sections/InserterSettings\"\nimport ChestTypeSettings from \"../Sections/ChestTypeSettings\"\nimport BeltTypeSettings from \"../Sections/BeltTypeSettings\"\nimport RefillSettings from \"../Sections/RefillSettings\"\nimport WireSettings from \"../Sections/WireSettings\"\nimport EnabledConditionSettings from \"../Sections/EnabledConditionSettings\"\nimport LampsSettings from \"../Sections/LampsSettings\"\nimport StationNameSettings from \"../Sections/StationNameSettings\"\nimport StationSettings from \"../Sections/StationSettings\"\n\nexport default function NormalStation(props: iSectionsProps): JSX.Element {\n    return (\n        <div className={\"flex flex-col\"}>\n            <div className={\"grid gap-x-4 grid-cols-1 lg:grid-cols-2\"}>\n                <div>\n                    <StationNameSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                    <StationSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                    <TrainTypeSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                    <InserterSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                    <ChestTypeSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                </div>\n                <div>\n                    <BeltTypeSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n\n                    <RefillSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                    <WireSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                    <EnabledConditionSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                    <LampsSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport { iPumpSides, iSectionsProps } from \"../../constants/interfaces\"\nimport { CLASSES } from \"../../css/classes\"\nimport { pumpSides } from \"../../constants/constants\"\n\nexport default function FluidSettings(props: iSectionsProps): JSX.Element {\n    const pumpSideHtml = (\n        <select\n            id={\"sidesUsed\"}\n            className={CLASSES.selectElement}\n            value={props.userSettings.pumpSidesToBeUsed}\n            onChange={(e) => {\n                props.setUserSettings({\n                    ...props.userSettings,\n                    pumpSidesToBeUsed: e.target.value as iPumpSides,\n                })\n            }}\n        >\n            {pumpSides.map((pumpSide) => {\n                return (\n                    <option className={CLASSES.optionElement} key={pumpSide} value={pumpSide}>\n                        {pumpSide}\n                    </option>\n                )\n            })}\n        </select>\n    )\n\n    return (\n        <div className={CLASSES.section}>\n            <div className={CLASSES.gridSection}>\n                {pumpSideHtml}\n                <label className={CLASSES.labelElement} htmlFor={\"sidesUsed\"}>\n                    Sides to be used\n                </label>\n                <input\n                    className={CLASSES.checkboxElement}\n                    type={\"checkbox\"}\n                    id={\"connectTanks\"}\n                    checked={props.userSettings.pumpConnectWithPipe}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            pumpConnectWithPipe: e.target.checked,\n                        })\n                    }}\n                />\n                <label className={CLASSES.labelElement} htmlFor={\"connectTanks\"}>\n                    Connect tank with pipe?\n                </label>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport TrainTypeSettings from \"../Sections/TrainTypeSettings\"\nimport { iSectionsProps } from \"../../constants/interfaces\"\nimport RefillSettings from \"../Sections/RefillSettings\"\nimport WireSettings from \"../Sections/WireSettings\"\nimport EnabledConditionSettings from \"../Sections/EnabledConditionSettings\"\nimport LampsSettings from \"../Sections/LampsSettings\"\nimport StationNameSettings from \"../Sections/StationNameSettings\"\nimport FluidSettings from \"../Sections/FluidSettings\"\nimport StationSettings from \"../Sections/StationSettings\"\n\nexport default function FluidStation(props: iSectionsProps): JSX.Element {\n    return (\n        <div className={\"flex flex-col\"}>\n            <div className={\"grid gap-x-4 grid-cols-1 lg:grid-cols-2\"}>\n                <div>\n                    <StationNameSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                    <StationSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                    <TrainTypeSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                </div>\n                <div>\n                    <FluidSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                    <RefillSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                    <WireSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                    <EnabledConditionSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                    <LampsSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport { CLASSES } from \"../css/classes\"\n\nexport default function Title(): JSX.Element {\n    return <div className={CLASSES.title}>{\"Burny's Train Station Blueprint Creator\"}</div>\n}\n","import React from \"react\"\nimport { CLASSES } from \"../css/classes\"\n\nexport default function Footer(): JSX.Element {\n    return (\n        <div className={`flex flex-col my-2`}>\n            <a\n                className={CLASSES.footerElements}\n                target=\"_blank\"\n                rel=\"noreferrer\"\n                href=\"https://github.com/BurnySc2/Factorio-Train-Station-Blueprint-Creator\"\n            >\n                Contribute\n            </a>\n            <a\n                className={CLASSES.footerElements}\n                target=\"_blank\"\n                rel=\"noreferrer\"\n                href=\"https://github.com/BurnySc2/Factorio-Train-Station-Blueprint-Creator/issues/new\"\n            >\n                Suggestions / Report Bugs\n            </a>\n            <a\n                className={CLASSES.footerElements}\n                target=\"_blank\"\n                rel=\"noreferrer\"\n                href=\"https://www.reddit.com/message/compose/?to=BurnySc2\"\n            >\n                Contact (Reddit)\n            </a>\n        </div>\n    )\n}\n","import React from \"react\"\nimport { iSectionsProps } from \"../../constants/interfaces\"\nimport { CLASSES } from \"../../css/classes\"\nimport { stackerDiagonalTypes, stackerTypes } from \"../../constants/constants\"\n\nexport default function StackerSettings(props: iSectionsProps): JSX.Element {\n    const myCheckbox = (keyName: \"diagonalStacker\") => {\n        return (\n            <input\n                className={CLASSES.checkboxElement}\n                key={keyName}\n                type={\"checkbox\"}\n                id={keyName}\n                checked={props.userSettings[keyName]}\n                onChange={(e) => {\n                    props.setUserSettings({\n                        ...props.userSettings,\n                        [keyName]: e.target.checked,\n                    })\n                }}\n            />\n        )\n    }\n\n    const stackerTypesHtml = (\n        <select\n            className={CLASSES.selectElement}\n            value={props.userSettings.stackerType}\n            onChange={(e) => {\n                props.setUserSettings({\n                    ...props.userSettings,\n                    stackerType: e.target.value,\n                })\n            }}\n        >\n            {stackerTypes.map((type) => {\n                if (props.userSettings.diagonalStacker) return undefined\n                return (\n                    <option key={type} value={type}>\n                        {type}\n                    </option>\n                )\n            })}\n            {stackerDiagonalTypes.map((type) => {\n                if (!props.userSettings.diagonalStacker) return undefined\n                return (\n                    <option key={type} value={type}>\n                        {type}\n                    </option>\n                )\n            })}\n        </select>\n    )\n\n    return (\n        <div className={CLASSES.section}>\n            <div className={CLASSES.gridSection}>\n                <input\n                    className={CLASSES.inputTextElement}\n                    id={\"stackerNumberParallelLanes\"}\n                    value={props.userSettings.stackerNumberParallelLanes}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            stackerNumberParallelLanes: e.target.value,\n                        })\n                    }}\n                />\n                <label className={CLASSES.labelElement} htmlFor={\"stackerNumberParallelLanes\"}>\n                    # of parallel lanes\n                </label>\n                {myCheckbox(\"diagonalStacker\")}\n                <label className={CLASSES.labelElement} htmlFor={\"diagonalStacker\"}>\n                    Diagonal Stacker?\n                </label>\n                {stackerTypesHtml}\n                <label className={CLASSES.labelElement} htmlFor={\"leftRightStacker\"}>\n                    Stacker Type\n                </label>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport TrainTypeSettings from \"../Sections/TrainTypeSettings\"\nimport { iSectionsProps } from \"../../constants/interfaces\"\nimport StackerSettings from \"../Sections/StackerSettings\"\n\nexport default function Stacker(props: iSectionsProps): JSX.Element {\n    return (\n        <div className={\"flex flex-col\"}>\n            <TrainTypeSettings\n                userSettings={props.userSettings}\n                setUserSettings={props.setUserSettings}\n            />\n            <StackerSettings\n                userSettings={props.userSettings}\n                setUserSettings={props.setUserSettings}\n            />\n        </div>\n    )\n}\n","import React from \"react\"\nimport { CLASSES } from \"../css/classes\"\nimport { defaultSettings } from \"../constants/constants\"\n\ninterface MyProps {\n    warningMessage: string\n    userSettings: typeof defaultSettings\n}\nexport default function WarningMessage(props: MyProps): JSX.Element | null {\n    if (props.warningMessage === \"\") {\n        return null\n    }\n    return <div className={CLASSES.warningMessageElement}>Hint: {props.warningMessage}</div>\n}\n","import React from \"react\"\nimport { CLASSES } from \"../css/classes\"\n\ninterface MyProps {\n    errorMessage: string\n}\n\nexport default function ErrorMessage(props: MyProps): JSX.Element | null {\n    if (props.errorMessage === \"\") {\n        return null\n    }\n    return <div className={CLASSES.errorMessageElement}>{props.errorMessage}</div>\n}\n","import React, { useEffect, useState } from \"react\"\nimport NormalStation from \"./StationTypes/NormalStation\"\nimport FluidStation from \"./StationTypes/FluidStation\"\nimport Title from \"./Title\"\nimport { defaultSettings, normalStation, stationTypes, fluidStation } from \"../constants/constants\"\nimport { CLASSES } from \"../css/classes\"\nimport Footer from \"./Footer\"\nimport Stacker from \"./StationTypes/Stacker\"\nimport copy from \"copy-to-clipboard\"\nimport { createBlueprint, createBlueprintString } from \"../BlueprintCreation/CreateBlueprint\"\nimport WarningMessage from \"./WarningMessage\"\nimport ErrorMessage from \"./ErrorMessage\"\nimport { checkForHintsBlueprintSettings, validateBlueprintSettings } from \"../constants/helper\"\nimport ReactTooltip from \"react-tooltip\"\nimport itemlist from \"../constants/itemlist.json\"\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst cloneDeep = require(\"clone-deep\")\n\nexport default function Website(): JSX.Element {\n    const [userSettings, setUserSettings] = useState(cloneDeep(defaultSettings))\n    const [blueprintString, setBlueprintString] = useState(\"\")\n    const [warningMessage, setWarningMessage] = useState(\"\")\n    const [errorMessage, setErrorMessage] = useState(\"\")\n\n    useEffect(() => {\n        const newWarningMessage = checkForHintsBlueprintSettings(userSettings)\n        setWarningMessage(newWarningMessage)\n        const newErrorMessage = validateBlueprintSettings(userSettings)\n        setErrorMessage(newErrorMessage)\n    }, [userSettings])\n\n    const stationTypeSelect = (\n        <select\n            className={CLASSES.selectElement}\n            value={userSettings.stationType}\n            onChange={(e) => {\n                setUserSettings({ ...userSettings, stationType: e.target.value })\n            }}\n        >\n            {stationTypes.map((stationType) => {\n                return (\n                    <option className={CLASSES.optionElement} key={stationType} value={stationType}>\n                        {stationType}\n                    </option>\n                )\n            })}\n        </select>\n    )\n\n    // Select which sub-station settings are available\n    let stationTypeHtml: JSX.Element = <div>ERROR LOADING CORRECT STATION TYPE</div>\n    if (normalStation.includes(userSettings.stationType)) {\n        stationTypeHtml = (\n            <NormalStation userSettings={userSettings} setUserSettings={setUserSettings} />\n        )\n    } else if (fluidStation.includes(userSettings.stationType)) {\n        stationTypeHtml = (\n            <FluidStation userSettings={userSettings} setUserSettings={setUserSettings} />\n        )\n    } else if (userSettings.stationType === \"Stacker\") {\n        stationTypeHtml = <Stacker userSettings={userSettings} setUserSettings={setUserSettings} />\n    }\n\n    // Creates the datalist item names to make it easier for autocomplete\n    // Source: https://github.com/kevinta893/factorio-recipes-json recipes.json\n    const itemdatalist = (\n        <datalist id={\"itemlist\"}>\n            {itemlist.map((itemInfo) => {\n                return <option key={itemInfo.id} value={itemInfo.id} />\n            })}\n        </datalist>\n    )\n\n    return (\n        <div className={CLASSES.background}>\n            <div className={CLASSES.background2}>\n                <Title />\n                <div className={\"grid grid-cols-1 justify-items-center m-auto bg-blue-800\"}>\n                    <div className={CLASSES.section}>{stationTypeSelect}</div>\n                    {stationTypeHtml}\n                    {/*Blueprint generation will not work with the current settings, give the user hints how to fix the configuration*/}\n                    <ErrorMessage errorMessage={errorMessage} />\n                    {/*Figure out if some combinations do not work properly and give the user hints how to fix it*/}\n                    <WarningMessage warningMessage={warningMessage} userSettings={userSettings} />\n                    <button\n                        className={CLASSES.buttonElement}\n                        onClick={() => {\n                            if (errorMessage === \"\") {\n                                setBlueprintString(\n                                    createBlueprintString(createBlueprint(userSettings))\n                                )\n                            }\n                        }}\n                    >\n                        Generate Blueprint\n                    </button>\n                    <input\n                        className={`${CLASSES.inputTextElement} my-1`}\n                        hidden={blueprintString.length === 0}\n                        value={`Blueprint length: ${blueprintString.length}`}\n                        readOnly\n                    />\n                    <input\n                        className={`${CLASSES.inputTextElement} my-1`}\n                        placeholder={\"Blueprint string will be generated here.\"}\n                        value={blueprintString}\n                        readOnly\n                    />\n                    <button\n                        className={CLASSES.buttonElement}\n                        onClick={() => {\n                            // Copy to clipboard\n                            copy(blueprintString, {\n                                debug: true,\n                                message: \"asd\",\n                            })\n                        }}\n                    >\n                        Copy to Clipboard\n                    </button>\n                    <Footer />\n                    <ReactTooltip place={\"bottom\"} multiline />\n                    {itemdatalist}\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport Website from \"./Website\"\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\"\n\nexport default function MyRouter(): JSX.Element {\n    return (\n        // TODO use path (params) to be able to link a setting to a friend\n        <Router>\n            <Switch>\n                <Route path=\"/\">\n                    <Website />\n                </Route>\n            </Switch>\n        </Router>\n    )\n}\n","import React from \"react\"\nimport MyRouter from \"./components/MyRouter\"\n\nfunction App(): JSX.Element {\n    return <MyRouter />\n}\n\nexport default App\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport \"./css/style.css\"\nimport App from \"./App\"\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}