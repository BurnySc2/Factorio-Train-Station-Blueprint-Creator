{"version":3,"sources":["BlueprintCreation/CreateItems.ts","BlueprintCreation/CreateBlueprint.ts","BlueprintCreation/CreateNormalStation.ts","BlueprintCreation/CreateFluidStation.ts","constants/constants.ts","constants/verticalStackerCurves.ts","constants/diagonalStackerCurves.ts","BlueprintCreation/CreateStacker.ts","css/classes.ts","components/Sections/TrainTypeSettings.tsx","components/Sections/InserterSettings.tsx","components/Sections/SequentialStationSettings.tsx","components/Sections/ChestTypeSettings.tsx","components/Sections/BeltTypeSettings.tsx","components/Sections/RefillSettings.tsx","components/Sections/WireSettings.tsx","components/Sections/EnabledConditionSettings.tsx","components/Sections/LampsSettings.tsx","components/Sections/StationNameSettings.tsx","components/StationTypes/NormalStation.tsx","components/Sections/FluidSettings.tsx","components/StationTypes/FluidStation.tsx","components/Title.tsx","components/Footer.tsx","components/Sections/StackerSettings.tsx","components/StationTypes/Stacker.tsx","components/Website.tsx","components/MyRouter.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["cloneDeep","require","entityNumber","resetEntityNumber","newItem","itemName","x","y","options","item","entity_number","name","position","direction","orientation","bar","filters","request_filters","request_from_buffers","control_behavior","station","manual_trains_limit","assignEntityNumberToItems","items","xOffset","yOffset","map","getTrainArray","bpSettings","startOffset","bottomOffset","returnArray","doubleHeaded","i","parseInt","locomotivesPerEnd","cargoWagon","push","getFrontLocomotivesArray","getBackLocomotivesArray","getCargoArray","placeTrainTracks","forEach","placeSignals","stationNumber","singleHeadedOffset","end","stationType","start","DIRECTION","DOWN","sequentialStation","sequentialStationsAmount","UP","placeTrainStop","controlBehavior","trainStopUsesEnabledCondition","circuit_condition","first_signal","type","constant","comparator","circuit_enable_disable","undefined","stationName","trainLimit","placeTrain","count","locoCount","cargoCount","includes","placeInserters","filterArray","inserterType","enableFilterInserters","filterInserters","inserterDirection","RIGHT","LEFT","filterFields","index","placeChests","isRequesterChest","chestType","requests","chestRequestItemsType","itemType","itemAmount","chestRequestItemsAmount","requestFromBuffers","chestRequestFromBuffers","chestLimit","placeLoadingBelts","beltType","placeUnloadingBelts","placePumps","pumpDirection","placeStorageTanks","placePipes","array","length","placeVerticalBelts","splitters","mode","beltEnd","beltFlowDirection","sortByYPosition","splitter","reverse","placeSplitters","splitterType","splitterTypes","splitterDirection","placePoles","placeLamps","placeDecider","decider_conditions","enabledConditionAmount","enabledConditionOperator","output_signal","copy_count_from_input","placeTopRefuelPoles","placeBottomRefuelPoles","placeRefuelChestsAndInserters","refillFuelType","refillFuelAmount","connectTwoEntitiesWithWire","entity1","entity2","color","entity1ConNumber","entity2ConNumber","entity1Number","entity2Number","createWirePath","entity","conNumber","connections","entity_id","connectItemsWithWire","item1","item2","mirrorItemsHorizontal","copy","mirrorXOffset","changeItemsCoordinates","copyPasteItems","clone","mixSides","sidesUsed","leftArray","rightArray","console","assert","sort","a","b","zlib","createBlueprint","createNormalStation","createFluidStation","createStacker","createBlueprintString","blueprint","icons","signal","entities","version","label","deflateSync","JSON","stringify","level","toString","encode","allItems","rightSplitters","stationsTarget","stationYOffset","stationItems","rightChests","leftChests","chests","beltSidesUsed","connectChestsWithGreenWire","connectBothSideWithGreenWire","connectChestsWithRedWire","connectBothSideWithRedWire","rightSideItems","rightPoles","leftPoles","poles","leftSideItems","placeLampsNearPoles","rightLamps","leftLamps","trainStop","refillEnabled","topPoles","bottomPoles","decider","combineArray","includeTrainInBlueprint","newSplitters","sequantialStationBeltsGoAllTheWay","splitterSlice","slice","rightVerticalBelts","leftVerticalBelts","leftSplitters","trainStops","filter","railSignals","stop","rightStorageTanks","leftStorageTanks","pumpSidesToBeUsed","rightPumps","leftPumps","rightPipes","leftPipes","storageTanks","stationTypes","inserterTypes","inserter","chestTypes","chestTypesHuman","beltTypes","beltTypesHuman","beltSides","pumpSides","beltFlowDirections","refillFuelTypes","refillFuelTypesHuman","wood","coal","stackerDiagonalTypes","stackerTypes","enabledConditionOperators","enabledConditionOperatorsHuman","defaultSettings","pumpConnectWithPipe","Array","fill","beltsEnabled","stackerNumberParallelLanes","diagonalStacker","stackerType","frontLeftCurve","frontRightCurve","backLeftCurve","backRightCurve","diagonalFrontLeftCurve","diagonalFrontRightCurve","diagonalBackLeftCurve","diagonalBackRightCurve","createDiagonalStacker","createVerticalStacker","frontCurve","backCurve","trainLength","Math","floor","copyPasteBlueprint","doubleHeadedFactor","diagonalLength","round","diagonals","newDiagonals","CLASSES","TrainTypeSettings","props","hideIfDiagonalStacker","userSettings","className","min","id","checked","onChange","e","setUserSettings","target","htmlFor","value","hidden","InserterSettings","inserterSelect","isFilterInserter","newFilterInputField","placeholder","oldArray","newValue","setValueAtIndex","previousIsEmpty","filterInserterInputFields","_","SequentialStationSettings","ChestTypeSettings","chestTypesHtml","canRequestFromBufferChests","chestRequests","BeltTypeSettings","beltTypesHtml","beltSideHtml","beltSide","beltFlowHtml","beltFlow","RefillSettings","fuelTypesHtml","fuelType","WireSettings","hiddenWhenNormalStation","hiddenWhenFluidStation","hiddenWhenNotBothSides","myCheckbox","keyName","EnabledConditionSettings","enabledConditionOperatorHtml","operator","LampsSettings","StationNameSettings","NormalStation","FluidSettings","pumpSideHtml","pumpSide","FluidStation","Title","Footer","StackerSettings","stackerTypesHtml","Stacker","Website","useState","blueprintString","setBlueprintString","stationTypeSelect","stationTypeHtml","onClick","readOnly","debug","message","MyRouter","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"kmCASMA,EAAYC,EAAQ,IAEfC,EAAe,EACbC,EAAoB,WAC7BD,EAAe,GAGNE,EAAU,SACnBC,EACAC,EACAC,GA0CkB,IAzClBC,EAyCiB,uDADb,GAEAC,EAAuB,CACvBC,cAAeR,EACfS,KAAMN,EACNO,SAAU,CACNN,EAAGA,EACHC,EAAGA,IA+BX,OA5BIC,EAAQK,YACRJ,EAAKI,UAAYL,EAAQK,WAEzBL,EAAQM,cACRL,EAAKK,YAAcN,EAAQM,aAE3BN,EAAQO,MACRN,EAAKM,IAAMP,EAAQO,KAEnBP,EAAQQ,UACRP,EAAKO,QAAUR,EAAQQ,SAEvBR,EAAQS,kBACRR,EAAKQ,gBAAkBT,EAAQS,iBAE/BT,EAAQU,uBACRT,EAAKS,qBAAuBV,EAAQU,sBAEpCV,EAAQW,mBACRV,EAAKU,iBAAmBX,EAAQW,kBAEhCX,EAAQY,UACRX,EAAKW,QAAUZ,EAAQY,SAEvBZ,EAAQa,sBACRZ,EAAKY,oBAAsBb,EAAQa,qBAEvCnB,GAAgB,EACTO,GAEEa,EAA4B,SACrCC,GAGoB,IAFpBC,EAEmB,uDAFD,EAClBC,EACmB,uDADD,EAElB,OAAOF,EAAMG,KAAI,SAACjB,GACd,OAAOL,EAAQK,EAAKE,KAAMF,EAAKG,SAASN,EAAIkB,EAASf,EAAKG,SAASL,EAAIkB,EAAS,CAC5EZ,UAAWJ,EAAKI,gBAKfc,EAAgB,SACzBC,GAMA,IAHE,IAFFC,EAEC,uDAFa,EACdC,EACC,uDADc,EAEXC,EAAwB,GACxBC,EAAeJ,EAAWI,aAAe,EAAI,EAEzCC,EAAIJ,EACRI,EAEI,GADHD,EAAeE,SAASN,EAAWO,mBAAqBD,SAASN,EAAWQ,aAEzEN,EACJG,IAEAF,EAAYM,KAAKJ,GAErB,OAAOF,GAGEO,EAA2B,SACpCV,GAKA,IAFE,IAFFC,EAEC,wDAFc,EACfC,EACC,wDADe,EAEZC,EAAwB,GACnBE,EAAIJ,EAAaI,EAA6C,EAAzCC,SAASN,EAAWO,mBAAyBL,EAAcG,IACrFF,EAAYM,KAAKJ,GAErB,OAAOF,GAGEQ,EAA0B,SACnCX,GAGE,IAFFC,EAEC,wDAFc,EACfC,EACC,wDADe,EAEhB,IAAKF,EAAWI,aAAc,MAAO,GAErC,IADA,IAAID,EAAwB,GAEpBE,EAC6E,GAA5EC,SAASN,EAAWO,mBAAqBD,SAASN,EAAWQ,aAC9DP,EACJI,EACiF,GAAhF,EAAIC,SAASN,EAAWO,mBAAqBD,SAASN,EAAWQ,aAC9DN,EACJG,IAEAF,EAAYM,KAAKJ,GAErB,OAAOF,GAGES,EAAgB,SAACZ,GAG1B,IAHoF,IAAtBC,EAAqB,wDAAN,EACzEE,EAAwB,GACxBD,EAAe,EAEXG,EAA6C,EAAzCC,SAASN,EAAWO,mBAAyBN,EACrDI,EAC6E,GAA5EC,SAASN,EAAWO,mBAAqBD,SAASN,EAAWQ,aAC1DP,EACAC,EACJG,IAEAF,EAAYM,KAAKJ,GAErB,OAAOF,GAGEU,EAAmB,SAACb,GAC7B,IAAIG,EAAgC,GAKpC,OAJAJ,EAAcC,GAAa,GAAGc,SAAQ,SAACT,GAC/BA,EAAI,IAAM,GACdF,EAAYM,KAAKjC,EAAQ,iBAAkB,IAAK6B,OAE7CF,GAGEY,EAAe,SAACf,EAAoCgB,GAE7D,IAAIb,EAAgC,GAEhCC,EAAeJ,EAAWI,aAAe,EAAI,EAC7Ca,EAAqBjB,EAAWI,aAAe,EAAI,EACnDc,EAEI,GADHd,EAAeE,SAASN,EAAWO,mBAAqBD,SAASN,EAAWQ,aAE7ES,EAuCJ,MArC+B,YAA3BjB,EAAWmB,aACXhB,EAAYM,KACRjC,EAAQ,oBAAqB,GAAG4C,IAAa,CAAEnC,UAAWoC,IAAUC,QAExEnB,EAAYM,KAAKjC,EAAQ,cAAe,EAAG0C,EAAM,IAAK,CAAEjC,UAAWoC,IAAUC,SAGxEtB,EAAWuB,mBACM,IAAlBP,GACAb,EAAYM,KACRjC,EAAQ,oBAAqB,GAAG4C,IAAa,CAAEnC,UAAWoC,IAAUC,QAGxEN,IAAkBV,SAASN,EAAWwB,0BAA4B,GAClErB,EAAYM,KAAKjC,EAAQ,cAAe,EAAG0C,EAAM,IAAK,CAAEjC,UAAWoC,IAAUC,QAE7EN,EAAgB,GAChBb,EAAYM,KAAKjC,EAAQ,cAAe,GAAG4C,IAAa,CAAEnC,UAAWoC,IAAUC,UAK/EtB,EAAWI,aAEXD,EAAYM,KACRjC,EAAQ,qBAAsB,EAAG0C,EAAM,IAAK,CAAEjC,UAAWoC,IAAUI,MAIvEtB,EAAYM,KACRjC,EAAQ,oBAAqB,GAAG4C,IAAa,CAAEnC,UAAWoC,IAAUC,QAI5EnB,EAAYM,KAAKjC,EAAQ,cAAe,EAAG0C,EAAM,IAAK,CAAEjC,UAAWoC,IAAUC,SAG1EnB,GAGEuB,EAAiB,SAAC1B,GAE3B,IAAIG,EAAgC,GAChCwB,EAAkB3B,EAAW4B,8BAC3B,CACIC,kBAAmB,CACfC,aAAc,CACVC,KAAM,UACNhD,KAAM,cAEViD,SAAU,EACVC,WAAY,KAEhBC,wBAAwB,QAE5BC,EACFvD,EAAU,CACVY,QAAoC,KAA3BQ,EAAWoC,YAAqBpC,EAAWoC,iBAAcD,EAClE1C,oBACIa,SAASN,EAAWqC,aAAe,EAAIrC,EAAWqC,gBAAaF,EACnE5C,iBAAkBoC,GAGtB,OADAxB,EAAYM,KAAKjC,EAAQ,aAAc,IAAM,EAAGI,IACzCuB,GAGEmC,EAAa,SAACtC,GACvB,IAAIG,EAAgC,GAChCoC,EAAQ,EACRnC,EAAeJ,EAAWI,aAAe,EAAI,EAC7CoC,EAAYlC,SAASN,EAAWO,mBAChCkC,EAAanC,SAASN,EAAWQ,YAkBrC,OAjBAF,SAASN,EAAWQ,YAEpBT,EAAcC,GAAYc,SAAQ,SAACnC,EAAG0B,GAC9BA,EAAI,IAAM,IACVkC,EAAQC,EACRrC,EAAYM,KAAKjC,EAAQ,cAAe,IAAKG,EAAI,IAC1C4D,EAAQC,EAAYC,EAEvB,CAAC,kBAAmB,oBAAqB,WAAWC,SAAS1C,EAAWmB,aAExEhB,EAAYM,KAAKjC,EAAQ,eAAgB,IAAKG,EAAI,IACjDwB,EAAYM,KAAKjC,EAAQ,eAAgB,IAAKG,EAAI,IAChD4D,EAAQC,EAAYpC,EAAeqC,GAC1CtC,EAAYM,KAAKjC,EAAQ,cAAe,IAAKG,EAAI,EAAG,CAAEO,YAAa,MAEvEqD,GAAS,MAENpC,GAGEwC,EAAiB,SAAC3C,GAG3B,IAMI4C,EANAzC,EAAgC,GAChC0C,EAAe7C,EAAW8C,sBACxBC,IAAgB/C,EAAW6C,cAC3B7C,EAAW6C,aACbG,EAC2B,oBAA3BhD,EAAWmB,YAAoCE,IAAU4B,MAAQ5B,IAAU6B,KAO/E,GAAIlD,EAAW8C,sBAAuB,CAClCF,EAAc,GACd,IAAK,IAAIvC,EAAI,EAAGA,EAAI,IACXL,EAAWmD,aAAa9C,IAAqC,KAA/BL,EAAWmD,aAAa9C,IADxCA,IAEnBuC,EAAYnC,KAAK,CACb2C,MAAO/C,EAAI,EACXtB,KAAMiB,EAAWmD,aAAa9C,KAmB1C,OAfAO,EAAcZ,GAAYc,SAAQ,SAACnC,EAAG0B,GAC9BA,EAAI,IAAM,IACdF,EAAYM,KACRjC,EAAQqE,EAAc,EAAGlE,EAAI,GAAK,CAC9BM,UAAW+D,EACX5D,QAASwD,KAGjBzC,EAAYM,KACRjC,EAAQqE,EAAc,EAAGlE,EAAI,GAAK,CAC9BM,UAAW+D,EACX5D,QAASwD,SAIdzC,GAEEkD,EAAc,SAACrD,GAExB,IAAIG,EAAgC,GAGhCmD,EAAmB,CAAC,2BAA4B,yBAAyBZ,SACzE1C,EAAWuD,WAEXC,EAIC,GACDF,GACAtD,EAAWyD,sBAAsB3C,SAAQ,SAAC4C,EAAUN,GAChD,IAAIO,EAAa3D,EAAW4D,wBAAwBR,GACpDI,EAAS/C,KAAK,CACV2C,MAAOA,EAAQ,EACfrE,KAAM2E,EACNnB,MAAOoB,OAKnB,IAAIE,KACA7D,EAAW8D,yBAAoD,6BAAzB9D,EAAWuD,iBAE3CpB,EAWV,OAVAvB,EAAcZ,GAAYc,SAAQ,SAACnC,EAAG0B,GAC9BA,EAAI,IAAM,GACdF,EAAYM,KACRjC,EAAQwB,EAAWuD,UAAW,EAAG5E,EAAI,GAAK,CACtCQ,IAAKmB,SAASN,EAAW+D,YACzB1E,gBAAiBmE,EACjBlE,qBAAsBuE,QAI3B1D,GAGE6D,EAAoB,SAAChE,GAE9B,IAAIG,EAAgC,GAwBpC,OAvBAS,EAAcZ,GAAYc,SAAQ,SAACnC,EAAG0B,GAC9BA,EAAI,IAAM,EACVF,EAAYM,KACRjC,EAAQwB,EAAWiE,SAAU,EAAGtF,EAAI,GAAK,CAAEM,UAAWoC,IAAU6B,QAE7D7C,EAAI,IAAM,GAEVA,EAAI,IAAM,EADjBF,EAAYM,KAAKjC,EAAQwB,EAAWiE,SAAU,EAAGtF,EAAI,GAAK,CAAEM,UAAWoC,IAAUI,MAG1EpB,EAAI,IAAM,GAIVA,EAAI,IAAM,EAHjBF,EAAYM,KACRjC,EAAQwB,EAAWiE,SAAU,EAAGtF,EAAI,GAAK,CAAEM,UAAWoC,IAAUC,QAM7DjB,EAAI,IAAM,GACjBF,EAAYM,KACRjC,EAAQwB,EAAWiE,SAAU,EAAGtF,EAAI,GAAK,CAAEM,UAAWoC,IAAU6B,WAIrE/C,GAEE+D,EAAsB,SAAClE,GAEhC,IAAIG,EAAgC,GAwBpC,OAvBAS,EAAcZ,GAAYc,SAAQ,SAACnC,EAAG0B,GAC9BA,EAAI,IAAM,GAIHA,EAAI,IAAM,EAHjBF,EAAYM,KACRjC,EAAQwB,EAAWiE,SAAU,EAAGtF,EAAI,GAAK,CAAEM,UAAWoC,IAAUC,QAM7DjB,EAAI,IAAM,GAIVA,EAAI,IAAM,EAHjBF,EAAYM,KACRjC,EAAQwB,EAAWiE,SAAU,EAAGtF,EAAI,GAAK,CAAEM,UAAWoC,IAAU4B,UAM7D5C,EAAI,IAAM,GAEVA,EAAI,IAAM,IADjBF,EAAYM,KAAKjC,EAAQwB,EAAWiE,SAAU,EAAGtF,EAAI,GAAK,CAAEM,UAAWoC,IAAUI,SAKlFtB,GAEEgE,EAAa,SAACnE,GACvB,IAAIG,EAAgC,GAChCiE,EAC2B,0BAA3BpE,EAAWmB,YAA0CE,IAAU6B,KAAO7B,IAAU4B,MAapF,OAZArC,EAAcZ,GAAYc,SAAQ,SAACnC,EAAG0B,GAC9BA,EAAI,IAAM,GACVF,EAAYM,KAERjC,EAAQ,OAAQ,GAAKG,EAAI,GAAK,CAAEM,UAAWmF,KAG/C/D,EAAI,IAAM,GAEVF,EAAYM,KAAKjC,EAAQ,OAAQ,GAAKG,EAAI,GAAK,CAAEM,UAAWmF,QAG7DjE,GAEEkE,EAAoB,SAACrE,GAE9B,IAAIG,EAAgC,GAWpC,OAVAS,EAAcZ,GAAYc,SAAQ,SAACnC,EAAG0B,GAC9BA,EAAI,IAAM,GAEVF,EAAYM,KAAKjC,EAAQ,eAAgB,EAAGG,EAAI,KAEhD0B,EAAI,IAAM,GAEVF,EAAYM,KAAKjC,EAAQ,eAAgB,EAAGG,EAAI,GAAK,CAAEM,UAAWoC,IAAU4B,YAG7E9C,GAEEmE,EAAa,SAACtE,GAEvB,IAAIG,EAAgC,GAOpC,OANAS,EAAcZ,GAAYc,SAAQ,SAACnC,EAAG0B,EAAGkE,GAC3B,IAANlE,GAAWA,IAAMkE,EAAMC,OAAS,GAAKnE,EAAI,IAAM,GAE/CF,EAAYM,KAAKjC,EAAQ,OAAQ,EAAGG,EAAI,QAGzCwB,GAGEsE,EAAqB,SAC9BzE,EACA0E,GAEA,IAAIvE,EAAgC,GAChCwE,EAAkC,oBAA3B3E,EAAWmB,YAAoC,OAAS,SAC/DyD,EAAU5E,EAAW6E,kBACzBC,EAAgBJ,GAChB,IAAIhG,EAAI,EA2ER,MAzEa,WAATiG,GAAiC,UAAZC,GACrBF,EAAU5D,SAAQ,SAACiE,GACf,IAAK,IAAIpG,EAAI+F,EAAU,GAAG1F,SAASL,EAAGA,GAAKoG,EAAS/F,SAASL,EAAGA,IAC5DwB,EAAYM,KACRjC,EAAQwB,EAAWiE,SAAUvF,EAAGC,EAAI,GAAK,CAAEM,UAAWoC,IAAUI,MAGxE,IAAK,IAAIpB,EAAI0E,EAAS/F,SAASN,EAAI,EAAG2B,EAAI3B,EAAG2B,IACzCF,EAAYM,KACRjC,EAAQwB,EAAWiE,SAAU5D,EAAG0E,EAAS/F,SAASL,EAAI,GAAK,CACvDM,UAAWoC,IAAU4B,SAIjCvE,GAAK,KAIA,WAATiG,GAAiC,SAAZC,IACrBF,EAAUM,UACVN,EAAU5D,SAAQ,SAACiE,GACf,IAAK,IAAIpG,EAAI+F,EAAU,GAAG1F,SAASL,EAAGA,GAAKoG,EAAS/F,SAASL,EAAGA,IAC5DwB,EAAYM,KACRjC,EAAQwB,EAAWiE,SAAUvF,EAAGC,EAAI,GAAK,CAAEM,UAAWoC,IAAUC,QAGxE,IAAK,IAAIjB,EAAI0E,EAAS/F,SAASN,EAAI,EAAG2B,EAAI3B,EAAG2B,IACzCF,EAAYM,KACRjC,EAAQwB,EAAWiE,SAAU5D,EAAG0E,EAAS/F,SAASL,EAAI,GAAK,CACvDM,UAAWoC,IAAU4B,SAIjCvE,GAAK,MAIA,SAATiG,GAA+B,UAAZC,GACnBF,EAAU5D,SAAQ,SAACiE,GACf,IAAK,IAAIpG,EAAI+F,EAAU,GAAG1F,SAASL,EAAGA,EAAIoG,EAAS/F,SAASL,EAAGA,IAC3DwB,EAAYM,KACRjC,EAAQwB,EAAWiE,SAAUvF,EAAGC,EAAI,GAAK,CAAEM,UAAWoC,IAAUC,QAGxE,IAAK,IAAIjB,EAAI0E,EAAS/F,SAASN,EAAI,EAAG2B,GAAK3B,EAAG2B,IAC1CF,EAAYM,KACRjC,EAAQwB,EAAWiE,SAAU5D,EAAG0E,EAAS/F,SAASL,EAAI,GAAK,CACvDM,UAAWoC,IAAU6B,QAIjCxE,GAAK,KAIA,SAATiG,GAA+B,SAAZC,IACnBF,EAAUM,UACVN,EAAU5D,SAAQ,SAACiE,GACf,IAAK,IAAIpG,EAAI+F,EAAU,GAAG1F,SAASL,EAAGA,EAAIoG,EAAS/F,SAASL,EAAGA,IAC3DwB,EAAYM,KACRjC,EAAQwB,EAAWiE,SAAUvF,EAAGC,EAAI,GAAK,CAAEM,UAAWoC,IAAUI,MAGxE,IAAK,IAAIpB,EAAI0E,EAAS/F,SAASN,EAAI,EAAG2B,GAAK3B,EAAG2B,IAC1CF,EAAYM,KACRjC,EAAQwB,EAAWiE,SAAU5D,EAAG0E,EAAS/F,SAASL,EAAI,GAAK,CACvDM,UAAWoC,IAAU6B,QAIjCxE,GAAK,MAGNyB,GAiCE8E,EAAiB,SAACjF,GAC3B,IAAIG,EAAgC,GAChC+E,EAAeC,IAAcnF,EAAWiE,UACxCmB,EAC2B,oBAA3BpF,EAAWmB,YAAoCE,IAAU6B,KAAO7B,IAAU4B,MAK9E,OAJArC,EAAcZ,GAAYc,SAAQ,SAACnC,EAAG0B,GAC9BA,EAAI,IAAM,GACdF,EAAYM,KAAKjC,EAAQ0G,EAAc,EAAGvG,EAAG,CAAEM,UAAWmG,QAEvDjF,GAEEkF,EAAa,SAACrF,GAEvB,IAAIG,EAAgC,GAKpC,OAJAS,EAAcZ,GAAYc,SAAQ,SAACnC,EAAG0B,GAC9BA,EAAI,IAAM,GACdF,EAAYM,KAAKjC,EAAQ,uBAAwB,EAAGG,EAAI,QAErDwB,GAEEmF,EAAa,SAACtF,GAEvB,IAAIG,EAAgC,GAKpC,OAJAS,EAAcZ,GAAYc,SAAQ,SAACnC,EAAG0B,GAC9BA,EAAI,IAAM,GACdF,EAAYM,KAAKjC,EAAQ,aAAc,EAAGG,EAAI,QAE3CwB,GAEEoF,EAAe,SAACvF,GACzB,IAAIG,EAAgC,GAoBpC,OAnBAA,EAAYM,KACRjC,EAAQ,qBAAsB,EAAG,EAAG,CAChCe,iBAAkB,CACdiG,mBAAoB,CAChB1D,aAAc,CACVC,KAAM,UACNhD,KAAM,mBAEViD,SAAU1B,SAASN,EAAWyF,wBAC9BxD,WAAYjC,EAAW0F,yBACvBC,cAAe,CACX5D,KAAM,UACNhD,KAAM,cAEV6G,uBAAuB,OAKhCzF,GAGE0F,EAAsB,SAAC7F,GAChC,IAAIG,EAAgC,GAKpC,OAJAO,EAAyBV,GAAYc,SAAQ,SAACnC,EAAG0B,EAAGkE,GAC5ClE,EAAI,IAAM,GAAKkE,EAAMC,SAAWnE,EAAI,GAAW,IAANA,GAC7CF,EAAYM,KAAKjC,EAAQ,uBAAwB,EAAGG,EAAI,QAErDwB,GAEE2F,EAAyB,SAAC9F,GACnC,IAAIG,EAAgC,GAKpC,OAJAQ,EAAwBX,GAAYc,SAAQ,SAACnC,EAAG0B,EAAGkE,GAC3ClE,EAAI,IAAM,GAAKkE,EAAMC,SAAWnE,EAAI,GAAW,IAANA,GAC7CF,EAAYM,KAAKjC,EAAQ,uBAAwB,EAAGG,EAAI,QAErDwB,GAEE4F,EAAgC,SAAC/F,GAE1C,IAAIG,EAAgC,GA+BpC,OA9BAO,EAAyBV,GAAYc,SAAQ,SAACnC,EAAG0B,GACzCA,EAAI,IAAM,IACdF,EAAYM,KAAKjC,EAAQ,WAAY,EAAGG,EAAI,GAAK,CAAEM,UAAWoC,IAAU4B,SACxE9C,EAAYM,KACRjC,EAAQ,2BAA4B,EAAGG,EAAI,GAAK,CAC5CU,gBAAiB,CACb,CACI+D,MAAO,EACPrE,KAAMiB,EAAWgG,eACjBzD,MAAOjC,SAASN,EAAWiG,2BAM/CtF,EAAwBX,GAAYc,SAAQ,SAACnC,EAAG0B,GACxCA,EAAI,IAAM,IACdF,EAAYM,KAAKjC,EAAQ,WAAY,EAAGG,EAAI,GAAK,CAAEM,UAAWoC,IAAU4B,SACxE9C,EAAYM,KACRjC,EAAQ,2BAA4B,EAAGG,EAAI,GAAK,CAC5CU,gBAAiB,CACb,CACI+D,MAAO,EACPrE,KAAMiB,EAAWgG,eACjBzD,MAAOjC,SAASN,EAAWiG,2BAMxC9F,GAGE+F,EAA6B,SACtCC,EACAC,EACAC,GAGE,IAFFC,EAEC,uDAF6B,IAC9BC,EACC,uDAD6B,IAE1BC,EAAgBL,EAAQrH,cACxB2H,EAAgBL,EAAQtH,cAExB4H,EAAiB,SAACC,EAAwBC,GACrCD,EAAOE,cACRF,EAAOE,YAAc,IAEpBF,EAAOE,YAAYD,KACpBD,EAAOE,YAAYD,GAAa,IAG/BD,EAAOE,YAAYD,GAAWP,KAE/BM,EAAOE,YAAYD,GAAWP,GAAS,KAI/CK,EAAeP,EAASG,GACxBI,EAAeN,EAASG,GAExBJ,EAAQU,YAAYP,GAAkBD,GAAO5F,KAAK,CAAEqG,UAAWL,IAE/DL,EAAQS,YAAYN,GAAkBF,GAAO5F,KAAK,CAAEqG,UAAWN,KAEtDO,EAAuB,SAACpH,EAAyB0G,GAC1D1G,EAAMmB,SAAQ,SAACkG,EAAO5D,GAClB,GAAc,IAAVA,EAAJ,CACA,IAAI6D,EAAQtH,EAAMyD,EAAQ,GAC1B8C,EAA2Bc,EAAOC,EAAOZ,QAIpCa,EAAwB,SAACvH,GAElC,OAAOA,EAAMG,KAAI,SAACjB,GACd,IAAIsI,EAAO/I,EAAUS,GAWrB,OAVAsI,EAAKrI,cAAgBR,EACrBA,GAAgB,EAChB6I,EAAKnI,SAASN,GAAKyI,EAAKnI,SAASN,EAAI0I,IACnB,iBAAdD,EAAKpI,KACAoI,EAAKlI,UACLkI,EAAKlI,eAAYkD,EADDgF,EAAKlI,UAAY,EAGlCkI,EAAKlI,YAAcoC,IAAU6B,KAAMiE,EAAKlI,UAAYoC,IAAU4B,MACzDkE,EAAKlI,YAAcoC,IAAU4B,QAAOkE,EAAKlI,UAAYoC,IAAU6B,MAErEiE,MAGFE,EAAyB,SAAC1H,GAA2C,IAAlBjB,EAAiB,uDAAb,EAAGC,EAAU,uDAAN,EAEvEgB,EAAMmB,SAAQ,SAACjC,GACXA,EAAKG,SAAW,CACZN,EAAGG,EAAKG,SAASN,EAAIA,EACrBC,EAAGE,EAAKG,SAASL,EAAIA,OAIpB2I,EAAiB,SAAC3H,GAA2C,IAAlBjB,EAAiB,uDAAb,EAAGC,EAAU,uDAAN,EAE/D,OAAOgB,EAAMG,KAAI,SAACjB,GACd,IAAI0I,EAAwBnJ,EAAUS,GAOtC,OANA0I,EAAMzI,cAAgBR,EACtBA,GAAgB,EAChBiJ,EAAMvI,SAAW,CACbN,EAAG6I,EAAMvI,SAASN,EAAIA,EACtBC,EAAG4I,EAAMvI,SAASL,EAAIA,GAEnB4I,MAGFC,EAAW,SACpBC,EACAC,EACAC,GAEA,MAAkB,SAAdF,EACM,GAAN,mBAAWC,GAAX,YAAyBC,IACJ,SAAdF,EACAC,EACc,UAAdD,EACAE,GAEXC,QAAQC,OAAO,+BACR,KAEE/C,EAAkB,SAACnF,GAC5BA,EAAMmI,MAAK,SAACC,EAAGC,GAEX,OAAID,EAAE/I,SAASL,EAAIqJ,EAAEhJ,SAASL,GAClB,EACDoJ,EAAE/I,SAASL,EAAIqJ,EAAEhJ,SAASL,GAIjCoJ,EAAE/I,SAASN,EAAIsJ,EAAEhJ,SAASN,EAHnB,EAKAqJ,EAAE/I,SAASN,EAAIsJ,EAAEhJ,SAASN,GACzB,EAEL,O,iCCnyBf,4GAGMuJ,EAAO5J,EAAQ,IAER6J,EAAkB,SAAClI,GAmB5B,MAAI,CAAC,kBAAmB,qBAAqB0C,SAAS1C,EAAWmB,aACtDgH,YAAoBnI,GAE3B,CAAC,wBAAyB,2BAA2B0C,SAAS1C,EAAWmB,aAClEiH,YAAmBpI,GACQ,YAA3BA,EAAWmB,YACXkH,YAAcrI,GAElB,IAgCEsI,EAAwB,SAACC,GAElC,OAvBW,SAAC5I,GACZ,IAAI4I,EAAY,CACZA,UAAW,CACPC,MAAO,CACH,CACIC,OAAQ,CACJ1G,KAAM,OACNhD,KAAM,kBAEVqE,MAAO,IAGfsF,SAAU/I,EACVd,KAAM,YACN8J,QAAS,IACTC,MAAO,cAGf,MAAO,IAAMX,EAAKY,YAAYC,KAAKC,UAAUR,GAAY,CAAES,MAAO,IAAKC,SAAS,UAKzEC,CAAOX,M,4GCvCLJ,EAAsB,SAACnI,GAChCzB,cAMA,IALA,IAAI4K,EAA6B,GAC7BC,EAAmC,GAEnCC,EAAiBrJ,EAAWuB,kBAAoBvB,EAAWwB,yBAA2B,EAEjFR,EAAgB,EAAGA,EAAgBqI,EAAgBrI,IAAiB,CACzE,IAAMsI,GAAkBvJ,YAAcC,GAAYwE,OAAS,GAAKxD,EAE5DuI,EAAiC,GAEjCC,EAAcnG,YAAYrD,GAC1ByJ,EAAavC,YAAsBsC,GACnCE,EAASlC,YAASxH,EAAW2J,cAAeF,EAAYD,GAE5D1E,YAAgB0E,GAChB1E,YAAgB2E,GACZzJ,EAAW4J,6BACX7C,YAAqB0C,EAAY,SACjC1C,YAAqByC,EAAa,SAC9BxJ,EAAW6J,8BAA6D,SAA7B7J,EAAW2J,eACtDzD,YAA2BsD,EAAY,GAAIC,EAAW,GAAI,UAG9DzJ,EAAW8J,2BACX/C,YAAqB0C,EAAY,OACjC1C,YAAqByC,EAAa,OAC9BxJ,EAAW+J,4BAA2D,SAA7B/J,EAAW2J,eACpDzD,YAA2BsD,EAAY,GAAIC,EAAW,GAAI,QAKlE,IAAIO,EAAmC,GAEnCA,EAD2B,oBAA3BhK,EAAWmB,YACG,sBAAO6I,GAAP,YAA0BhG,YAAkBhE,KAG5C,sBAAOgK,GAAP,YAA0B9F,YAAoBlE,KAEhEgK,EAAc,sBAAOA,GAAP,YAA0BrH,YAAe3C,KAEvD,IAAIiK,EAAa5E,YAAWrF,GACxBkK,EAAYhD,YAAsB+C,GAClCE,EAAQ3C,YAASxH,EAAW2J,cAAeO,EAAWD,GACtDG,EAAkClD,YAAsB8C,GAK5D,GAFAA,EAAc,sBAAOA,GAAP,YAA0BC,GAA1B,YAAyCT,IACvDY,EAAa,sBAAOA,GAAP,YAAyBF,GAAzB,YAAuCT,IAChDzJ,EAAWqK,oBAAqB,CAChC,IAAIC,EAAahF,YAAWtF,GACxBuK,EAAYrD,YAAsBoD,GACtCN,EAAc,sBAAOA,GAAP,YAA0BM,IACxCF,EAAa,sBAAOA,GAAP,YAAyBG,IAI1ChB,EAAY,sBAAOA,GAAP,YAAwB1I,YAAiBb,KACrDuJ,EAAY,sBAAOA,GAAP,YAAwBxI,YAAaf,EAAYgB,KAC7D,IAAIwJ,EAAY9I,YAAe1B,GAAY,GAI3C,GAHAuJ,EAAY,sBAAOA,GAAP,CAAqBiB,IAC7BxK,EAAWyK,gBACXlB,EAAY,sBAAOA,GAAP,YAAwBxD,YAA8B/F,MAClEA,EAAWyK,eAAiBzK,EAAW4B,8BAA+B,CACtE,IAAI8I,EAAW7E,YAAoB7F,GAC/B2K,EAAc7E,YAAuB9F,GAEzC,GADAuJ,EAAY,sBAAOA,GAAP,YAAwBmB,GAAxB,YAAqCC,IAC7C3K,EAAW4B,8BAA+B,CAC1C,IAAIgJ,EAAUrF,YAAavF,GAAY,GAEvCkG,YAA2B0E,EAASJ,EAAW,QAAS,IAAK,KAE7D1F,YAAgB4E,GAChB5E,YAAgBqF,GAChB,IAAIU,EAAY,CAAID,EAASlB,EAAO,GAAIS,EAAM,IAA9B,mBAAqCO,IACrD5F,YAAgB+F,GAChB9D,YAAqB8D,EAAc,SACnCtB,EAAY,sBAAOA,GAAP,CAAqBqB,KAGrC5K,EAAW8K,0BACXvB,EAAY,sBAAOA,GAAP,YAAwBjH,YAAWtC,MASnD,IAAI+K,EAAe9F,YAAejF,GAClCqH,YAAuB0D,EAAc,EAAGzB,GACxCF,EAAc,sBAAOA,GAAP,YAA0B2B,IAGxCxB,EAAY,sBACLA,GADK,YAEL/B,YAASxH,EAAW2J,cAAeS,EAAeJ,KAIzD3C,YAAuBkC,EAAc,EAAGD,GACxCH,EAAQ,sBAAOA,GAAP,YAAoBI,IAIhC,GAAIvJ,EAAWuB,oBAAsBvB,EAAWgL,kCAAmC,CAC/ElG,YAAgBsE,GAChB,IACI,IAAI/I,EAAI,EACRA,EAAIC,SAASN,EAAWQ,YAAcF,SAASN,EAAWwB,0BAC1DnB,GAAKC,SAASN,EAAWQ,YAC3B,CACE,IAAIyK,EAAgB7B,EAAe8B,MAAM7K,EAAGA,EAAIC,SAASN,EAAWQ,aAChE2K,EAAqB1G,YAAmBzE,EAAYiL,GACpDG,EAAoBlE,YAAsBiE,GAC9ChC,EAAQ,sBACDA,GADC,YAED3B,YAASxH,EAAW2J,cAAeyB,EAAmBD,WAKhE,GAAqC,SAAjCnL,EAAW6E,kBAA8B,CAC9C,IAAIsG,EAAqB1G,YAAmBzE,EAAYoJ,GACpDgC,EAAoBlE,YAAsBiE,GAC9ChC,EAAQ,sBACDA,GADC,YAED3B,YAASxH,EAAW2J,cAAeyB,EAAmBD,KAIjE,IAAIE,EAAgBnE,YAAsBkC,GAItCkC,GAHJnC,EAAQ,sBAAOA,GAAP,YAAoB3B,YAASxH,EAAW2J,cAAe0B,EAAejC,MAGpDmC,QAAO,SAAC1M,GAC9B,MAAqB,eAAdA,EAAKE,QAEZyM,EAAcrC,EAASoC,QAAO,SAAC1M,GAC/B,MAAqB,gBAAdA,EAAKE,QAWhB,OATA+F,YAAgBwG,GAChBxG,YAAgB0G,GAChBF,EAAWJ,MAAM,GAAGpK,SAAQ,SAAC2K,EAAMpL,GAC/B,IAAIoI,EAAS+C,EAAYnL,GACzB6F,YAA2BuF,EAAMhD,EAAQ,YAI7CpB,YAAuB8B,GAAW,IAC3BA,I,oFC5JEf,EAAqB,SAACpI,GAC/BzB,cAKA,IAJA,IAAI4K,EAA6B,GAE7BE,EAAiBrJ,EAAWuB,kBAAoBvB,EAAWwB,yBAA2B,EAEjFR,EAAgB,EAAGA,EAAgBqI,EAAgBrI,IAAiB,CACzE,IAAMsI,GAAkBvJ,YAAcC,GAAYwE,OAAS,GAAKxD,EAE5DuI,EAAiC,GAGjCmC,EAAsCrH,YAAkBrE,GACxD2L,EAAqCzE,YAAsBwE,GAC/D5G,YAAgB4G,GAChB5G,YAAgB6G,GACZ3L,EAAW4J,6BACX7C,YAAqB4E,EAAkB,SACvC5E,YAAqB2E,EAAmB,UAExC1L,EAAW8J,2BACX/C,YAAqB4E,EAAkB,OACvC5E,YAAqB2E,EAAmB,QAI5C,IAAI1B,EAAmC,GAEnCC,EAAa5E,YAAWrF,GACxBkK,EAAYhD,YAAsB+C,GAClCE,EAAQ3C,YAASxH,EAAW4L,kBAAmB1B,EAAWD,GAC1DG,EAAkClD,YAAsB8C,GACxD6B,EAAa1H,YAAWnE,GACxB8L,EAAY5E,YAAsB2E,GAClCE,EAAazH,YAAWtE,GACxBgM,EAAY9E,YAAsB6E,GAItC,GAAI/L,EAAWqK,oBAAqB,CAChC,IAAIC,EAAahF,YAAWtF,GACxBuK,EAAYrD,YAAsBoD,GACtCN,EAAc,sBAAOA,GAAP,YAA0BM,IACxCF,EAAa,sBAAOA,GAAP,YAAyBG,IAE1CP,EAAc,sBAAOA,GAAP,YAA0BC,GAA1B,YAAyC4B,GAAzC,YAAwDE,IACtE3B,EAAa,sBAAOA,GAAP,YAAyBF,GAAzB,YAAuC4B,GAAvC,YAAqDE,IAGlEzC,EAAY,sBAAOA,GAAP,YAAwB1I,YAAiBb,KACrDuJ,EAAY,sBAAOA,GAAP,YAAwBxI,YAAaf,EAAYgB,KAC7D,IAAIwJ,EAAY9I,YAAe1B,GAAY,GAI3C,GAHAuJ,EAAY,sBAAOA,GAAP,CAAqBiB,IAC7BxK,EAAWyK,gBACXlB,EAAY,sBAAOA,GAAP,YAAwBxD,YAA8B/F,MAClEA,EAAWyK,eAAiBzK,EAAW4B,8BAA+B,CACtE,IAAI8I,EAAW7E,YAAoB7F,GAC/B2K,EAAc7E,YAAuB9F,GAEzC,GADAuJ,EAAY,sBAAOA,GAAP,YAAwBmB,GAAxB,YAAqCC,IAC7C3K,EAAW4B,8BAA+B,CAC1C,IAAIgJ,EAAUrF,YAAavF,GAAY,GAEvCkG,YAA2B0E,EAASJ,EAAW,QAAS,IAAK,KAG7D,IAAIyB,EAAezE,YACfxH,EAAW4L,kBACXD,EACAD,GAEJ5G,YAAgBmH,GAChBnH,YAAgBqF,GAChB,IAAIU,EAAY,CAAID,EAASqB,EAAa,GAAI9B,EAAM,IAApC,mBAA2CO,IAC3D5F,YAAgB+F,GAChB9D,YAAqB8D,EAAc,SACnCtB,EAAY,sBAAOA,GAAP,CAAqBqB,KAGrC5K,EAAW8K,0BACXvB,EAAY,sBAAOA,GAAP,YAAwBjH,YAAWtC,MAUnDuJ,EAAY,sBACLA,GADK,YAEL/B,YAASxH,EAAW4L,kBAAmBxB,EAAeJ,IAFjD,YAGLxC,YAASxH,EAAW4L,kBAAmBD,EAAkBD,KAIhErE,YAAuBkC,EAAc,EAAGD,GACxCH,EAAQ,sBAAOA,GAAP,YAAoBI,IAIhC,IAAI+B,EAAanC,EAASoC,QAAO,SAAC1M,GAC9B,MAAqB,eAAdA,EAAKE,QAEZyM,EAAcrC,EAASoC,QAAO,SAAC1M,GAC/B,MAAqB,gBAAdA,EAAKE,QAWhB,OATA+F,YAAgBwG,GAChBxG,YAAgB0G,GAChBF,EAAWJ,MAAM,GAAGpK,SAAQ,SAAC2K,EAAMpL,GAC/B,IAAIoI,EAAS+C,EAAYnL,GACzB6F,YAA2BuF,EAAMhD,EAAQ,YAI7CpB,YAAuB8B,GAAW,IAC3BA,I,2sBC7EC9H,E,OAjEC+F,GAAiB,EAEnB8E,EAAe,CACtB,kBACA,oBACA,wBACA,0BACA,WAGOC,EAAgB,CAAC,WAAY,gBAAiB,kBAC9CpJ,EAAkB,CACzBqJ,SAAU,kBACV,gBAAiB,kBACjB,iBAAkB,mBAUXC,EAAU,UARQ,CAAC,eAAgB,aAAc,eACjC,CACvB,2BACA,wBACA,kCACA,iCACA,2BAGOC,EAAkB,CACzB,eAAgB,eAChB,aAAc,aACd,cAAe,cACf,2BAA4B,kBAC5B,wBAAyB,eACzB,kCAAmC,yBACnC,iCAAkC,wBAClC,yBAA0B,iBAEjBC,EAAY,CACrB,iBACA,sBACA,0BAEOC,EAAiB,CACxB,iBAAkB,cAClB,sBAAuB,WACvB,yBAA0B,aAEnBrH,EAAgB,CACvB,iBAAkB,WAClB,sBAAuB,gBACvB,yBAA0B,oBAEnBsH,EAAY,CAAC,OAAQ,QAAS,QAC9BC,EAAY,CAAC,QAAS,QACtBC,EAAqB,CAAC,QAAS,OAAQ,QACvCC,EAAkB,CAAC,OAAQ,OAAQ,aAAc,cAAe,gBAChEC,EAAuB,CAC9BC,KAAM,OACNC,KAAM,OACN,aAAc,aACd,cAAe,cACf,eAAgB,gBAGTC,EAAuB,CAAC,aAAc,cACtCC,EAAY,CAAI,YAAa,eAAjB,OAAmCD,I,SAE9C3L,O,WAAAA,I,iBAAAA,I,eAAAA,I,gBAAAA,M,KAOL,IAAI6L,EAA4B,CAAC,IAAK,KAClCC,EAAiC,CAAE,IAAK,gBAAiB,IAAK,iBAE9DC,EAAkB,CAEzBjM,YAAa,UAAI+K,GAAc,GAC/B9J,YAAa,GACbC,WAAY,GAGZd,mBAAmB,EACnBC,yBAA0B,IAC1BwJ,mCAAmC,EAGnC5K,cAAc,EACdG,kBAAmB,IACnBC,WAAY,IACZsK,yBAAyB,EAGzBc,kBAAmB,UAAIc,GAAW,GAClCW,qBAAqB,EAGrBxK,aAAc,UAAIsJ,GAAe,GACjCrJ,uBAAuB,EAEvBK,aAAcmK,MAAM,GAAGC,KAAK,IAG5BhK,UAAW,YAAI8I,GAAY,GAE3BtI,WAAY,IAEZD,yBAAyB,EACzBL,sBAAuB6J,MAAM,IAAIC,KAAK,IACtC3J,wBAAyB0J,MAAM,IAAIC,KAAK,IAGxCC,cAAc,EACdvJ,SAAU,UAAIsI,GAAW,GACzB5C,cAAe,UAAI8C,GAAW,GAC9B5H,kBAAmB,UAAI8H,GAAoB,GAG3ClC,eAAe,EACfzE,eAAgB,UAAI4G,GAAiB,GACrC3G,iBAAkB,KAGlB2D,4BAA4B,EAC5BC,8BAA8B,EAC9BC,0BAA0B,EAC1BC,4BAA4B,EAG5BnI,+BAA+B,EAC/B8D,yBAA0B,UAAIwH,GAA2B,GACzDzH,uBAAwB,OAGxB4E,qBAAqB,EAGrBoD,2BAA4B,IAC5BC,iBAAiB,EACjBC,YAAa,YAAIV,GAAc,K,oFCxItBW,EAAgD,CACzD,CACI7O,KAAM,cACNC,SAAU,CACNN,EAAG,EACHC,EAAG,IAGX,CACII,KAAM,gBACNC,SAAU,CACNN,GAAI,EACJC,GAAI,GAERM,UAAW,GAEf,CACIF,KAAM,cACNC,SAAU,CACNN,GAAI,EACJC,GAAI,GAERM,UAAW,GAEf,CACIF,KAAM,gBACNC,SAAU,CACNN,GAAI,GACJC,GAAI,GAERM,UAAW,GAEf,CACIF,KAAM,gBACNC,SAAU,CACNN,GAAI,GACJC,GAAI,GAERM,UAAW,IAIN4O,EAAiD,CAC1D,CACI9O,KAAM,cACNC,SAAU,CACNN,EAAG,EACHC,EAAG,GAEPM,UAAW,GAEf,CACIF,KAAM,gBACNC,SAAU,CACNN,EAAG,EACHC,GAAI,GAERM,UAAW,GAEf,CACIF,KAAM,cACNC,SAAU,CACNN,EAAG,EACHC,GAAI,GAERM,UAAW,GAEf,CACIF,KAAM,gBACNC,SAAU,CACNN,EAAG,GACHC,GAAI,GAERM,UAAW,GAEf,CACIF,KAAM,gBACNC,SAAU,CACNN,EAAG,GACHC,GAAI,GAERM,UAAW,IAIN6O,EAA+C,CACxD,CACI/O,KAAM,cACNC,SAAU,CACNN,EAAG,EACHC,EAAG,GAEPM,UAAW,GAEf,CACIF,KAAM,gBACNC,SAAU,CACNN,GAAI,EACJC,EAAG,GAEPM,UAAW,GAEf,CACIF,KAAM,cACNC,SAAU,CACNN,GAAI,EACJC,EAAG,IAEPM,UAAW,GAEf,CACIF,KAAM,gBACNC,SAAU,CACNN,GAAI,GACJC,EAAG,IAEPM,UAAW,GAEf,CACIF,KAAM,gBACNC,SAAU,CACNN,GAAI,GACJC,EAAG,IAEPM,UAAW,IAIN8O,EAAgD,CACzD,CACIhP,KAAM,cACNC,SAAU,CACNN,EAAG,EACHC,EAAG,GAEPM,UAAW,GAEf,CACIF,KAAM,gBACNC,SAAU,CACNN,EAAG,EACHC,EAAG,GAEPM,UAAW,GAEf,CACIF,KAAM,cACNC,SAAU,CACNN,EAAG,EACHC,EAAG,IAEPM,UAAW,GAEf,CACIF,KAAM,gBACNC,SAAU,CACNN,EAAG,GACHC,EAAG,IAEPM,UAAW,GAEf,CACIF,KAAM,gBACNC,SAAU,CACNN,EAAG,GACHC,EAAG,IAEPM,UAAW,ICtKN+O,EAAwD,CACjE,CACIjP,KAAM,cACNC,SAAU,CACNN,EAAG,EACHC,EAAG,GAEPM,UAAW,GAEf,CACIF,KAAM,gBACNC,SAAU,CACNN,GAAI,EACJC,GAAI,GAERM,UAAW,GAEf,CACIF,KAAM,gBACNC,SAAU,CACNN,GAAI,EACJC,GAAI,GAERM,UAAW,GAEf,CACIF,KAAM,oBACNC,SAAU,CACNN,GAAI,IACJC,EAAG,KAEPM,UAAW,IAKNgP,EAAyD,CAClE,CACIlP,KAAM,gBACNC,SAAU,CACNN,GAAI,EACJC,EAAG,GAEPM,UAAW,GAEf,CACIF,KAAM,cACNC,SAAU,CACNN,EAAG,EACHC,EAAG,GAEPM,UAAW,GAEf,CACIF,KAAM,gBACNC,SAAU,CACNN,EAAG,EACHC,GAAI,GAERM,UAAW,GAEf,CACIF,KAAM,gBACNC,SAAU,CACNN,EAAG,EACHC,GAAI,GAERM,UAAW,GAEf,CACIF,KAAM,oBACNC,SAAU,CACNN,GAAI,GACJC,EAAG,KAEPM,UAAW,IAINiP,EAAuD,CAChE,CACInP,KAAM,gBACNC,SAAU,CACNN,GAAG,GACHC,EAAG,GAEPM,UAAW,GAEf,CACIF,KAAM,gBACNC,SAAU,CACNN,GAAG,GACHC,EAAG,GAEPM,UAAW,GAEf,CACIF,KAAM,cACNC,SAAU,CACNN,GAAI,EACJC,EAAG,GAEPM,UAAW,GAEf,CACIF,KAAM,gBACNC,SAAU,CACNN,GAAI,EACJC,EAAG,GAEPM,UAAW,GAEf,CACIF,KAAM,cACNC,SAAU,CACNN,GAAG,IACHC,EAAG,KAEPM,UAAW,IAINkP,EAAwD,CACjE,CACIpP,KAAM,gBACNC,SAAU,CACNN,GAAG,EACHC,EAAG,GAEPM,UAAW,GAEf,CACIF,KAAM,gBACNC,SAAU,CACNN,GAAG,EACHC,EAAG,IAEPM,UAAW,GAEf,CACIF,KAAM,cACNC,SAAU,CACNN,GAAI,EACJC,EAAG,GAEPM,UAAW,GAEf,CACIF,KAAM,cACNC,SAAU,CACNN,GAAI,IACJC,EAAG,KAEPM,UAAW,ICpINoJ,EAAgB,SAACrI,GAE1B,OADAzB,cACIyB,EAAW0N,gBACJU,EAAsBpO,GAEtBqO,EAAsBrO,IAIxBqO,EAAwB,SAACrO,GAClC,IAEIsO,EACAC,EAHAC,EAAiE,EAAnDC,KAAKC,MAAM3O,YAAcC,GAAYwE,OAAS,GAK5D8J,EAD2B,cAA3BtO,EAAW2N,aAA0D,eAA3B3N,EAAW2N,YACxCjO,YAA0BkO,GAAiB,GAAI,GAE/ClO,YAA0BmO,GAAkB,GAAI,GAI7DU,EAD2B,cAA3BvO,EAAW2N,aAA0D,eAA3B3N,EAAW2N,YACzCjO,YAA0BoO,GAAgB,EAAGU,EAAc,GAE3D9O,YAA0BqO,GAAiB,EAAGS,EAAc,GAG5E,IAAIG,EAAkB,sBACf9N,YAAiBb,IADF,YAEfe,YAAaf,EAAY,IAFV,YAGfsO,GAHe,YAIfC,IAEHvO,EAAW8K,0BACX6D,EAAkB,sBAAOA,GAAP,YAA8BrM,YAAWtC,MAC/DqH,YAAuBsH,GAAqB,IAG5C,IADA,IAAIxF,EAA6B,GACxB9I,EAAI,EAAGA,EAAIC,SAASN,EAAWyN,4BAA6BpN,IACjE8I,EAAQ,sBAAOA,GAAP,YAAoB7B,YAAeqH,EAAwB,EAAJtO,KAGnE,OAAO8I,GAGEiF,EAAwB,SAACpO,GAClC,IAWIsO,EACAC,EAZAK,EAAqB5O,EAAWI,aAAe,EAAI,EACnDyO,EAOI,EANJJ,KAAKK,MACA,KACIF,EAAqBtO,SAASN,EAAWO,mBACtCD,SAASN,EAAWQ,aACxB,GAGR,EAI2B,eAA3BR,EAAW2N,aACXW,EAAa5O,YAA0BsO,EAAwB,GAC/DO,EAAY7O,YACRyO,EACA,EAAqB,EAAjBU,EACa,EAAjBA,KAGJP,EAAa5O,YAA0BuO,EAAyB,GAChEM,EAAY7O,YACRwO,EACA,EAAqB,EAAjBW,EACa,EAAjBA,IAmBR,IAdA,IAAIE,EAA2C,CAC3C,CACIhQ,KAAM,gBACNC,SAAU,CAAEN,EAAG,EAAGC,EAAG,GACrBM,UAAW,GAEf,CACIF,KAAM,gBACNC,SAAU,CAAEN,EAAG,EAAGC,EAAG,GACrBM,UAAW,IAIf0P,EAAuC,GAClCtO,EAAI,EAAGA,EAAIwO,EAAgBxO,IAAK,CACrC,IAAI2O,EAAetP,YAA0BqP,EAAgB,GAAJ1O,EAAW,EAAJA,GAChEsO,EAAkB,sBAAOA,GAAP,YAA8BK,IAEpDL,EAAkB,sBAAOA,GAAP,YAA8BL,GAA9B,YAA6CC,IAI/D,IAFA,IAAIpF,EAA6B,GAExB9I,EAAI,EAAGA,EAAIC,SAASN,EAAWyN,4BAA6BpN,IAE7D8I,EAD2B,eAA3BnJ,EAAW2N,YACH,sBAAOxE,GAAP,YAAoB7B,YAAeqH,EAAwB,EAAJtO,KAEvD,sBAAO8I,GAAP,YAAoB7B,YAAeqH,EAAoB,EAAO,EAAJtO,KAG1E,OAAO8I,I,gMCjIA8F,EAEA,yDAFAA,EAKK,uBALLA,EAMM,4BANNA,EASE,uDATFA,EAUM,yBAVNA,EAaU,2BAbVA,EAcO,oBAdPA,EAeW,qEAfXA,EAgBQ,qEAhBRA,EAiBQ,iFAjBRA,EAmBQ,qCCfJ,SAASC,EAAkBC,GACtC,IAAIC,EACmC,YAAnCD,EAAME,aAAalO,aAA6BgO,EAAME,aAAa3B,gBACvE,OACI,qBAAK4B,UAAWL,EAAhB,SACI,sBAAKK,UAAWL,EAAhB,UACI,uBACIK,UAAWL,EACXlN,KAAM,WACNwN,IAAK,IACLC,GAAI,eACJC,QAASN,EAAME,aAAajP,aAC5BsP,SAAU,SAACC,GACPR,EAAMS,gBAAN,2BACOT,EAAME,cADb,IAEIjP,aAAcuP,EAAEE,OAAOJ,cAInC,uBAAOH,UAAWL,EAAsBa,QAAS,eAAjD,2BAGA,uBACIR,UAAWL,EACXlN,KAAM,SACNwN,IAAK,IACLC,GAAI,oBACJO,MAAOZ,EAAME,aAAa9O,kBAC1BmP,SAAU,SAACC,GACPR,EAAMS,gBAAN,2BACOT,EAAME,cADb,IAEI9O,kBAAmBoP,EAAEE,OAAOE,YAIxC,uBAAOT,UAAWL,EAAsBa,QAAS,oBAAjD,mCAGA,uBACIR,UAAWL,EACXlN,KAAM,SACNyN,GAAI,aACJO,MAAOZ,EAAME,aAAa7O,WAC1BkP,SAAU,SAACC,GACPR,EAAMS,gBAAN,2BAA2BT,EAAME,cAAjC,IAA+C7O,WAAYmP,EAAEE,OAAOE,YAG5E,uBAAOT,UAAWL,EAAsBa,QAAS,aAAjD,4BAGA,uBACIR,UAAWL,EACXe,OAAQZ,EACRrN,KAAM,WACNyN,GAAI,0BACJC,QAASN,EAAME,aAAavE,wBAC5B4E,SAAU,SAACC,GACPR,EAAMS,gBAAN,2BACOT,EAAME,cADb,IAEIvE,wBAAyB6E,EAAEE,OAAOJ,cAI9C,uBACIH,UAAWL,EACXe,OAAQZ,EACRU,QAAS,0BAHb,6C,kBC9DD,SAASG,EAAiBd,GAErC,IAAIe,EACA,wBACIV,GAAI,eACJF,UAAWL,EACXc,MAAOZ,EAAME,aAAaxM,aAC1B6M,SAAU,SAACC,GAEPR,EAAMS,gBAAN,2BAA2BT,EAAME,cAAjC,IAA+CxM,aAAc8M,EAAEE,OAAOE,UAN9E,SASK5D,IAAcrM,KAAI,SAAC+C,GAChB,OACI,wBACIyM,UAAWL,EAEXc,MAAOlN,EAHX,SAKKA,GAHIA,QAsBrBsN,EAAmBhB,EAAME,aAAavM,sBAEtCsN,EAAsB,SAAChN,GACvB,OACI,uBAEIkM,UAAWL,EACXe,QAASG,EACTJ,MAAOZ,EAAME,aAAalM,aAAaC,GACvCiN,YACc,IAAVjN,EAAc,6BAAd,iBAAuDA,EAAQ,EAA/D,cAEJsM,SAAU,SAACC,IAxBD,SAACW,EAAoBC,EAAkBnN,GACzD+L,EAAMS,gBAAN,2BACOT,EAAME,cADb,IAGIlM,aAAa,GAAD,mBACLgM,EAAME,aAAalM,aAAa+H,MAAM,EAAG9H,IADpC,CAERmN,GAFQ,YAGLpB,EAAME,aAAalM,aAAa+H,MAAM9H,EAAQ,QAkB7CoN,CAAgBrB,EAAME,aAAalM,aAAcwM,EAAEE,OAAOE,MAAO3M,KATzE,UACYA,KAehBqN,GAAmB,EACnBC,EAA4B,IAAIpD,MAAM,GAAGC,KAAK,GAAGzN,KAAI,SAAC6Q,EAAGvN,GACzD,MAAyB,IAArBqN,GAA0BA,EAAkBrN,GAMhD,MAH+C,KAA3C+L,EAAME,aAAalM,aAAaC,KAChCqN,EAAkBrN,GAEfgN,EAAoBhN,MAG/B,OACI,qBAAKkM,UAAWL,EAAhB,SACI,sBAAKK,UAAWL,EAAhB,UACKiB,EACD,uBAAOZ,UAAWL,EAAsBa,QAAS,eAAjD,2BAGA,uBACIR,UAAWL,EACXO,GAAI,wBACJzN,KAAM,WACN0N,QAASN,EAAME,aAAavM,sBAC5B4M,SAAU,SAACC,GACPR,EAAMS,gBAAN,2BACOT,EAAME,cADb,IAEIvM,sBAAuB6M,EAAEE,OAAOJ,cAI5C,uBAAOH,UAAWL,EAAsBa,QAAS,wBAAjD,sCAGCY,OC5FF,SAASE,EAA0BzB,GAC9C,OACI,qBAAKG,UAAWL,EAAhB,SACI,sBAAKK,UAAWL,EAAhB,UACI,uBACIK,UAAWL,EACXlN,KAAM,WACNyN,GAAI,oBACJC,QAASN,EAAME,aAAa9N,kBAC5BmO,SAAU,SAACC,GACPR,EAAMS,gBAAN,2BACOT,EAAME,cADb,IAEI9N,kBAAmBoO,EAAEE,OAAOJ,cAKxC,uBAAOH,UAAWL,EAAsBa,QAAS,oBAAjD,iCAGA,uBACIR,UAAWL,EACXe,QAASb,EAAME,aAAa9N,kBAC5BQ,KAAM,SACNyN,GAAI,2BACJO,MAAOZ,EAAME,aAAa7N,yBAC1BkO,SAAU,SAACC,GACPR,EAAMS,gBAAN,2BACOT,EAAME,cADb,IAEI7N,yBAA0BmO,EAAEE,OAAOE,YAI/C,uBACIT,UAAWL,EACXe,QAASb,EAAME,aAAa9N,kBAC5BuO,QAAS,2BAHb,4CAOA,uBACIR,UAAWL,EACXe,QAASb,EAAME,aAAa9N,kBAC5BQ,KAAM,WACNyN,GAAI,oCACJC,QAASN,EAAME,aAAarE,kCAC5B0E,SAAU,SAACC,GACPR,EAAMS,gBAAN,2BACOT,EAAME,cADb,IAEIrE,kCAAmC2E,EAAEE,OAAOJ,cAIxD,uBACIH,UAAWL,EACXe,QAASb,EAAME,aAAa9N,kBAC5BuO,QAAS,oCAHb,uCCpDD,SAASe,EAAkB1B,GACtC,IAAI2B,EACA,wBACItB,GAAI,aACJF,UAAWL,EACXc,MAAOZ,EAAME,aAAa9L,UAC1BmM,SAAU,SAACC,GAEPR,EAAMS,gBAAN,2BAA2BT,EAAME,cAAjC,IAA+C9L,UAAWoM,EAAEE,OAAOE,UAN3E,SASK1D,IAAWvM,KAAI,SAACyD,GACb,OACI,wBAAQ+L,UAAWL,EAAuCc,MAAOxM,EAAjE,SACK+I,IAAgB/I,IAD0BA,QAQ3DD,EAAmB,CAAC,2BAA4B,yBAAyBZ,SACzEyM,EAAME,aAAa9L,WAEnBwN,EAA8D,6BAAjC5B,EAAME,aAAa9L,UAEhDkN,GAAmB,EACnBO,EAAgB,IAAI1D,MAAM,IAAIC,KAAK,GAAGzN,KAAI,SAAC6Q,EAAGtQ,GAC9C,IAAI+C,EAAQqL,KAAKC,MAAMrO,EAAI,GAC3B,MAAyB,IAArBoQ,GAA0BA,EAAkBrN,GAMhD,MAHwD,KAApD+L,EAAME,aAAa5L,sBAAsBL,KACzCqN,EAAkBrN,GAElB/C,EAAI,IAAM,EAEN,uBACIiP,UAAWL,EACXe,QAAS1M,EAETvB,KAAM,OACNgO,MAAOZ,EAAME,aAAa5L,sBAAsBL,GAChDiN,YAAW,kBAAajN,EAAQ,EAArB,cACXsM,SAAU,SAACC,GACPR,EAAMS,gBAAN,2BACOT,EAAME,cADb,IAEI5L,sBAAsB,GAAD,mBACd0L,EAAME,aAAa5L,sBAAsByH,MAAM,EAAG9H,IADpC,CAEjBuM,EAAEE,OAAOE,OAFQ,YAGdZ,EAAME,aAAa5L,sBAAsByH,MAAM9H,EAAQ,UAb1E,UAGYA,EAHZ,2BAqBA,uBACIkM,UAAWL,EACXe,QAAS1M,EAETvB,KAAM,SACNwN,IAAK,IACLQ,MAAOZ,EAAME,aAAazL,wBAAwBR,GAClDiN,YAAW,kBAAajN,EAAQ,EAArB,WACXsM,SAAU,SAACC,GACPR,EAAMS,gBAAN,2BACOT,EAAME,cADb,IAEIzL,wBAAwB,GAAD,mBAChBuL,EAAME,aAAazL,wBAAwBsH,MAAM,EAAG9H,IADpC,CAEnBuM,EAAEE,OAAOE,OAFU,YAGhBZ,EAAME,aAAazL,wBAAwBsH,MAAM9H,EAAQ,UAd5E,UAGYA,EAHZ,gCAuBZ,OACI,qBAAKkM,UAAWL,EAAhB,SACI,sBAAKK,UAAWL,EAAhB,UACK6B,EACD,uBAAOxB,UAAWL,EAAsBa,QAAS,aAAjD,wBAGA,uBACIR,UAAWL,EACXlN,KAAM,SACNgO,MAAOZ,EAAME,aAAatL,WAC1B2L,SAAU,SAACC,GACPR,EAAMS,gBAAN,2BACOT,EAAME,cADb,IAEItL,WAAY4L,EAAEE,OAAOE,YAIjC,uBAAOT,UAAWL,EAAsBa,QAAS,aAAjD,yBAIA,uBACIR,UAAWL,EACXe,QAASe,EACTvB,GAAI,qBACJzN,KAAM,WACN0N,QAASN,EAAME,aAAavL,wBAC5B4L,SAAU,SAACC,GACPR,EAAMS,gBAAN,2BACOT,EAAME,cADb,IAEIvL,wBAAyB6L,EAAEE,OAAOJ,cAI9C,uBACIH,UAAWL,EACXe,QAASe,EACTjB,QAAS,qBAHb,kCAOCkB,OC3HF,SAASC,EAAiB9B,GACrC,IAAI+B,EACA,wBACI1B,GAAI,WACJF,UAAWL,EACXc,MAAOZ,EAAME,aAAapL,SAC1ByL,SAAU,SAACC,GAEPR,EAAMS,gBAAN,2BAA2BT,EAAME,cAAjC,IAA+CpL,SAAU0L,EAAEE,OAAOE,UAN1E,SASKxD,IAAUzM,KAAI,SAACmE,GACZ,OACI,wBAAQqL,UAAWL,EAAsCc,MAAO9L,EAAhE,SACKuI,IAAevI,IAD2BA,QAQ3DkN,EACA,wBACI3B,GAAI,YACJF,UAAWL,EACXc,MAAOZ,EAAME,aAAa1F,cAC1B+F,SAAU,SAACC,GAEPR,EAAMS,gBAAN,2BAA2BT,EAAME,cAAjC,IAA+C1F,cAAegG,EAAEE,OAAOE,UAN/E,SASKtD,IAAU3M,KAAI,SAACsR,GACZ,OACI,wBAAQ9B,UAAWL,EAAsCc,MAAOqB,EAAhE,SACKA,GAD0CA,QAO3DC,EACA,wBACI7B,GAAI,WACJF,UAAWL,EACXc,MAAOZ,EAAME,aAAaxK,kBAC1B6K,SAAU,SAACC,GAEPR,EAAMS,gBAAN,2BAA2BT,EAAME,cAAjC,IAA+CxK,kBAAmB8K,EAAEE,OAAOE,UANnF,SASKpD,IAAmB7M,KAAI,SAACwR,GACrB,OACI,wBAAQhC,UAAWL,EAAsCc,MAAOuB,EAAhE,SACKA,GAD0CA,QAQ/D,OACI,qBAAKhC,UAAWL,EAAhB,SACI,sBAAKK,UAAWL,EAAhB,UACI,uBACIK,UAAWL,EACXlN,KAAM,WACNyN,GAAI,cACJC,QAASN,EAAME,aAAa7B,aAC5BkC,SAAU,SAACC,GACPR,EAAMS,gBAAN,2BACOT,EAAME,cADb,IAEI7B,aAAcmC,EAAEE,OAAOJ,cAInC,uBAAOH,UAAWL,EAAsBa,QAAS,cAAjD,0BAGCoB,EACD,uBAAO5B,UAAWL,EAAsBa,QAAS,WAAjD,uBAGCqB,EACD,uBAAO7B,UAAWL,EAAsBa,QAAS,YAAjD,8BAGCuB,EACD,uBAAO/B,UAAWL,EAAsBa,QAAS,WAAjD,4BCvFD,SAASyB,EAAepC,GACnC,IAAIqC,EACA,wBACIlC,UAAWL,EACXe,QAASb,EAAME,aAAa5E,cAC5BsF,MAAOZ,EAAME,aAAarJ,eAC1B0J,SAAU,SAACC,GACPR,EAAMS,gBAAN,2BACOT,EAAME,cADb,IAGIrJ,eAAgB2J,EAAEE,OAAOE,UARrC,SAYKnD,IAAgB9M,KAAI,SAAC2R,GAClB,OACI,wBAAQnC,UAAWL,EAAsCc,MAAO0B,EAAhE,SACK5E,IAAqB4E,IADqBA,QAQ/D,OACI,qBAAKnC,UAAWL,EAAhB,SACI,sBAAKK,UAAWL,EAAhB,UACI,uBACIK,UAAWL,EACXlN,KAAM,WACNyN,GAAI,gBACJC,QAASN,EAAME,aAAa5E,cAC5BiF,SAAU,SAACC,GACPR,EAAMS,gBAAN,2BACOT,EAAME,cADb,IAEI5E,cAAekF,EAAEE,OAAOJ,cAIpC,uBAAOH,UAAWL,EAAsBa,QAAS,gBAAjD,qCAGC0B,EACD,uBACIlC,UAAWL,EACXe,QAASb,EAAME,aAAa5E,cAC5BqF,QAAS,YAHb,uBAOA,uBACI/N,KAAM,SACNuN,UAAWL,EACXe,QAASb,EAAME,aAAa5E,cAC5BsF,MAAOZ,EAAME,aAAapJ,iBAC1ByJ,SAAU,SAACC,GACPR,EAAMS,gBAAN,2BACOT,EAAME,cADb,IAEIpJ,iBAAkB0J,EAAEE,OAAOE,YAIvC,uBACIT,UAAWL,EACXe,QAASb,EAAME,aAAa5E,cAC5BqF,QAAS,aAHb,yB,YC/DD,SAAS4B,EAAavC,GACjC,IAEIwC,EAFc,CAAC,kBAAmB,qBAEIjP,SAASyM,EAAME,aAAalO,aAClEyQ,EAFa,CAAC,wBAAyB,2BAEHlP,SAASyM,EAAME,aAAalO,aAChE0Q,EAA8D,SAArC1C,EAAME,aAAa1F,cAE5CmI,EAAa,SACbC,GAME,IADF/B,EACC,wDACD,OACI,uBACIV,UAAWL,EACXe,OAAQA,EAERjO,KAAM,WACNyN,GAAIuC,EACJtC,QAASN,EAAME,aAAa0C,GAC5BrC,SAAU,SAACC,GACPR,EAAMS,gBAAN,2BACOT,EAAME,cADb,kBAEK0C,EAAUpC,EAAEE,OAAOJ,aAPvBsC,IAcjB,OACI,qBAAKzC,UAAWL,EAAhB,SACI,sBAAKK,UAAWL,EAAhB,UACK6C,EAAW,8BACZ,uBACIxC,UAAWL,EACXe,OAAQ4B,EACR9B,QAAS,6BAHb,6CAOA,uBACIR,UAAWL,EACXe,OAAQ2B,EACR7B,QAAS,6BAHb,oDAOCgC,EACG,+BACAF,GAA0BC,GAE9B,uBACIvC,UAAWL,EACXe,OAAQ4B,GAA0BC,EAClC/B,QAAS,+BAHb,0DAOCgC,EAAW,4BACZ,uBACIxC,UAAWL,EACXe,OAAQ4B,EACR9B,QAAS,2BAHb,2CAOA,uBACIR,UAAWL,EACXe,OAAQ2B,EACR7B,QAAS,6BAHb,kDAOCgC,EACG,6BACAF,GAA0BC,GAE9B,uBACIvC,UAAWL,EACXe,OAAQ4B,GAA0BC,EAClC/B,QAAS,6BAHb,6DC7ED,SAASkC,EAAyB7C,GAC7C,IAAI8C,EACA,wBACI3C,UAAWL,EACXc,MAAOZ,EAAME,aAAa3J,yBAC1BgK,SAAU,SAACC,GACPR,EAAMS,gBAAN,2BACOT,EAAME,cADb,IAGI3J,yBAA0BiK,EAAEE,OAAOE,UAP/C,SAWK7C,IAA0BpN,KAAI,SAACoS,GAC5B,OACI,wBAAQ5C,UAAWL,EAAsCc,MAAOmC,EAAhE,SACK/E,IAA+B+E,IADWA,QAQ/D,OACI,qBAAK5C,UAAWL,EAAhB,SACI,sBAAKK,UAAWL,EAAhB,UACI,uBACIK,UAAWL,EACXlN,KAAM,WACNyN,GAAI,gCACJC,QAASN,EAAME,aAAazN,8BAC5B8N,SAAU,SAACC,GACPR,EAAMS,gBAAN,2BACOT,EAAME,cADb,IAEIzN,8BAA+B+N,EAAEE,OAAOJ,cAIpD,uBAAOH,UAAWL,EAAsBa,QAAS,gCAAjD,kDAGCmC,EAED,uBACIlQ,KAAM,SACNuN,UAAWL,EACXoB,YAAa,kBACbN,MAAOZ,EAAME,aAAa5J,uBAC1BiK,SAAU,SAACC,GACPR,EAAMS,gBAAN,2BACOT,EAAME,cADb,IAEI5J,uBAAwBkK,EAAEE,OAAOE,iBCvD9C,SAASoC,EAAchD,GAClC,OACI,qBAAKG,UAAWL,EAAhB,SACI,sBAAKK,UAAWL,EAAhB,UACI,uBACIK,UAAWL,EACXlN,KAAM,WACNyN,GAAI,sBACJC,QAASN,EAAME,aAAahF,oBAC5BqF,SAAU,SAACC,GACPR,EAAMS,gBAAN,2BACOT,EAAME,cADb,IAEIhF,oBAAqBsF,EAAEE,OAAOJ,cAI1C,uBAAOH,UAAWL,EAAsBa,QAAS,sBAAjD,0CChBD,SAASsC,EAAoBjD,GACxC,OACI,8BACI,sBAAKG,UAAWL,EAAhB,UACI,uBACIK,UAAWL,EACXlN,KAAM,OACNsO,YAAa,eACbN,MAAOZ,EAAME,aAAajN,YAC1BsN,SAAU,SAACC,GACPR,EAAMS,gBAAN,2BACOT,EAAME,cADb,IAEIjN,YAAauN,EAAEE,OAAOE,YAIlC,uBACIT,UAAWL,EACXlN,KAAM,SACNsO,YAAa,cACbN,MAAOZ,EAAME,aAAahN,WAC1BkN,IAAK,KACLG,SAAU,SAACC,GACPR,EAAMS,gBAAN,2BACOT,EAAME,cADb,IAEIhN,WAAYsN,EAAEE,OAAOE,iBChBlC,SAASsC,EAAclD,GAClC,OACI,qBAAKG,UAAW,gBAAhB,SACI,sBAAKA,UAAW,0CAAhB,UACI,gCACI,cAAC8C,EAAD,CACI/C,aAAcF,EAAME,aACpBO,gBAAiBT,EAAMS,kBAE3B,cAACgB,EAAD,CACIvB,aAAcF,EAAME,aACpBO,gBAAiBT,EAAMS,kBAE3B,cAACV,EAAD,CACIG,aAAcF,EAAME,aACpBO,gBAAiBT,EAAMS,kBAE3B,cAACK,EAAD,CACIZ,aAAcF,EAAME,aACpBO,gBAAiBT,EAAMS,kBAG3B,cAACiB,EAAD,CACIxB,aAAcF,EAAME,aACpBO,gBAAiBT,EAAMS,qBAG/B,gCACI,cAACqB,EAAD,CACI5B,aAAcF,EAAME,aACpBO,gBAAiBT,EAAMS,kBAG3B,cAAC2B,EAAD,CACIlC,aAAcF,EAAME,aACpBO,gBAAiBT,EAAMS,kBAE3B,cAAC8B,EAAD,CACIrC,aAAcF,EAAME,aACpBO,gBAAiBT,EAAMS,kBAE3B,cAACoC,EAAD,CACI3C,aAAcF,EAAME,aACpBO,gBAAiBT,EAAMS,kBAE3B,cAACuC,EAAD,CACI9C,aAAcF,EAAME,aACpBO,gBAAiBT,EAAMS,0BCvDhC,SAAS0C,EAAcnD,GAClC,IAAIoD,EACA,wBACI/C,GAAI,YACJF,UAAWL,EACXc,MAAOZ,EAAME,aAAazD,kBAC1B8D,SAAU,SAACC,GAEPR,EAAMS,gBAAN,2BAA2BT,EAAME,cAAjC,IAA+CzD,kBAAmB+D,EAAEE,OAAOE,UANnF,SASKrD,IAAU5M,KAAI,SAAC0S,GACZ,OACI,wBAAQlD,UAAWL,EAAsCc,MAAOyC,EAAhE,SACKA,GAD0CA,QAQ/D,OACI,qBAAKlD,UAAWL,EAAhB,SACI,sBAAKK,UAAWL,EAAhB,UACKsD,EACD,uBAAOjD,UAAWL,EAAsBa,QAAS,YAAjD,8BAGA,uBACIR,UAAWL,EACXlN,KAAM,WACNyN,GAAI,eACJC,QAASN,EAAME,aAAahC,oBAC5BqC,SAAU,SAACC,GACPR,EAAMS,gBAAN,2BACOT,EAAME,cADb,IAEIhC,oBAAqBsC,EAAEE,OAAOJ,cAI1C,uBAAOH,UAAWL,EAAsBa,QAAS,eAAjD,0CCnCD,SAAS2C,EAAatD,GACjC,OACI,qBAAKG,UAAW,gBAAhB,SACI,sBAAKA,UAAW,0CAAhB,UACI,gCACI,cAAC8C,EAAD,CACI/C,aAAcF,EAAME,aACpBO,gBAAiBT,EAAMS,kBAE3B,cAACV,EAAD,CACIG,aAAcF,EAAME,aACpBO,gBAAiBT,EAAMS,kBAE3B,cAAC0C,EAAD,CACIjD,aAAcF,EAAME,aACpBO,gBAAiBT,EAAMS,kBAE3B,cAAC2B,EAAD,CACIlC,aAAcF,EAAME,aACpBO,gBAAiBT,EAAMS,qBAG/B,gCACI,cAAC8B,EAAD,CACIrC,aAAcF,EAAME,aACpBO,gBAAiBT,EAAMS,kBAE3B,cAACoC,EAAD,CACI3C,aAAcF,EAAME,aACpBO,gBAAiBT,EAAMS,kBAE3B,cAACuC,EAAD,CACI9C,aAAcF,EAAME,aACpBO,gBAAiBT,EAAMS,0BCxChC,SAAS8C,EAAMvD,GAC1B,OAAO,qBAAKG,UAAWL,EAAhB,qDCFI,SAAS0D,EAAOxD,GAC3B,OAAO,yCCEI,SAASyD,EAAgBzD,GACpC,IAAkB4C,EAkBdc,EACA,yBACIvD,UAAWL,EACXc,MAAOZ,EAAME,aAAa1B,YAC1B+B,SAAU,SAACC,GACPR,EAAMS,gBAAN,2BACOT,EAAME,cADb,IAGI1B,YAAagC,EAAEE,OAAOE,UAPlC,UAWK9C,IAAanN,KAAI,SAACiC,GACf,IAAIoN,EAAME,aAAa3B,gBACvB,OACI,wBAAmBqC,MAAOhO,EAA1B,SACKA,GADQA,MAKpBiL,IAAqBlN,KAAI,SAACiC,GACvB,GAAKoN,EAAME,aAAa3B,gBACxB,OACI,wBAAmBqC,MAAOhO,EAA1B,SACKA,GADQA,SAQ7B,OACI,qBAAKuN,UAAWL,EAAhB,SACI,sBAAKK,UAAWL,EAAhB,UACI,uBACIK,UAAWL,EACXO,GAAI,6BACJO,MAAOZ,EAAME,aAAa5B,2BAC1BiC,SAAU,SAACC,GACPR,EAAMS,gBAAN,2BACOT,EAAME,cADb,IAEI5B,2BAA4BkC,EAAEE,OAAOE,YAIjD,uBAAOT,UAAWL,EAAsBa,QAAS,6BAAjD,kCA/DMiC,EAkEM,kBAhEhB,uBACIzC,UAAWL,EAEXlN,KAAM,WACNyN,GAAIuC,EACJtC,QAASN,EAAME,aAAa0C,GAC5BrC,SAAU,SAACC,GACPR,EAAMS,gBAAN,2BACOT,EAAME,cADb,kBAEK0C,EAAUpC,EAAEE,OAAOJ,aAPvBsC,IA+DL,uBAAOzC,UAAWL,EAAsBa,QAAS,kBAAjD,+BAGC+C,EACD,uBAAOvD,UAAWL,EAAsBa,QAAS,mBAAjD,+BCxED,SAASgD,EAAQ3D,GAC5B,OACI,sBAAKG,UAAW,gBAAhB,UACI,cAACJ,EAAD,CACIG,aAAcF,EAAME,aACpBO,gBAAiBT,EAAMS,kBAE3B,cAACgD,EAAD,CACIvD,aAAcF,EAAME,aACpBO,gBAAiBT,EAAMS,qB,6BCJjCxR,EAAYC,EAAQ,IAEX,SAAS0U,EAAQ5D,GAAa,IAAD,EACF6D,mBAAS5U,EAAUgP,MADjB,mBACnCiC,EADmC,KACrBO,EADqB,OAEIoD,mBAAS,IAFb,mBAEnCC,EAFmC,KAElBC,EAFkB,KAIpCC,EACA,wBACI7D,UAAWL,EACXc,MAAOV,EAAalO,YACpBuO,SAAU,SAACC,GACPC,EAAgB,2BAAKP,GAAN,IAAoBlO,YAAawO,EAAEE,OAAOE,UAJjE,SAOK7D,IAAapM,KAAI,SAACqB,GACf,OACI,wBAAQmO,UAAWL,EAAyCc,MAAO5O,EAAnE,SACKA,GAD0CA,QAS3DiS,EAA+B,qEAenC,MAdI,CAAC,kBAAmB,qBAAqB1Q,SAAS2M,EAAalO,aAC/DiS,EACI,cAACf,EAAD,CAAehD,aAAcA,EAAcO,gBAAiBA,IAGhE,CAAC,wBAAyB,2BAA2BlN,SAAS2M,EAAalO,aAE3EiS,EACI,cAACX,EAAD,CAAcpD,aAAcA,EAAcO,gBAAiBA,IAE3B,YAA7BP,EAAalO,cACpBiS,EAAkB,cAACN,EAAD,CAASzD,aAAcA,EAAcO,gBAAiBA,KAIxE,qBAAKN,UAAWL,EAAhB,SACI,sBAAKK,UAAWL,EAAhB,UACI,cAACyD,EAAD,IACA,sBAAKpD,UAAW,2DAAhB,UACI,qBAAKA,UAAWL,EAAhB,SAAkCkE,IACjCC,EACD,wBACI9D,UAAWL,EACXoE,QAAS,SAAC1D,GACNuD,EAAmB5K,YAAsBJ,YAAgBmH,MAHjE,gCAQA,uBACIC,UAAWL,EACXoB,YAAa,2CACbN,MAAOkD,EACPK,UAAQ,IAEZ,wBACIhE,UAAWL,EACXoE,QAAS,SAAC1D,GAENxI,IAAK8L,EAAiB,CAClBM,OAAO,EACPC,QAAS,SANrB,+BAYA,cAACb,EAAD,YChFL,SAASc,EAAStE,GAC7B,OAEI,aADA,CACC4D,EAAD,ICCOW,MAJf,WACI,OAAO,cAACD,EAAD,KCQSE,QACa,cAA7BC,OAAOC,SAASC,UAEiB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCVvCC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SDyHpB,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBC,MAAK,SAACC,GACHA,EAAaC,gBAEhBC,OAAM,SAACC,GACJhN,QAAQgN,MAAMA,EAAMpB,c","file":"static/js/main.28214529.chunk.js","sourcesContent":["import { iBlueprintItem, iBlueprintItemWithoutNumber, iWireColor } from \"../constants/interfaces\"\nimport {\n    defaultSettings,\n    DIRECTION,\n    filterInserters,\n    mirrorXOffset,\n    splitterTypes,\n} from \"../constants/constants\"\n\nconst cloneDeep = require(\"clone-deep\")\n\nexport let entityNumber = 1\nexport const resetEntityNumber = () => {\n    entityNumber = 1\n}\n\nexport const newItem = (\n    itemName: string,\n    x: number,\n    y: number,\n    options: {\n        direction?: number\n        orientation?: number\n        bar?: number\n        filters?: Array<{\n            index: number\n            name: string\n        }>\n        request_filters?: Array<{\n            index: number\n            name: string\n            count: number\n        }>\n        request_from_buffers?: boolean\n        station?: string\n        manual_trains_limit?: string\n        control_behavior?: {\n            decider_conditions?: {\n                first_signal: {\n                    type: string\n                    name: string\n                }\n                constant: number\n                comparator: string\n                output_signal: {\n                    type: string\n                    name: string\n                }\n                copy_count_from_input: boolean\n            }\n            circuit_condition?: {\n                first_signal: {\n                    type: string\n                    name: string\n                }\n                constant: number\n                comparator: string\n            }\n            circuit_enable_disable?: boolean\n        }\n    } = {}\n): iBlueprintItem => {\n    let item: iBlueprintItem = {\n        entity_number: entityNumber,\n        name: itemName,\n        position: {\n            x: x,\n            y: y,\n        },\n    }\n    if (options.direction) {\n        item.direction = options.direction\n    }\n    if (options.orientation) {\n        item.orientation = options.orientation\n    }\n    if (options.bar) {\n        item.bar = options.bar\n    }\n    if (options.filters) {\n        item.filters = options.filters\n    }\n    if (options.request_filters) {\n        item.request_filters = options.request_filters\n    }\n    if (options.request_from_buffers) {\n        item.request_from_buffers = options.request_from_buffers\n    }\n    if (options.control_behavior) {\n        item.control_behavior = options.control_behavior\n    }\n    if (options.station) {\n        item.station = options.station\n    }\n    if (options.manual_trains_limit) {\n        item.manual_trains_limit = options.manual_trains_limit\n    }\n    entityNumber += 1\n    return item\n}\nexport const assignEntityNumberToItems = (\n    items: iBlueprintItemWithoutNumber[],\n    xOffset: number = 0,\n    yOffset: number = 0\n): iBlueprintItem[] => {\n    return items.map((item) => {\n        return newItem(item.name, item.position.x + xOffset, item.position.y + yOffset, {\n            direction: item.direction,\n        })\n    })\n}\n// Get total train length but as array so I can loop over it\nexport const getTrainArray = (\n    bpSettings: typeof defaultSettings,\n    startOffset = 0,\n    bottomOffset = 0\n) => {\n    let returnArray: number[] = []\n    let doubleHeaded = bpSettings.doubleHeaded ? 2 : 1\n    for (\n        let i = startOffset;\n        i <\n        (doubleHeaded * parseInt(bpSettings.locomotivesPerEnd) + parseInt(bpSettings.cargoWagon)) *\n            7 +\n            bottomOffset;\n        i++\n    ) {\n        returnArray.push(i)\n    }\n    return returnArray\n}\n// Only front locomotives as array\nexport const getFrontLocomotivesArray = (\n    bpSettings: typeof defaultSettings,\n    startOffset = -3,\n    bottomOffset = -3\n) => {\n    let returnArray: number[] = []\n    for (let i = startOffset; i < parseInt(bpSettings.locomotivesPerEnd) * 7 + bottomOffset; i++) {\n        returnArray.push(i)\n    }\n    return returnArray\n}\n// Only back locomotives as array (or empty array if single headed)\nexport const getBackLocomotivesArray = (\n    bpSettings: typeof defaultSettings,\n    startOffset = -3,\n    bottomOffset = -3\n) => {\n    if (!bpSettings.doubleHeaded) return []\n    let returnArray: number[] = []\n    for (\n        let i =\n            (parseInt(bpSettings.locomotivesPerEnd) + parseInt(bpSettings.cargoWagon)) * 7 +\n            startOffset;\n        i <\n        (2 * parseInt(bpSettings.locomotivesPerEnd) + parseInt(bpSettings.cargoWagon)) * 7 +\n            bottomOffset;\n        i++\n    ) {\n        returnArray.push(i)\n    }\n    return returnArray\n}\n// Returns an array of y-offsets where the cargo is\nexport const getCargoArray = (bpSettings: typeof defaultSettings, startOffset = -3) => {\n    let returnArray: number[] = []\n    let bottomOffset = 1\n    for (\n        let i = parseInt(bpSettings.locomotivesPerEnd) * 7 + startOffset;\n        i <\n        (parseInt(bpSettings.locomotivesPerEnd) + parseInt(bpSettings.cargoWagon)) * 7 +\n            startOffset +\n            bottomOffset;\n        i++\n    ) {\n        returnArray.push(i)\n    }\n    return returnArray\n}\n\nexport const placeTrainTracks = (bpSettings: typeof defaultSettings) => {\n    let returnArray: iBlueprintItem[] = []\n    getTrainArray(bpSettings, -4).forEach((i) => {\n        if (i % 2 === 1) return\n        returnArray.push(newItem(\"straight-rail\", -1.5, i))\n    })\n    return returnArray\n}\n\nexport const placeSignals = (bpSettings: typeof defaultSettings, stationNumber: number) => {\n    // Size is 1x1, so coordinate ends in 0.5\n    let returnArray: iBlueprintItem[] = []\n    let start = 0\n    let doubleHeaded = bpSettings.doubleHeaded ? 2 : 1\n    let singleHeadedOffset = bpSettings.doubleHeaded ? 0 : 1\n    let end =\n        (doubleHeaded * parseInt(bpSettings.locomotivesPerEnd) + parseInt(bpSettings.cargoWagon)) *\n            7 +\n        singleHeadedOffset\n    // Stacker\n    if (bpSettings.stationType === \"Stacker\") {\n        returnArray.push(\n            newItem(\"rail-chain-signal\", 0, start - 3.5, { direction: DIRECTION.DOWN })\n        )\n        returnArray.push(newItem(\"rail-signal\", 0, end - 2.5, { direction: DIRECTION.DOWN }))\n    }\n    // If sequential station: place chain signal at front, rail signal between, rail signal at the back\n    else if (bpSettings.sequentialStation) {\n        if (stationNumber === 0) {\n            returnArray.push(\n                newItem(\"rail-chain-signal\", 0, start - 3.5, { direction: DIRECTION.DOWN })\n            )\n        }\n        if (stationNumber === parseInt(bpSettings.sequentialStationsAmount) - 1) {\n            returnArray.push(newItem(\"rail-signal\", 0, end - 2.5, { direction: DIRECTION.DOWN }))\n        }\n        if (stationNumber > 0) {\n            returnArray.push(newItem(\"rail-signal\", 0, start - 3.5, { direction: DIRECTION.DOWN }))\n        }\n    }\n    // Normal station\n    else {\n        if (bpSettings.doubleHeaded) {\n            // Chain signal at the back if double headed, because I assume double headed trains exit the same way they went in\n            returnArray.push(\n                newItem(\"rail-chain-signal\", -3, end - 2.5, { direction: DIRECTION.UP })\n            )\n        } else {\n            // Chain signal at the front if not double headed\n            returnArray.push(\n                newItem(\"rail-chain-signal\", 0, start - 3.5, { direction: DIRECTION.DOWN })\n            )\n        }\n        // Rail signal at the back\n        returnArray.push(newItem(\"rail-signal\", 0, end - 2.5, { direction: DIRECTION.DOWN }))\n    }\n\n    return returnArray\n}\n\nexport const placeTrainStop = (bpSettings: typeof defaultSettings) => {\n    // Size is 2x2, so coordinate ends in .0\n    let returnArray: iBlueprintItem[] = []\n    let controlBehavior = bpSettings.trainStopUsesEnabledCondition\n        ? {\n              circuit_condition: {\n                  first_signal: {\n                      type: \"virtual\",\n                      name: \"signal-red\",\n                  },\n                  constant: 0,\n                  comparator: \">\",\n              },\n              circuit_enable_disable: true,\n          }\n        : undefined\n    let options = {\n        station: bpSettings.stationName !== \"\" ? bpSettings.stationName : undefined,\n        manual_trains_limit:\n            parseInt(bpSettings.trainLimit) >= 0 ? bpSettings.trainLimit : undefined,\n        control_behavior: controlBehavior,\n    }\n    returnArray.push(newItem(\"train-stop\", 0.5, -2, options))\n    return returnArray\n}\n\nexport const placeTrain = (bpSettings: typeof defaultSettings) => {\n    let returnArray: iBlueprintItem[] = []\n    let count = 0\n    let doubleHeaded = bpSettings.doubleHeaded ? 2 : 1\n    let locoCount = parseInt(bpSettings.locomotivesPerEnd)\n    let cargoCount = parseInt(bpSettings.cargoWagon)\n    parseInt(bpSettings.cargoWagon)\n    // TODO Check if user wants train to be placed\n    getTrainArray(bpSettings).forEach((y, i) => {\n        if (i % 7 !== 0) return\n        if (count < locoCount) {\n            returnArray.push(newItem(\"locomotive\", -1.5, y + 1))\n        } else if (count < locoCount + cargoCount) {\n            if (\n                [\"Loading Station\", \"Unloading Station\", \"Stacker\"].includes(bpSettings.stationType)\n            )\n                returnArray.push(newItem(\"cargo-wagon\", -1.5, y + 1))\n            else returnArray.push(newItem(\"fluid-wagon\", -1.5, y + 1))\n        } else if (count < locoCount * doubleHeaded + cargoCount) {\n            returnArray.push(newItem(\"locomotive\", -1.5, y + 1, { orientation: 0.5 }))\n        }\n        count += 1\n    })\n    return returnArray\n}\n\nexport const placeInserters = (bpSettings: typeof defaultSettings) => {\n    // Size is 1x1, so coordinate ends in 0.5\n    // Inserter direction = direction it grabs from\n    let returnArray: iBlueprintItem[] = []\n    let inserterType = bpSettings.enableFilterInserters\n        ? filterInserters[bpSettings.inserterType]\n        : bpSettings.inserterType\n    let inserterDirection =\n        bpSettings.stationType === \"Loading Station\" ? DIRECTION.RIGHT : DIRECTION.LEFT\n    let filterArray:\n        | undefined\n        | Array<{\n              index: number\n              name: string\n          }>\n    if (bpSettings.enableFilterInserters) {\n        filterArray = []\n        for (let i = 0; i < 5; i++) {\n            if (!bpSettings.filterFields[i] || bpSettings.filterFields[i] === \"\") break\n            filterArray.push({\n                index: i + 1,\n                name: bpSettings.filterFields[i],\n            })\n        }\n    }\n    getCargoArray(bpSettings).forEach((y, i) => {\n        if (i % 7 === 0) return\n        returnArray.push(\n            newItem(inserterType, 0, y + 0.5, {\n                direction: inserterDirection,\n                filters: filterArray,\n            })\n        )\n        returnArray.push(\n            newItem(inserterType, 2, y + 0.5, {\n                direction: inserterDirection,\n                filters: filterArray,\n            })\n        )\n    })\n    return returnArray\n}\nexport const placeChests = (bpSettings: typeof defaultSettings) => {\n    // Size is 1x1, so coordinate ends in 0.5\n    let returnArray: iBlueprintItem[] = []\n\n    // For requester and buffer chests, add the requests\n    let isRequesterChest = [\"logistic-chest-requester\", \"logistic-chest-buffer\"].includes(\n        bpSettings.chestType\n    )\n    let requests: Array<{\n        index: number\n        name: string\n        count: number\n    }> = []\n    if (isRequesterChest) {\n        bpSettings.chestRequestItemsType.forEach((itemType, index) => {\n            let itemAmount = bpSettings.chestRequestItemsAmount[index]\n            requests.push({\n                index: index + 1,\n                name: itemType,\n                count: itemAmount,\n            })\n        })\n    }\n\n    let requestFromBuffers =\n        bpSettings.chestRequestFromBuffers && bpSettings.chestType === \"logistic-chest-requester\"\n            ? true\n            : undefined\n    getCargoArray(bpSettings).forEach((y, i) => {\n        if (i % 7 === 0) return\n        returnArray.push(\n            newItem(bpSettings.chestType, 1, y + 0.5, {\n                bar: parseInt(bpSettings.chestLimit),\n                request_filters: requests,\n                request_from_buffers: requestFromBuffers,\n            })\n        )\n    })\n    return returnArray\n}\n// Belts between inserter and splitter\nexport const placeLoadingBelts = (bpSettings: typeof defaultSettings) => {\n    // Size is 1x1, so coordinate ends in 0.5\n    let returnArray: iBlueprintItem[] = []\n    getCargoArray(bpSettings).forEach((y, i) => {\n        if (i % 7 === 1) {\n            returnArray.push(\n                newItem(bpSettings.beltType, 3, y + 0.5, { direction: DIRECTION.LEFT })\n            )\n        } else if (i % 7 === 2) {\n            returnArray.push(newItem(bpSettings.beltType, 3, y + 0.5, { direction: DIRECTION.UP }))\n        } else if (i % 7 === 3) {\n            returnArray.push(newItem(bpSettings.beltType, 3, y + 0.5, { direction: DIRECTION.UP }))\n        } else if (i % 7 === 4) {\n            returnArray.push(\n                newItem(bpSettings.beltType, 3, y + 0.5, { direction: DIRECTION.DOWN })\n            )\n        } else if (i % 7 === 5) {\n            returnArray.push(\n                newItem(bpSettings.beltType, 3, y + 0.5, { direction: DIRECTION.DOWN })\n            )\n        } else if (i % 7 === 6) {\n            returnArray.push(\n                newItem(bpSettings.beltType, 3, y + 0.5, { direction: DIRECTION.LEFT })\n            )\n        }\n    })\n    return returnArray\n}\nexport const placeUnloadingBelts = (bpSettings: typeof defaultSettings) => {\n    // Size is 1x1, so coordinate ends in 0.5\n    let returnArray: iBlueprintItem[] = []\n    getCargoArray(bpSettings).forEach((y, i) => {\n        if (i % 7 === 1) {\n            returnArray.push(\n                newItem(bpSettings.beltType, 3, y + 0.5, { direction: DIRECTION.DOWN })\n            )\n        } else if (i % 7 === 2) {\n            returnArray.push(\n                newItem(bpSettings.beltType, 3, y + 0.5, { direction: DIRECTION.DOWN })\n            )\n        } else if (i % 7 === 3) {\n            returnArray.push(\n                newItem(bpSettings.beltType, 3, y + 0.5, { direction: DIRECTION.RIGHT })\n            )\n        } else if (i % 7 === 4) {\n            returnArray.push(\n                newItem(bpSettings.beltType, 3, y + 0.5, { direction: DIRECTION.RIGHT })\n            )\n        } else if (i % 7 === 5) {\n            returnArray.push(newItem(bpSettings.beltType, 3, y + 0.5, { direction: DIRECTION.UP }))\n        } else if (i % 7 === 6) {\n            returnArray.push(newItem(bpSettings.beltType, 3, y + 0.5, { direction: DIRECTION.UP }))\n        }\n    })\n    return returnArray\n}\nexport const placePumps = (bpSettings: typeof defaultSettings) => {\n    let returnArray: iBlueprintItem[] = []\n    let pumpDirection =\n        bpSettings.stationType === \"Fluid Loading Station\" ? DIRECTION.LEFT : DIRECTION.RIGHT\n    getCargoArray(bpSettings).forEach((y, i) => {\n        if (i % 7 === 1) {\n            returnArray.push(\n                // Storage tank facing UP has connection topleft and bottomright\n                newItem(\"pump\", 0.5, y + 0.5, { direction: pumpDirection })\n            )\n        }\n        if (i % 7 === 6) {\n            // Storage tank facing RIGHT has connection topright and bottomleft\n            returnArray.push(newItem(\"pump\", 0.5, y + 0.5, { direction: pumpDirection }))\n        }\n    })\n    return returnArray\n}\nexport const placeStorageTanks = (bpSettings: typeof defaultSettings) => {\n    // Size is 3x3, so coordinate ends in 0.5\n    let returnArray: iBlueprintItem[] = []\n    getCargoArray(bpSettings).forEach((y, i) => {\n        if (i % 7 === 2) {\n            // Storage tank facing UP has connection topleft and bottomright\n            returnArray.push(newItem(\"storage-tank\", 3, y + 0.5))\n        }\n        if (i % 7 === 5) {\n            // Storage tank facing RIGHT has connection topright and bottomleft\n            returnArray.push(newItem(\"storage-tank\", 3, y + 0.5, { direction: DIRECTION.RIGHT }))\n        }\n    })\n    return returnArray\n}\nexport const placePipes = (bpSettings: typeof defaultSettings) => {\n    // Size is 1x1, so coordinate ends in 0.5\n    let returnArray: iBlueprintItem[] = []\n    getCargoArray(bpSettings).forEach((y, i, array) => {\n        if (i !== 0 && i !== array.length - 1 && i % 7 === 0) {\n            // Storage tank facing UP has connection topleft and bottomright\n            returnArray.push(newItem(\"pipe\", 2, y + 0.5))\n        }\n    })\n    return returnArray\n}\n// Belts that go from splitter to front/back\nexport const placeVerticalBelts = (\n    bpSettings: typeof defaultSettings,\n    splitters: Array<iBlueprintItem>\n) => {\n    let returnArray: iBlueprintItem[] = []\n    let mode = bpSettings.stationType === \"Loading Station\" ? \"load\" : \"unload\"\n    let beltEnd = bpSettings.beltFlowDirection\n    sortByYPosition(splitters)\n    let x = 5\n    // Unloading to front, splitters[0] is the front splitter\n    if (mode === \"unload\" && beltEnd === \"Front\") {\n        splitters.forEach((splitter) => {\n            for (let y = splitters[0].position.y; y <= splitter.position.y; y++) {\n                returnArray.push(\n                    newItem(bpSettings.beltType, x, y - 0.5, { direction: DIRECTION.UP })\n                )\n            }\n            for (let i = splitter.position.x + 1; i < x; i++) {\n                returnArray.push(\n                    newItem(bpSettings.beltType, i, splitter.position.y - 0.5, {\n                        direction: DIRECTION.RIGHT,\n                    })\n                )\n            }\n            x += 1\n        })\n    }\n    // Unloading to back, splitters[0] is the back splitter\n    if (mode === \"unload\" && beltEnd === \"Back\") {\n        splitters.reverse()\n        splitters.forEach((splitter) => {\n            for (let y = splitters[0].position.y; y >= splitter.position.y; y--) {\n                returnArray.push(\n                    newItem(bpSettings.beltType, x, y + 0.5, { direction: DIRECTION.DOWN })\n                )\n            }\n            for (let i = splitter.position.x + 1; i < x; i++) {\n                returnArray.push(\n                    newItem(bpSettings.beltType, i, splitter.position.y + 0.5, {\n                        direction: DIRECTION.RIGHT,\n                    })\n                )\n            }\n            x += 1\n        })\n    }\n    // Loading from front, splitters[0] is the front splitter\n    if (mode === \"load\" && beltEnd === \"Front\") {\n        splitters.forEach((splitter) => {\n            for (let y = splitters[0].position.y; y < splitter.position.y; y++) {\n                returnArray.push(\n                    newItem(bpSettings.beltType, x, y - 0.5, { direction: DIRECTION.DOWN })\n                )\n            }\n            for (let i = splitter.position.x + 1; i <= x; i++) {\n                returnArray.push(\n                    newItem(bpSettings.beltType, i, splitter.position.y - 0.5, {\n                        direction: DIRECTION.LEFT,\n                    })\n                )\n            }\n            x += 1\n        })\n    }\n    // Loading from back, splitters[0] is the back splitter\n    if (mode === \"load\" && beltEnd === \"Back\") {\n        splitters.reverse()\n        splitters.forEach((splitter) => {\n            for (let y = splitters[0].position.y; y > splitter.position.y; y--) {\n                returnArray.push(\n                    newItem(bpSettings.beltType, x, y + 0.5, { direction: DIRECTION.UP })\n                )\n            }\n            for (let i = splitter.position.x + 1; i <= x; i++) {\n                returnArray.push(\n                    newItem(bpSettings.beltType, i, splitter.position.y + 0.5, {\n                        direction: DIRECTION.LEFT,\n                    })\n                )\n            }\n            x += 1\n        })\n    }\n    return returnArray\n}\nexport const placeCurvedRail = (bpSettings: typeof defaultSettings) => {\n    let returnArray: iBlueprintItem[] = []\n    let splitterType = splitterTypes[bpSettings.beltType]\n    let splitterDirection =\n        bpSettings.stationType === \"Loading Station\" ? DIRECTION.LEFT : DIRECTION.RIGHT\n    getCargoArray(bpSettings).forEach((y, i) => {\n        if (i % 7 !== 4) return\n        returnArray.push(newItem(splitterType, 4, y, { direction: splitterDirection }))\n    })\n    return returnArray\n}\nexport const placeStraightRail = (\n    bpSettings: typeof defaultSettings,\n    xOffset = 0,\n    yOffset = 0,\n    direction: DIRECTION = DIRECTION.UP\n) => {\n    /*\n    Vertical rails: DIRECTION.UP\n    Horizontal rails: DIRECTION.RIGHT\n     */\n    let returnArray: iBlueprintItem[] = []\n    let splitterType = splitterTypes[bpSettings.beltType]\n    let splitterDirection =\n        bpSettings.stationType === \"Loading Station\" ? DIRECTION.LEFT : DIRECTION.RIGHT\n    getCargoArray(bpSettings).forEach((y, i) => {\n        if (i % 7 !== 4) return\n        returnArray.push(newItem(splitterType, 4, y, { direction: splitterDirection }))\n    })\n    return returnArray\n}\nexport const placeSplitters = (bpSettings: typeof defaultSettings) => {\n    let returnArray: iBlueprintItem[] = []\n    let splitterType = splitterTypes[bpSettings.beltType]\n    let splitterDirection =\n        bpSettings.stationType === \"Loading Station\" ? DIRECTION.LEFT : DIRECTION.RIGHT\n    getCargoArray(bpSettings).forEach((y, i) => {\n        if (i % 7 !== 4) return\n        returnArray.push(newItem(splitterType, 4, y, { direction: splitterDirection }))\n    })\n    return returnArray\n}\nexport const placePoles = (bpSettings: typeof defaultSettings) => {\n    // Size is 1x1, so coordinate ends in 0.5\n    let returnArray: iBlueprintItem[] = []\n    getCargoArray(bpSettings).forEach((y, i) => {\n        if (i % 7 !== 0) return\n        returnArray.push(newItem(\"medium-electric-pole\", 0, y + 0.5))\n    })\n    return returnArray\n}\nexport const placeLamps = (bpSettings: typeof defaultSettings) => {\n    // Size is 1x1, so coordinate ends in 0.5\n    let returnArray: iBlueprintItem[] = []\n    getCargoArray(bpSettings).forEach((y, i) => {\n        if (i % 7 !== 0) return\n        returnArray.push(newItem(\"small-lamp\", 1, y + 0.5))\n    })\n    return returnArray\n}\nexport const placeDecider = (bpSettings: typeof defaultSettings) => {\n    let returnArray: iBlueprintItem[] = []\n    returnArray.push(\n        newItem(\"decider-combinator\", 0, 0, {\n            control_behavior: {\n                decider_conditions: {\n                    first_signal: {\n                        type: \"virtual\",\n                        name: \"signal-anything\",\n                    },\n                    constant: parseInt(bpSettings.enabledConditionAmount),\n                    comparator: bpSettings.enabledConditionOperator,\n                    output_signal: {\n                        type: \"virtual\",\n                        name: \"signal-red\",\n                    },\n                    copy_count_from_input: false,\n                },\n            },\n        })\n    )\n    return returnArray\n}\n// Refuel\nexport const placeTopRefuelPoles = (bpSettings: typeof defaultSettings) => {\n    let returnArray: iBlueprintItem[] = []\n    getFrontLocomotivesArray(bpSettings).forEach((y, i, array) => {\n        if (i % 7 !== 0 || array.length === i - 1 || i === 0) return\n        returnArray.push(newItem(\"medium-electric-pole\", 0, y + 0.5))\n    })\n    return returnArray\n}\nexport const placeBottomRefuelPoles = (bpSettings: typeof defaultSettings) => {\n    let returnArray: iBlueprintItem[] = []\n    getBackLocomotivesArray(bpSettings).forEach((y, i, array) => {\n        if (i % 7 !== 0 || array.length === i - 1 || i === 0) return\n        returnArray.push(newItem(\"medium-electric-pole\", 0, y + 0.5))\n    })\n    return returnArray\n}\nexport const placeRefuelChestsAndInserters = (bpSettings: typeof defaultSettings) => {\n    // Size is 1x1, so coordinate ends in 0.5\n    let returnArray: iBlueprintItem[] = []\n    getFrontLocomotivesArray(bpSettings).forEach((y, i) => {\n        if (i % 7 !== 6) return\n        returnArray.push(newItem(\"inserter\", 0, y + 0.5, { direction: DIRECTION.RIGHT }))\n        returnArray.push(\n            newItem(\"logistic-chest-requester\", 1, y + 0.5, {\n                request_filters: [\n                    {\n                        index: 1,\n                        name: bpSettings.refillFuelType,\n                        count: parseInt(bpSettings.refillFuelAmount),\n                    },\n                ],\n            })\n        )\n    })\n    getBackLocomotivesArray(bpSettings).forEach((y, i) => {\n        if (i % 7 !== 1) return\n        returnArray.push(newItem(\"inserter\", 0, y + 0.5, { direction: DIRECTION.RIGHT }))\n        returnArray.push(\n            newItem(\"logistic-chest-requester\", 1, y + 0.5, {\n                request_filters: [\n                    {\n                        index: 1,\n                        name: bpSettings.refillFuelType,\n                        count: parseInt(bpSettings.refillFuelAmount),\n                    },\n                ],\n            })\n        )\n    })\n    return returnArray\n}\n// Wire functions\nexport const connectTwoEntitiesWithWire = (\n    entity1: iBlueprintItem,\n    entity2: iBlueprintItem,\n    color: iWireColor,\n    entity1ConNumber: \"1\" | \"2\" = \"1\",\n    entity2ConNumber: \"1\" | \"2\" = \"1\"\n) => {\n    let entity1Number = entity1.entity_number\n    let entity2Number = entity2.entity_number\n\n    let createWirePath = (entity: iBlueprintItem, conNumber: \"1\" | \"2\") => {\n        if (!entity.connections) {\n            entity.connections = {}\n        }\n        if (!entity.connections[conNumber]) {\n            entity.connections[conNumber] = {}\n        }\n        // @ts-ignore - no clue why this is still giving me a warning that it could be undefined\n        if (!entity.connections[conNumber][color]) {\n            // @ts-ignore\n            entity.connections[conNumber][color] = []\n        }\n    }\n\n    createWirePath(entity1, entity1ConNumber)\n    createWirePath(entity2, entity2ConNumber)\n    // @ts-ignore\n    entity1.connections[entity1ConNumber][color].push({ entity_id: entity2Number })\n    // @ts-ignore\n    entity2.connections[entity2ConNumber][color].push({ entity_id: entity1Number })\n}\nexport const connectItemsWithWire = (items: iBlueprintItem[], color: iWireColor) => {\n    items.forEach((item1, index) => {\n        if (index === 0) return\n        let item2 = items[index - 1]\n        connectTwoEntitiesWithWire(item1, item2, color)\n    })\n}\n// Helper functions\nexport const mirrorItemsHorizontal = (items: iBlueprintItem[]) => {\n    // Returns a new array with clones of items\n    return items.map((item) => {\n        let copy = cloneDeep(item) as iBlueprintItem\n        copy.entity_number = entityNumber\n        entityNumber += 1\n        copy.position.x = -copy.position.x + mirrorXOffset\n        if (copy.name === \"storage-tank\") {\n            if (!copy.direction) copy.direction = 2\n            else copy.direction = undefined\n        } else {\n            if (copy.direction === DIRECTION.LEFT) copy.direction = DIRECTION.RIGHT\n            else if (copy.direction === DIRECTION.RIGHT) copy.direction = DIRECTION.LEFT\n        }\n        return copy\n    })\n}\nexport const changeItemsCoordinates = (items: iBlueprintItem[], x = 0, y = 0) => {\n    // Changes the items directly\n    items.forEach((item) => {\n        item.position = {\n            x: item.position.x + x,\n            y: item.position.y + y,\n        }\n    })\n}\nexport const copyPasteItems = (items: iBlueprintItem[], x = 0, y = 0) => {\n    // Changes the items directly\n    return items.map((item) => {\n        let clone: iBlueprintItem = cloneDeep(item)\n        clone.entity_number = entityNumber\n        entityNumber += 1\n        clone.position = {\n            x: clone.position.x + x,\n            y: clone.position.y + y,\n        }\n        return clone\n    })\n}\nexport const mixSides = (\n    sidesUsed: \"Both\" | \"Right\" | \"Left\",\n    leftArray: iBlueprintItem[],\n    rightArray: iBlueprintItem[]\n) => {\n    if (sidesUsed === \"Both\") {\n        return [...leftArray, ...rightArray]\n    } else if (sidesUsed === \"Left\") {\n        return leftArray\n    } else if (sidesUsed === \"Right\") {\n        return rightArray\n    }\n    console.assert(\"Error returning empty array\")\n    return []\n}\nexport const sortByYPosition = (items: iBlueprintItem[]) => {\n    items.sort((a, b) => {\n        // Smaller y first\n        if (a.position.y < b.position.y) {\n            return -1\n        } else if (a.position.y > b.position.y) {\n            return 1\n        }\n        // If equal, sort by x (right side first)\n        if (a.position.x < b.position.x) {\n            return 1\n        } else if (a.position.x > b.position.x) {\n            return -1\n        }\n        return 0\n    })\n}\n","import { defaultSettings } from \"../constants/constants\"\nimport { iBlueprint, iBlueprintItem } from \"../constants/interfaces\"\nimport { createNormalStation } from \"./CreateNormalStation\"\nimport { createFluidStation } from \"./CreateFluidStation\"\nimport { createStacker } from \"./CreateStacker\"\nconst zlib = require(\"zlib\")\n\nexport const createBlueprint = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    /*\n    TODO\n    liquid:\n    create pumps\n    create storage tanks\n    connect tanks with pipe\n\n    stacker:\n    create stacker\n\n    warnings / errors:\n    invalid number (not able to parseint, entry missing)\n    sequential should be used together with \"train enabled condition\"\n    \"train enabled condition\" should be used with at least \"connect chests with green wire\n\n    tooltips\n     */\n\n    if ([\"Loading Station\", \"Unloading Station\"].includes(bpSettings.stationType)) {\n        return createNormalStation(bpSettings)\n    }\n    if ([\"Fluid Loading Station\", \"Fluid Unloading Station\"].includes(bpSettings.stationType)) {\n        return createFluidStation(bpSettings)\n    } else if (bpSettings.stationType === \"Stacker\") {\n        return createStacker(bpSettings)\n    }\n    return []\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst decode = (blueprintString: string) => {\n    // UNTESTED stolen from https://github.com/demipixel/factorio-blueprint/blob/c21309e9023ee3740a5c3c647d87cb828ab3ecc4/src/util.ts#L20\n    return JSON.parse(\n        zlib.inflateSync(Buffer.from(blueprintString.slice(1), \"base64\")).toString(\"utf8\")\n    )\n}\n\nconst encode = (items: any[]) => {\n    let blueprint = {\n        blueprint: {\n            icons: [\n                {\n                    signal: {\n                        type: \"item\",\n                        name: \"transport-belt\",\n                    },\n                    index: 1,\n                },\n            ],\n            entities: items,\n            item: \"blueprint\",\n            version: \"0\",\n            label: \"Blueprint\",\n        },\n    }\n    return \"0\" + zlib.deflateSync(JSON.stringify(blueprint), { level: 9 }).toString(\"base64\")\n}\n\nexport const createBlueprintString = (blueprint: iBlueprint): string => {\n    // Stolen from https://github.com/demipixel/factorio-blueprint/blob/c21309e9023ee3740a5c3c647d87cb828ab3ecc4/src/util.ts#L41\n    return encode(blueprint)\n}\n","import { defaultSettings } from \"../constants/constants\"\nimport { iBlueprintItem } from \"../constants/interfaces\"\nimport {\n    getTrainArray,\n    placeChests,\n    mirrorItemsHorizontal,\n    mixSides,\n    sortByYPosition,\n    connectItemsWithWire,\n    connectTwoEntitiesWithWire,\n    placeInserters,\n    placeLoadingBelts,\n    placeUnloadingBelts,\n    placePoles,\n    placeTrainTracks,\n    placeSignals,\n    placeTrainStop,\n    placeRefuelChestsAndInserters,\n    placeTopRefuelPoles,\n    placeBottomRefuelPoles,\n    placeDecider,\n    placeLamps,\n    placeSplitters,\n    changeItemsCoordinates,\n    placeTrain,\n    placeVerticalBelts,\n    resetEntityNumber,\n} from \"./CreateItems\"\n\nexport const createNormalStation = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    resetEntityNumber()\n    let allItems: iBlueprintItem[] = []\n    let rightSplitters: iBlueprintItem[] = []\n\n    let stationsTarget = bpSettings.sequentialStation ? bpSettings.sequentialStationsAmount : 1\n    // For each station, create all items, then shift them down\n    for (let stationNumber = 0; stationNumber < stationsTarget; stationNumber++) {\n        const stationYOffset = (getTrainArray(bpSettings).length + 2) * stationNumber\n\n        let stationItems: iBlueprintItem[] = []\n        // Create chests and connect them with wire\n        let rightChests = placeChests(bpSettings)\n        let leftChests = mirrorItemsHorizontal(rightChests)\n        let chests = mixSides(bpSettings.beltSidesUsed, leftChests, rightChests)\n        // Sorting not required?\n        sortByYPosition(rightChests)\n        sortByYPosition(leftChests)\n        if (bpSettings.connectChestsWithGreenWire) {\n            connectItemsWithWire(leftChests, \"green\")\n            connectItemsWithWire(rightChests, \"green\")\n            if (bpSettings.connectBothSideWithGreenWire && bpSettings.beltSidesUsed === \"Both\") {\n                connectTwoEntitiesWithWire(rightChests[0], leftChests[0], \"green\")\n            }\n        }\n        if (bpSettings.connectChestsWithRedWire) {\n            connectItemsWithWire(leftChests, \"red\")\n            connectItemsWithWire(rightChests, \"red\")\n            if (bpSettings.connectBothSideWithRedWire && bpSettings.beltSidesUsed === \"Both\") {\n                connectTwoEntitiesWithWire(rightChests[0], leftChests[0], \"red\")\n            }\n        }\n\n        // Mirrorable items\n        let rightSideItems: iBlueprintItem[] = []\n        if (bpSettings.stationType === \"Loading Station\") {\n            rightSideItems = [...rightSideItems, ...placeLoadingBelts(bpSettings)]\n        } else {\n            // Unloading station\n            rightSideItems = [...rightSideItems, ...placeUnloadingBelts(bpSettings)]\n        }\n        rightSideItems = [...rightSideItems, ...placeInserters(bpSettings)]\n\n        let rightPoles = placePoles(bpSettings)\n        let leftPoles = mirrorItemsHorizontal(rightPoles)\n        let poles = mixSides(bpSettings.beltSidesUsed, leftPoles, rightPoles)\n        let leftSideItems: iBlueprintItem[] = mirrorItemsHorizontal(rightSideItems)\n\n        // Combine remaining items which were already mirrored and offset-ed\n        rightSideItems = [...rightSideItems, ...rightPoles, ...rightChests]\n        leftSideItems = [...leftSideItems, ...leftPoles, ...leftChests]\n        if (bpSettings.placeLampsNearPoles) {\n            let rightLamps = placeLamps(bpSettings)\n            let leftLamps = mirrorItemsHorizontal(rightLamps)\n            rightSideItems = [...rightSideItems, ...rightLamps]\n            leftSideItems = [...leftSideItems, ...leftLamps]\n        }\n\n        // All items that need no mirroring (tracks, signals, train stops, refuel chests and inserter, poles for those, decider combinator)\n        stationItems = [...stationItems, ...placeTrainTracks(bpSettings)]\n        stationItems = [...stationItems, ...placeSignals(bpSettings, stationNumber)]\n        let trainStop = placeTrainStop(bpSettings)[0]\n        stationItems = [...stationItems, trainStop]\n        if (bpSettings.refillEnabled)\n            stationItems = [...stationItems, ...placeRefuelChestsAndInserters(bpSettings)]\n        if (bpSettings.refillEnabled || bpSettings.trainStopUsesEnabledCondition) {\n            let topPoles = placeTopRefuelPoles(bpSettings)\n            let bottomPoles = placeBottomRefuelPoles(bpSettings)\n            stationItems = [...stationItems, ...topPoles, ...bottomPoles]\n            if (bpSettings.trainStopUsesEnabledCondition) {\n                let decider = placeDecider(bpSettings)[0]\n                // Combine decider and trainstop with green wire\n                connectTwoEntitiesWithWire(decider, trainStop, \"green\", \"2\", \"1\")\n                // Combine decider and poles with green wire\n                sortByYPosition(chests)\n                sortByYPosition(poles)\n                let combineArray = [decider, chests[0], poles[0], ...topPoles]\n                sortByYPosition(combineArray)\n                connectItemsWithWire(combineArray, \"green\")\n                stationItems = [...stationItems, decider]\n            }\n        }\n        if (bpSettings.includeTrainInBlueprint) {\n            stationItems = [...stationItems, ...placeTrain(bpSettings)]\n        }\n\n        /*\n        TODO\n        liquid load/unload\n        stacker\n         */\n\n        let newSplitters = placeSplitters(bpSettings)\n        changeItemsCoordinates(newSplitters, 0, stationYOffset)\n        rightSplitters = [...rightSplitters, ...newSplitters]\n\n        // Combine left and right side items\n        stationItems = [\n            ...stationItems,\n            ...mixSides(bpSettings.beltSidesUsed, leftSideItems, rightSideItems),\n        ]\n\n        // Move all items by sequential station offset\n        changeItemsCoordinates(stationItems, 0, stationYOffset)\n        allItems = [...allItems, ...stationItems]\n    }\n\n    // If sequential and not lay all the way: go in splitter groups\n    if (bpSettings.sequentialStation && !bpSettings.sequantialStationBeltsGoAllTheWay) {\n        sortByYPosition(rightSplitters)\n        for (\n            let i = 0;\n            i < parseInt(bpSettings.cargoWagon) * parseInt(bpSettings.sequentialStationsAmount);\n            i += parseInt(bpSettings.cargoWagon)\n        ) {\n            let splitterSlice = rightSplitters.slice(i, i + parseInt(bpSettings.cargoWagon))\n            let rightVerticalBelts = placeVerticalBelts(bpSettings, splitterSlice)\n            let leftVerticalBelts = mirrorItemsHorizontal(rightVerticalBelts)\n            allItems = [\n                ...allItems,\n                ...mixSides(bpSettings.beltSidesUsed, leftVerticalBelts, rightVerticalBelts),\n            ]\n        }\n    }\n    // If sequential: lay all-the-way belts\n    else if (bpSettings.beltFlowDirection !== \"None\") {\n        let rightVerticalBelts = placeVerticalBelts(bpSettings, rightSplitters)\n        let leftVerticalBelts = mirrorItemsHorizontal(rightVerticalBelts)\n        allItems = [\n            ...allItems,\n            ...mixSides(bpSettings.beltSidesUsed, leftVerticalBelts, rightVerticalBelts),\n        ]\n    }\n    // Add splitters which were previously globally collected to create vertical belts\n    let leftSplitters = mirrorItemsHorizontal(rightSplitters)\n    allItems = [...allItems, ...mixSides(bpSettings.beltSidesUsed, leftSplitters, rightSplitters)]\n\n    // If sequential: connect train stop with next rail signal (green wire)\n    let trainStops = allItems.filter((item) => {\n        return item.name === \"train-stop\"\n    })\n    let railSignals = allItems.filter((item) => {\n        return item.name === \"rail-signal\"\n    })\n    sortByYPosition(trainStops)\n    sortByYPosition(railSignals)\n    trainStops.slice(1).forEach((stop, i) => {\n        let signal = railSignals[i]\n        connectTwoEntitiesWithWire(stop, signal, \"green\")\n    })\n\n    // All items are off by 0.5, fix here\n    changeItemsCoordinates(allItems, -0.5)\n    return allItems\n}\n","import { defaultSettings } from \"../constants/constants\"\nimport { iBlueprintItem } from \"../constants/interfaces\"\nimport {\n    getTrainArray,\n    mirrorItemsHorizontal,\n    mixSides,\n    sortByYPosition,\n    connectItemsWithWire,\n    connectTwoEntitiesWithWire,\n    placePoles,\n    placeTrainTracks,\n    placeSignals,\n    placeTrainStop,\n    placeRefuelChestsAndInserters,\n    placeTopRefuelPoles,\n    placeBottomRefuelPoles,\n    placeDecider,\n    placeLamps,\n    changeItemsCoordinates,\n    placeTrain,\n    resetEntityNumber,\n    placeStorageTanks,\n    placePumps,\n    placePipes,\n} from \"./CreateItems\"\n\nexport const createFluidStation = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    resetEntityNumber()\n    let allItems: iBlueprintItem[] = []\n\n    let stationsTarget = bpSettings.sequentialStation ? bpSettings.sequentialStationsAmount : 1\n    // For each station, create all items, then shift them down\n    for (let stationNumber = 0; stationNumber < stationsTarget; stationNumber++) {\n        const stationYOffset = (getTrainArray(bpSettings).length + 2) * stationNumber\n\n        let stationItems: iBlueprintItem[] = []\n        // TODO place storage tanks and connect them with wire\n        // Sorting not required?\n        let rightStorageTanks: iBlueprintItem[] = placeStorageTanks(bpSettings)\n        let leftStorageTanks: iBlueprintItem[] = mirrorItemsHorizontal(rightStorageTanks)\n        sortByYPosition(rightStorageTanks)\n        sortByYPosition(leftStorageTanks)\n        if (bpSettings.connectChestsWithGreenWire) {\n            connectItemsWithWire(leftStorageTanks, \"green\")\n            connectItemsWithWire(rightStorageTanks, \"green\")\n        }\n        if (bpSettings.connectChestsWithRedWire) {\n            connectItemsWithWire(leftStorageTanks, \"red\")\n            connectItemsWithWire(rightStorageTanks, \"red\")\n        }\n\n        // Mirrorable items\n        let rightSideItems: iBlueprintItem[] = []\n\n        let rightPoles = placePoles(bpSettings)\n        let leftPoles = mirrorItemsHorizontal(rightPoles)\n        let poles = mixSides(bpSettings.pumpSidesToBeUsed, leftPoles, rightPoles)\n        let leftSideItems: iBlueprintItem[] = mirrorItemsHorizontal(rightSideItems)\n        let rightPumps = placePumps(bpSettings)\n        let leftPumps = mirrorItemsHorizontal(rightPumps)\n        let rightPipes = placePipes(bpSettings)\n        let leftPipes = mirrorItemsHorizontal(rightPipes)\n\n        // Combine remaining items which were already mirrored and offset-ed\n        // TODO Add storage tanks here\n        if (bpSettings.placeLampsNearPoles) {\n            let rightLamps = placeLamps(bpSettings)\n            let leftLamps = mirrorItemsHorizontal(rightLamps)\n            rightSideItems = [...rightSideItems, ...rightLamps]\n            leftSideItems = [...leftSideItems, ...leftLamps]\n        }\n        rightSideItems = [...rightSideItems, ...rightPoles, ...rightPumps, ...rightPipes]\n        leftSideItems = [...leftSideItems, ...leftPoles, ...leftPumps, ...leftPipes]\n\n        // All items that need no mirroring (tracks, signals, train stops, refuel chests and inserter, poles for those, decider combinator)\n        stationItems = [...stationItems, ...placeTrainTracks(bpSettings)]\n        stationItems = [...stationItems, ...placeSignals(bpSettings, stationNumber)]\n        let trainStop = placeTrainStop(bpSettings)[0]\n        stationItems = [...stationItems, trainStop]\n        if (bpSettings.refillEnabled)\n            stationItems = [...stationItems, ...placeRefuelChestsAndInserters(bpSettings)]\n        if (bpSettings.refillEnabled || bpSettings.trainStopUsesEnabledCondition) {\n            let topPoles = placeTopRefuelPoles(bpSettings)\n            let bottomPoles = placeBottomRefuelPoles(bpSettings)\n            stationItems = [...stationItems, ...topPoles, ...bottomPoles]\n            if (bpSettings.trainStopUsesEnabledCondition) {\n                let decider = placeDecider(bpSettings)[0]\n                // Combine decider and trainstop with green wire\n                connectTwoEntitiesWithWire(decider, trainStop, \"green\", \"2\", \"1\")\n                // Combine decider and poles with green wire\n                // TODO Connect storage tank with pole\n                let storageTanks = mixSides(\n                    bpSettings.pumpSidesToBeUsed,\n                    leftStorageTanks,\n                    rightStorageTanks\n                )\n                sortByYPosition(storageTanks)\n                sortByYPosition(poles)\n                let combineArray = [decider, storageTanks[0], poles[0], ...topPoles]\n                sortByYPosition(combineArray)\n                connectItemsWithWire(combineArray, \"green\")\n                stationItems = [...stationItems, decider]\n            }\n        }\n        if (bpSettings.includeTrainInBlueprint) {\n            stationItems = [...stationItems, ...placeTrain(bpSettings)]\n        }\n\n        /*\n        TODO\n        liquid load/unload\n        stacker\n         */\n\n        // Combine left and right side items\n        stationItems = [\n            ...stationItems,\n            ...mixSides(bpSettings.pumpSidesToBeUsed, leftSideItems, rightSideItems),\n            ...mixSides(bpSettings.pumpSidesToBeUsed, leftStorageTanks, rightStorageTanks),\n        ]\n\n        // Move all items by sequential station offset\n        changeItemsCoordinates(stationItems, 0, stationYOffset)\n        allItems = [...allItems, ...stationItems]\n    }\n\n    // If sequential: connect train stop with next rail signal (green wire)\n    let trainStops = allItems.filter((item) => {\n        return item.name === \"train-stop\"\n    })\n    let railSignals = allItems.filter((item) => {\n        return item.name === \"rail-signal\"\n    })\n    sortByYPosition(trainStops)\n    sortByYPosition(railSignals)\n    trainStops.slice(1).forEach((stop, i) => {\n        let signal = railSignals[i]\n        connectTwoEntitiesWithWire(stop, signal, \"green\")\n    })\n\n    // All items are off by 0.5, fix here\n    changeItemsCoordinates(allItems, -0.5)\n    return allItems\n}\n","export const mirrorXOffset = -3\n\nexport let stationTypes = [\n    \"Loading Station\",\n    \"Unloading Station\",\n    \"Fluid Loading Station\",\n    \"Fluid Unloading Station\",\n    \"Stacker\",\n] as const\n\nexport let inserterTypes = [\"inserter\", \"fast-inserter\", \"stack-inserter\"] as const\nexport let filterInserters = {\n    inserter: \"filter-inserter\",\n    \"fast-inserter\": \"filter-inserter\",\n    \"stack-inserter\": \"filter-inserter\",\n} as const\nexport let basicChestTypes = [\"wooden-chest\", \"iron-chest\", \"steel-chest\"] as const\nexport let botChestTypes = [\n    \"logistic-chest-requester\",\n    \"logistic-chest-buffer\",\n    \"logistic-chest-passive-provider\",\n    \"logistic-chest-active-provider\",\n    \"logistic-chest-storage\",\n] as const\nexport let chestTypes = [...basicChestTypes, ...botChestTypes] as const\nexport let chestTypesHuman = {\n    \"wooden-chest\": \"Wooden Chest\",\n    \"iron-chest\": \"Iron Chest\",\n    \"steel-chest\": \"Steel Chest\",\n    \"logistic-chest-requester\": \"Requester Chest\",\n    \"logistic-chest-buffer\": \"Buffer Chest\",\n    \"logistic-chest-passive-provider\": \"Passive Provider Chest\",\n    \"logistic-chest-active-provider\": \"Active Provider Chest\",\n    \"logistic-chest-storage\": \"Storage Chest\",\n} as const\nexport const beltTypes = [\n    \"transport-belt\",\n    \"fast-transport-belt\",\n    \"express-transport-belt\",\n] as const\nexport let beltTypesHuman = {\n    \"transport-belt\": \"Yellow Belt\",\n    \"fast-transport-belt\": \"Red Belt\",\n    \"express-transport-belt\": \"Blue Belt\",\n} as const\nexport let splitterTypes = {\n    \"transport-belt\": \"splitter\",\n    \"fast-transport-belt\": \"fast-splitter\",\n    \"express-transport-belt\": \"express-splitter\",\n} as const\nexport let beltSides = [\"Both\", \"Right\", \"Left\"] as const\nexport let pumpSides = [\"Right\", \"Left\"] as const\nexport let beltFlowDirections = [\"Front\", \"Back\", \"None\"] as const\nexport let refillFuelTypes = [\"wood\", \"coal\", \"solid-fuel\", \"rocket-fuel\", \"nuclear-fuel\"] as const\nexport let refillFuelTypesHuman = {\n    wood: \"Wood\",\n    coal: \"Coal\",\n    \"solid-fuel\": \"Solid Fuel\",\n    \"rocket-fuel\": \"Rocket Fuel\",\n    \"nuclear-fuel\": \"Nuclear Fuel\",\n} as const\n\nexport let stackerDiagonalTypes = [\"Left-Right\", \"Right-Left\"] as const\nexport let stackerTypes = [\"Left-Left\", \"Right-Right\", ...stackerDiagonalTypes] as const\n\nexport enum DIRECTION {\n    UP = 0,\n    RIGHT = 2,\n    DOWN = 4,\n    LEFT = 6,\n}\n\nexport let enabledConditionOperators = [\">\", \"<\"] as const\nexport let enabledConditionOperatorsHuman = { \">\": \"> (more than)\", \"<\": \"< (less than)\" } as const\n\nexport let defaultSettings = {\n    // Station type\n    stationType: [...stationTypes][4],\n    stationName: \"\",\n    trainLimit: \"\",\n\n    // Sequential Station\n    sequentialStation: false,\n    sequentialStationsAmount: \"3\",\n    sequantialStationBeltsGoAllTheWay: true,\n\n    // Train type\n    doubleHeaded: true,\n    locomotivesPerEnd: \"1\",\n    cargoWagon: \"2\",\n    includeTrainInBlueprint: true,\n\n    // Pump Settings\n    pumpSidesToBeUsed: [...pumpSides][0],\n    pumpConnectWithPipe: true,\n\n    // Inserter types\n    inserterType: [...inserterTypes][0],\n    enableFilterInserters: false,\n    // Items that need to be filtered, max array length: 5\n    filterFields: Array(5).fill(\"\"),\n\n    // Chest types and settings\n    chestType: [...chestTypes][1],\n    // How many slots in the chest are enabled\n    chestLimit: \"7\",\n    // For requester and buffer chests\n    chestRequestFromBuffers: true,\n    chestRequestItemsType: Array(12).fill(\"\"),\n    chestRequestItemsAmount: Array(12).fill(\"\"),\n\n    // Belt settings\n    beltsEnabled: true,\n    beltType: [...beltTypes][1],\n    beltSidesUsed: [...beltSides][0],\n    beltFlowDirection: [...beltFlowDirections][0],\n\n    // Refill at station?\n    refillEnabled: true,\n    refillFuelType: [...refillFuelTypes][2],\n    refillFuelAmount: \"20\",\n\n    // Wire settings\n    connectChestsWithGreenWire: false,\n    connectBothSideWithGreenWire: false,\n    connectChestsWithRedWire: false,\n    connectBothSideWithRedWire: false,\n\n    // Enabled condition:\n    trainStopUsesEnabledCondition: false,\n    enabledConditionOperator: [...enabledConditionOperators][0],\n    enabledConditionAmount: \"4000\",\n\n    // Lights\n    placeLampsNearPoles: false,\n\n    // Stacker settings\n    stackerNumberParallelLanes: \"3\",\n    diagonalStacker: true,\n    stackerType: [...stackerTypes][0],\n}\n","import { iBlueprintItemWithoutNumber } from \"./interfaces\"\n\n// (0, 0) bending left 90 degrees to (-1, 1) curve\nexport const frontLeftCurve: iBlueprintItemWithoutNumber[] = [\n    {\n        name: \"curved-rail\",\n        position: {\n            x: 0,\n            y: 0,\n        },\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -4,\n            y: -4,\n        },\n        direction: 1,\n    },\n    {\n        name: \"curved-rail\",\n        position: {\n            x: -6,\n            y: -6,\n        },\n        direction: 3,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -11,\n            y: -8,\n        },\n        direction: 2,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -13,\n            y: -8,\n        },\n        direction: 2,\n    },\n]\n// (0, 0) bending right 90 degrees to (1, 1) curve\nexport const frontRightCurve: iBlueprintItemWithoutNumber[] = [\n    {\n        name: \"curved-rail\",\n        position: {\n            x: 2,\n            y: 0,\n        },\n        direction: 1,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: 5,\n            y: -5,\n        },\n        direction: 7,\n    },\n    {\n        name: \"curved-rail\",\n        position: {\n            x: 8,\n            y: -6,\n        },\n        direction: 6,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: 13,\n            y: -9,\n        },\n        direction: 2,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: 15,\n            y: -9,\n        },\n        direction: 2,\n    },\n]\n// (-1, -1) bending left 90 degreses to (0, 0)  curve\nexport const backLeftCurve: iBlueprintItemWithoutNumber[] = [\n    {\n        name: \"curved-rail\",\n        position: {\n            x: 0,\n            y: 6,\n        },\n        direction: 5,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -3,\n            y: 7,\n        },\n        direction: 3,\n    },\n    {\n        name: \"curved-rail\",\n        position: {\n            x: -6,\n            y: 12,\n        },\n        direction: 2,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -11,\n            y: 11,\n        },\n        direction: 2,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -13,\n            y: 11,\n        },\n        direction: 2,\n    },\n]\n// (1, -1) bending right 90 degreses to (0, 0)  curve\nexport const backRightCurve: iBlueprintItemWithoutNumber[] = [\n    {\n        name: \"curved-rail\",\n        position: {\n            x: 2,\n            y: 5,\n        },\n        direction: 4,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: 5,\n            y: 7,\n        },\n        direction: 5,\n    },\n    {\n        name: \"curved-rail\",\n        position: {\n            x: 8,\n            y: 11,\n        },\n        direction: 7,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: 13,\n            y: 11,\n        },\n        direction: 2,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: 15,\n            y: 11,\n        },\n        direction: 2,\n    },\n]\n","import { iBlueprintItemWithoutNumber } from \"./interfaces\"\n\n// (0, 0) bending left 45 degrees to (-1, 2) curve\n// The diagonal should be a bottomright-to-topright diagonal with the ending rail piece being the topleft piece\nexport const diagonalFrontLeftCurve: iBlueprintItemWithoutNumber[] = [\n    {\n        name: \"curved-rail\",\n        position: {\n            x: 0,\n            y: 0,\n        },\n        direction: 5,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -1,\n            y: -7,\n        },\n        direction: 0,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -1,\n            y: -9,\n        },\n        direction: 0,\n    },\n    {\n        name: \"rail-chain-signal\",\n        position: {\n            x: -3.5,\n            y: 4.5,\n        },\n        direction: 5,\n    },\n]\n// (0, 0) bending right 45 degrees to (2, 1) curve\n// The diagonal should be a bottomright-to-topright diagonal with the ending rail piece being the topleft piece\nexport const diagonalFrontRightCurve: iBlueprintItemWithoutNumber[] = [\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -3,\n            y: 2,\n        },\n        direction: 7,\n    },\n    {\n        name: \"curved-rail\",\n        position: {\n            x: 2,\n            y: 0,\n        },\n        direction: 6,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: 5,\n            y: -3,\n        },\n        direction: 2,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: 7,\n            y: -3,\n        },\n        direction: 2,\n    },\n    {\n        name: \"rail-chain-signal\",\n        position: {\n            x: -0.5,\n            y: 1.5,\n        },\n        direction: 5,\n    },\n]\n// (-2, -1) bending left 45 degreses to (0, 0) curve\nexport const diagonalBackLeftCurve: iBlueprintItemWithoutNumber[] = [\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -9 - 6,\n            y: 9 - 4,\n        },\n        direction: 2,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -7 - 6,\n            y: 9 - 4,\n        },\n        direction: 2,\n    },\n    {\n        name: \"curved-rail\",\n        position: {\n            x: -6,\n            y: 6,\n        },\n        direction: 2,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -5,\n            y: 1,\n        },\n        direction: 3,\n    },\n    {\n        name: \"rail-signal\",\n        position: {\n            x: -3.5 + 2,\n            y: 4.5 - 2,\n        },\n        direction: 5,\n    },\n]\n// (1, -2) bending right 45 degreses to (0, 0) curve\nexport const diagonalBackRightCurve: iBlueprintItemWithoutNumber[] = [\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -1 - 6,\n            y: 9,\n        },\n        direction: 0,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -1 - 6,\n            y: 11,\n        },\n        direction: 0,\n    },\n    {\n        name: \"curved-rail\",\n        position: {\n            x: -4,\n            y: 6,\n        },\n        direction: 1,\n    },\n    {\n        name: \"rail-signal\",\n        position: {\n            x: -2.5,\n            y: 3.5,\n        },\n        direction: 5,\n    },\n]\n","import { defaultSettings } from \"../constants/constants\"\nimport { iBlueprintItem, iBlueprintItemWithoutNumber } from \"../constants/interfaces\"\nimport {\n    getTrainArray,\n    placeTrainTracks,\n    placeSignals,\n    changeItemsCoordinates,\n    placeTrain,\n    resetEntityNumber,\n    assignEntityNumberToItems,\n    copyPasteItems,\n} from \"./CreateItems\"\nimport {\n    backLeftCurve,\n    backRightCurve,\n    frontLeftCurve,\n    frontRightCurve,\n} from \"../constants/verticalStackerCurves\"\nimport {\n    diagonalBackLeftCurve,\n    diagonalBackRightCurve,\n    diagonalFrontLeftCurve,\n    diagonalFrontRightCurve,\n} from \"../constants/diagonalStackerCurves\"\n\nexport const createStacker = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    resetEntityNumber()\n    if (bpSettings.diagonalStacker) {\n        return createDiagonalStacker(bpSettings)\n    } else {\n        return createVerticalStacker(bpSettings)\n    }\n}\n\nexport const createVerticalStacker = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    let trainLength = Math.floor(getTrainArray(bpSettings).length / 2) * 2\n\n    let frontCurve: iBlueprintItem[]\n    let backCurve: iBlueprintItem[]\n    if (bpSettings.stackerType === \"Left-Left\" || bpSettings.stackerType === \"Right-Left\") {\n        frontCurve = assignEntityNumberToItems(frontLeftCurve, -2, -8)\n    } else {\n        frontCurve = assignEntityNumberToItems(frontRightCurve, -2, -8)\n    }\n\n    if (bpSettings.stackerType === \"Left-Left\" || bpSettings.stackerType === \"Left-Right\") {\n        backCurve = assignEntityNumberToItems(backLeftCurve, -2, trainLength - 2)\n    } else {\n        backCurve = assignEntityNumberToItems(backRightCurve, -2, trainLength - 2)\n    }\n\n    let copyPasteBlueprint = [\n        ...placeTrainTracks(bpSettings),\n        ...placeSignals(bpSettings, 0),\n        ...frontCurve,\n        ...backCurve,\n    ]\n    if (bpSettings.includeTrainInBlueprint)\n        copyPasteBlueprint = [...copyPasteBlueprint, ...placeTrain(bpSettings)]\n    changeItemsCoordinates(copyPasteBlueprint, -0.5)\n\n    let allItems: iBlueprintItem[] = []\n    for (let i = 0; i < parseInt(bpSettings.stackerNumberParallelLanes); i++) {\n        allItems = [...allItems, ...copyPasteItems(copyPasteBlueprint, i * 4)]\n    }\n\n    return allItems\n}\n\nexport const createDiagonalStacker = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    let doubleHeadedFactor = bpSettings.doubleHeaded ? 2 : 1\n    let diagonalLength =\n        Math.round(\n            (2.5 *\n                (doubleHeadedFactor * parseInt(bpSettings.locomotivesPerEnd) +\n                    parseInt(bpSettings.cargoWagon))) /\n                2\n        ) *\n            2 +\n        1\n\n    let frontCurve: iBlueprintItem[]\n    let backCurve: iBlueprintItem[]\n    if (bpSettings.stackerType === \"Right-Left\") {\n        frontCurve = assignEntityNumberToItems(diagonalFrontLeftCurve, 8)\n        backCurve = assignEntityNumberToItems(\n            diagonalBackRightCurve,\n            8 - diagonalLength * 2,\n            diagonalLength * 2\n        )\n    } else {\n        frontCurve = assignEntityNumberToItems(diagonalFrontRightCurve, 8)\n        backCurve = assignEntityNumberToItems(\n            diagonalBackLeftCurve,\n            8 - diagonalLength * 2,\n            diagonalLength * 2\n        )\n    }\n    // TODO Support 'include train in blueprint' for diagonal stackers?\n\n    let diagonals: iBlueprintItemWithoutNumber[] = [\n        {\n            name: \"straight-rail\",\n            position: { x: 3, y: 3 },\n            direction: 7,\n        },\n        {\n            name: \"straight-rail\",\n            position: { x: 3, y: 1 },\n            direction: 3,\n        },\n    ]\n\n    let copyPasteBlueprint: iBlueprintItem[] = []\n    for (let i = 0; i < diagonalLength; i++) {\n        let newDiagonals = assignEntityNumberToItems(diagonals, -i * 2, i * 2)\n        copyPasteBlueprint = [...copyPasteBlueprint, ...newDiagonals]\n    }\n    copyPasteBlueprint = [...copyPasteBlueprint, ...frontCurve, ...backCurve]\n\n    let allItems: iBlueprintItem[] = []\n\n    for (let i = 0; i < parseInt(bpSettings.stackerNumberParallelLanes); i++) {\n        if (bpSettings.stackerType === \"Left-Right\") {\n            allItems = [...allItems, ...copyPasteItems(copyPasteBlueprint, i * 4)]\n        } else {\n            allItems = [...allItems, ...copyPasteItems(copyPasteBlueprint, 0, i * 4)]\n        }\n    }\n    return allItems\n}\n","export let CLASSES = {\n    // Title\n    title: \"self-center underline font-bold text-3xl text-gray-300\",\n\n    // Background\n    background: \"bg-gray-800 h-screen\",\n    background2: \"bg-gray-800 flex flex-col\",\n\n    // Sections\n    section: \"self-center border-black p-1 my-1 w-full bg-blue-700\",\n    gridSection: \"grid grid-cols-2 gap-2\",\n\n    // HTML Elements\n    checkboxElement: \"h-full place-self-center\",\n    labelElement: \"w-full text-white\",\n    inputTextElement: \"border-2 border-gray-600 w-full bg-blue-900 text-white text-center\",\n    selectElement: \"border-2 border-gray-600 w-full bg-blue-900 text-white text-center\",\n    buttonElement: \"border-2 border-gray-600 m-auto px-4 py-1 text-white rounded hover:bg-blue-300\",\n    // Styling doesnt apply for firefox, but works in chrome\n    optionElement: \"text-center text-white bg-blue-900\",\n}\n","import React from \"react\"\nimport { iSectionsProps } from \"../../constants/interfaces\"\nimport { CLASSES } from \"../../css/classes\"\n\nexport default function TrainTypeSettings(props: iSectionsProps) {\n    let hideIfDiagonalStacker =\n        props.userSettings.stationType === \"Stacker\" && props.userSettings.diagonalStacker\n    return (\n        <div className={CLASSES.section}>\n            <div className={CLASSES.gridSection}>\n                <input\n                    className={CLASSES.checkboxElement}\n                    type={\"checkbox\"}\n                    min={\"0\"}\n                    id={\"doubleHeaded\"}\n                    checked={props.userSettings.doubleHeaded}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            doubleHeaded: e.target.checked,\n                        })\n                    }}\n                />\n                <label className={CLASSES.labelElement} htmlFor={\"doubleHeaded\"}>\n                    Double Headed\n                </label>\n                <input\n                    className={CLASSES.inputTextElement}\n                    type={\"number\"}\n                    min={\"0\"}\n                    id={\"locomotivesPerEnd\"}\n                    value={props.userSettings.locomotivesPerEnd}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            locomotivesPerEnd: e.target.value,\n                        })\n                    }}\n                />\n                <label className={CLASSES.labelElement} htmlFor={\"locomotivesPerEnd\"}>\n                    # locomotives per end\n                </label>\n                <input\n                    className={CLASSES.inputTextElement}\n                    type={\"number\"}\n                    id={\"cargoWagon\"}\n                    value={props.userSettings.cargoWagon}\n                    onChange={(e) => {\n                        props.setUserSettings({ ...props.userSettings, cargoWagon: e.target.value })\n                    }}\n                />\n                <label className={CLASSES.labelElement} htmlFor={\"cargoWagon\"}>\n                    # cargo wagons\n                </label>\n                <input\n                    className={CLASSES.checkboxElement}\n                    hidden={hideIfDiagonalStacker}\n                    type={\"checkbox\"}\n                    id={\"includeTrainInBlueprint\"}\n                    checked={props.userSettings.includeTrainInBlueprint}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            includeTrainInBlueprint: e.target.checked,\n                        })\n                    }}\n                />\n                <label\n                    className={CLASSES.labelElement}\n                    hidden={hideIfDiagonalStacker}\n                    htmlFor={\"includeTrainInBlueprint\"}\n                >\n                    Include Train in Blueprint\n                </label>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport { inserterTypes } from \"../../constants/constants\"\nimport { iSectionsProps } from \"../../constants/interfaces\"\nimport { CLASSES } from \"../../css/classes\"\n\nexport default function InserterSettings(props: iSectionsProps) {\n    // All inserter types\n    let inserterSelect = (\n        <select\n            id={\"inserterType\"}\n            className={CLASSES.selectElement}\n            value={props.userSettings.inserterType}\n            onChange={(e) => {\n                // @ts-ignore\n                props.setUserSettings({ ...props.userSettings, inserterType: e.target.value })\n            }}\n        >\n            {inserterTypes.map((inserterType) => {\n                return (\n                    <option\n                        className={CLASSES.optionElement}\n                        key={inserterType}\n                        value={inserterType}\n                    >\n                        {inserterType}\n                    </option>\n                )\n            })}\n        </select>\n    )\n\n    let setValueAtIndex = (oldArray: string[], newValue: string, index: number) => {\n        props.setUserSettings({\n            ...props.userSettings,\n            // Replace the value at the fieldIndex using spread operator\n            filterFields: [\n                ...props.userSettings.filterFields.slice(0, index),\n                newValue,\n                ...props.userSettings.filterFields.slice(index + 1),\n            ],\n        })\n    }\n\n    let isFilterInserter = props.userSettings.enableFilterInserters\n\n    let newFilterInputField = (index: number) => {\n        return (\n            <input\n                key={`${index}`}\n                className={CLASSES.inputTextElement}\n                hidden={!isFilterInserter}\n                value={props.userSettings.filterFields[index]}\n                placeholder={\n                    index === 0 ? \"Filter 1 - e.g. 'iron-ore'\" : `Filter ${index + 1} item type`\n                }\n                onChange={(e) => {\n                    setValueAtIndex(props.userSettings.filterFields, e.target.value, index)\n                }}\n            />\n        )\n    }\n\n    // let filterInserterInputFields = []\n    let previousIsEmpty = -1\n    let filterInserterInputFields = new Array(5).fill(0).map((_, index) => {\n        if (previousIsEmpty !== -1 && previousIsEmpty < index) {\n            return undefined\n        }\n        if (props.userSettings.filterFields[index] === \"\") {\n            previousIsEmpty = index\n        }\n        return newFilterInputField(index)\n    })\n\n    return (\n        <div className={CLASSES.section}>\n            <div className={CLASSES.gridSection}>\n                {inserterSelect}\n                <label className={CLASSES.labelElement} htmlFor={\"inserterType\"}>\n                    Inserter Type\n                </label>\n                <input\n                    className={CLASSES.checkboxElement}\n                    id={\"filterInserterEnabled\"}\n                    type={\"checkbox\"}\n                    checked={props.userSettings.enableFilterInserters}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            enableFilterInserters: e.target.checked,\n                        })\n                    }}\n                />\n                <label className={CLASSES.labelElement} htmlFor={\"filterInserterEnabled\"}>\n                    Enabled Filter Inserters\n                </label>\n                {filterInserterInputFields}\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport { CLASSES } from \"../../css/classes\"\nimport { iSectionsProps } from \"../../constants/interfaces\"\n\nexport default function SequentialStationSettings(props: iSectionsProps) {\n    return (\n        <div className={CLASSES.section}>\n            <div className={CLASSES.gridSection}>\n                <input\n                    className={CLASSES.checkboxElement}\n                    type={\"checkbox\"}\n                    id={\"sequentialStation\"}\n                    checked={props.userSettings.sequentialStation}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            sequentialStation: e.target.checked,\n                        })\n                    }}\n                />\n                {/*TODO Add tooltips explaining the option*/}\n                <label className={CLASSES.labelElement} htmlFor={\"sequentialStation\"}>\n                    Sequential Station?\n                </label>\n                <input\n                    className={CLASSES.inputTextElement}\n                    hidden={!props.userSettings.sequentialStation}\n                    type={\"number\"}\n                    id={\"sequentialStationsAmount\"}\n                    value={props.userSettings.sequentialStationsAmount}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            sequentialStationsAmount: e.target.value,\n                        })\n                    }}\n                />\n                <label\n                    className={CLASSES.labelElement}\n                    hidden={!props.userSettings.sequentialStation}\n                    htmlFor={\"sequentialStationsAmount\"}\n                >\n                    # sequential stations in a row\n                </label>\n                <input\n                    className={CLASSES.checkboxElement}\n                    hidden={!props.userSettings.sequentialStation}\n                    type={\"checkbox\"}\n                    id={\"sequantialStationBeltsGoAllTheWay\"}\n                    checked={props.userSettings.sequantialStationBeltsGoAllTheWay}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            sequantialStationBeltsGoAllTheWay: e.target.checked,\n                        })\n                    }}\n                />\n                <label\n                    className={CLASSES.labelElement}\n                    hidden={!props.userSettings.sequentialStation}\n                    htmlFor={\"sequantialStationBeltsGoAllTheWay\"}\n                >\n                    Belts go all the way\n                </label>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport { iSectionsProps } from \"../../constants/interfaces\"\nimport { CLASSES } from \"../../css/classes\"\nimport { chestTypes, chestTypesHuman } from \"../../constants/constants\"\n\nexport default function ChestTypeSettings(props: iSectionsProps) {\n    let chestTypesHtml = (\n        <select\n            id={\"chestTypes\"}\n            className={CLASSES.selectElement}\n            value={props.userSettings.chestType}\n            onChange={(e) => {\n                // @ts-ignore\n                props.setUserSettings({ ...props.userSettings, chestType: e.target.value })\n            }}\n        >\n            {chestTypes.map((chestType) => {\n                return (\n                    <option className={CLASSES.optionElement} key={chestType} value={chestType}>\n                        {chestTypesHuman[chestType]}\n                    </option>\n                )\n            })}\n        </select>\n    )\n\n    let isRequesterChest = [\"logistic-chest-requester\", \"logistic-chest-buffer\"].includes(\n        props.userSettings.chestType\n    )\n    let canRequestFromBufferChests = props.userSettings.chestType === \"logistic-chest-requester\"\n\n    let previousIsEmpty = -1\n    let chestRequests = new Array(24).fill(0).map((_, i) => {\n        let index = Math.floor(i / 2)\n        if (previousIsEmpty !== -1 && previousIsEmpty < index) {\n            return undefined\n        }\n        if (props.userSettings.chestRequestItemsType[index] === \"\") {\n            previousIsEmpty = index\n        }\n        if (i % 2 === 0) {\n            return (\n                <input\n                    className={CLASSES.inputTextElement}\n                    hidden={!isRequesterChest}\n                    key={`${index} chestRequestItemsType`}\n                    type={\"text\"}\n                    value={props.userSettings.chestRequestItemsType[index]}\n                    placeholder={`Request ${index + 1} item type`}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            chestRequestItemsType: [\n                                ...props.userSettings.chestRequestItemsType.slice(0, index),\n                                e.target.value,\n                                ...props.userSettings.chestRequestItemsType.slice(index + 1),\n                            ],\n                        })\n                    }}\n                />\n            )\n        } else {\n            return (\n                <input\n                    className={CLASSES.inputTextElement}\n                    hidden={!isRequesterChest}\n                    key={`${index} chestRequestItemsAmount`}\n                    type={\"number\"}\n                    min={\"0\"}\n                    value={props.userSettings.chestRequestItemsAmount[index]}\n                    placeholder={`Request ${index + 1} amount`}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            chestRequestItemsAmount: [\n                                ...props.userSettings.chestRequestItemsAmount.slice(0, index),\n                                e.target.value,\n                                ...props.userSettings.chestRequestItemsAmount.slice(index + 1),\n                            ],\n                        })\n                    }}\n                />\n            )\n        }\n    })\n\n    return (\n        <div className={CLASSES.section}>\n            <div className={CLASSES.gridSection}>\n                {chestTypesHtml}\n                <label className={CLASSES.labelElement} htmlFor={\"chestTypes\"}>\n                    Chest Type\n                </label>\n                <input\n                    className={CLASSES.inputTextElement}\n                    type={\"number\"}\n                    value={props.userSettings.chestLimit}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            chestLimit: e.target.value,\n                        })\n                    }}\n                />\n                <label className={CLASSES.labelElement} htmlFor={\"chestTypes\"}>\n                    Chest limit\n                </label>\n                {/*TODO hide if request or buffer chest is NOT selected*/}\n                <input\n                    className={CLASSES.checkboxElement}\n                    hidden={!canRequestFromBufferChests}\n                    id={\"requestFromBuffers\"}\n                    type={\"checkbox\"}\n                    checked={props.userSettings.chestRequestFromBuffers}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            chestRequestFromBuffers: e.target.checked,\n                        })\n                    }}\n                />\n                <label\n                    className={CLASSES.labelElement}\n                    hidden={!canRequestFromBufferChests}\n                    htmlFor={\"requestFromBuffers\"}\n                >\n                    Request from Buffers\n                </label>\n                {chestRequests}\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport { iSectionsProps } from \"../../constants/interfaces\"\nimport { CLASSES } from \"../../css/classes\"\nimport { beltFlowDirections, beltSides, beltTypes, beltTypesHuman } from \"../../constants/constants\"\n\nexport default function BeltTypeSettings(props: iSectionsProps) {\n    let beltTypesHtml = (\n        <select\n            id={\"beltType\"}\n            className={CLASSES.selectElement}\n            value={props.userSettings.beltType}\n            onChange={(e) => {\n                // @ts-ignore\n                props.setUserSettings({ ...props.userSettings, beltType: e.target.value })\n            }}\n        >\n            {beltTypes.map((beltType) => {\n                return (\n                    <option className={CLASSES.optionElement} key={beltType} value={beltType}>\n                        {beltTypesHuman[beltType]}\n                    </option>\n                )\n            })}\n        </select>\n    )\n\n    let beltSideHtml = (\n        <select\n            id={\"sidesUsed\"}\n            className={CLASSES.selectElement}\n            value={props.userSettings.beltSidesUsed}\n            onChange={(e) => {\n                // @ts-ignore\n                props.setUserSettings({ ...props.userSettings, beltSidesUsed: e.target.value })\n            }}\n        >\n            {beltSides.map((beltSide) => {\n                return (\n                    <option className={CLASSES.optionElement} key={beltSide} value={beltSide}>\n                        {beltSide}\n                    </option>\n                )\n            })}\n        </select>\n    )\n    let beltFlowHtml = (\n        <select\n            id={\"beltFlow\"}\n            className={CLASSES.selectElement}\n            value={props.userSettings.beltFlowDirection}\n            onChange={(e) => {\n                // @ts-ignore\n                props.setUserSettings({ ...props.userSettings, beltFlowDirection: e.target.value })\n            }}\n        >\n            {beltFlowDirections.map((beltFlow) => {\n                return (\n                    <option className={CLASSES.optionElement} key={beltFlow} value={beltFlow}>\n                        {beltFlow}\n                    </option>\n                )\n            })}\n        </select>\n    )\n\n    return (\n        <div className={CLASSES.section}>\n            <div className={CLASSES.gridSection}>\n                <input\n                    className={CLASSES.checkboxElement}\n                    type={\"checkbox\"}\n                    id={\"enableBelts\"}\n                    checked={props.userSettings.beltsEnabled}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            beltsEnabled: e.target.checked,\n                        })\n                    }}\n                />\n                <label className={CLASSES.labelElement} htmlFor={\"enableBelts\"}>\n                    Enable Belts\n                </label>\n                {beltTypesHtml}\n                <label className={CLASSES.labelElement} htmlFor={\"beltType\"}>\n                    Belt Type\n                </label>\n                {beltSideHtml}\n                <label className={CLASSES.labelElement} htmlFor={\"sidesUsed\"}>\n                    Sides to be used\n                </label>\n                {beltFlowHtml}\n                <label className={CLASSES.labelElement} htmlFor={\"beltFlow\"}>\n                    Belt Flow\n                </label>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport { iSectionsProps } from \"../../constants/interfaces\"\nimport { CLASSES } from \"../../css/classes\"\nimport { refillFuelTypes, refillFuelTypesHuman } from \"../../constants/constants\"\n\nexport default function RefillSettings(props: iSectionsProps) {\n    let fuelTypesHtml = (\n        <select\n            className={CLASSES.selectElement}\n            hidden={!props.userSettings.refillEnabled}\n            value={props.userSettings.refillFuelType}\n            onChange={(e) => {\n                props.setUserSettings({\n                    ...props.userSettings,\n                    // @ts-ignore\n                    refillFuelType: e.target.value,\n                })\n            }}\n        >\n            {refillFuelTypes.map((fuelType) => {\n                return (\n                    <option className={CLASSES.optionElement} key={fuelType} value={fuelType}>\n                        {refillFuelTypesHuman[fuelType]}\n                    </option>\n                )\n            })}\n        </select>\n    )\n\n    return (\n        <div className={CLASSES.section}>\n            <div className={CLASSES.gridSection}>\n                <input\n                    className={CLASSES.checkboxElement}\n                    type={\"checkbox\"}\n                    id={\"refillEnabled\"}\n                    checked={props.userSettings.refillEnabled}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            refillEnabled: e.target.checked,\n                        })\n                    }}\n                />\n                <label className={CLASSES.labelElement} htmlFor={\"refillEnabled\"}>\n                    Refill at this Station?\n                </label>\n                {fuelTypesHtml}\n                <label\n                    className={CLASSES.labelElement}\n                    hidden={!props.userSettings.refillEnabled}\n                    htmlFor={\"fuelTypes\"}\n                >\n                    Fuel Type\n                </label>\n                <input\n                    type={\"number\"}\n                    className={CLASSES.inputTextElement}\n                    hidden={!props.userSettings.refillEnabled}\n                    value={props.userSettings.refillFuelAmount}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            refillFuelAmount: e.target.value,\n                        })\n                    }}\n                />\n                <label\n                    className={CLASSES.labelElement}\n                    hidden={!props.userSettings.refillEnabled}\n                    htmlFor={\"fuelAmount\"}\n                >\n                    Amount\n                </label>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport { iSectionsProps } from \"../../constants/interfaces\"\nimport { CLASSES } from \"../../css/classes\"\n\nexport default function WireSettings(props: iSectionsProps) {\n    let normalTypes = [\"Loading Station\", \"Unloading Station\"]\n    let fluidTypes = [\"Fluid Loading Station\", \"Fluid Unloading Station\"]\n    let hiddenWhenNormalStation = normalTypes.includes(props.userSettings.stationType)\n    let hiddenWhenFluidStation = fluidTypes.includes(props.userSettings.stationType)\n    let hiddenWhenNotBothSides = props.userSettings.beltSidesUsed !== \"Both\"\n\n    let myCheckbox = (\n        keyName:\n            | \"connectChestsWithGreenWire\"\n            | \"connectBothSideWithGreenWire\"\n            | \"connectChestsWithRedWire\"\n            | \"connectBothSideWithRedWire\",\n        hidden: boolean = false\n    ) => {\n        return (\n            <input\n                className={CLASSES.checkboxElement}\n                hidden={hidden}\n                key={keyName}\n                type={\"checkbox\"}\n                id={keyName}\n                checked={props.userSettings[keyName]}\n                onChange={(e) => {\n                    props.setUserSettings({\n                        ...props.userSettings,\n                        [keyName]: e.target.checked,\n                    })\n                }}\n            />\n        )\n    }\n\n    return (\n        <div className={CLASSES.section}>\n            <div className={CLASSES.gridSection}>\n                {myCheckbox(\"connectChestsWithGreenWire\")}\n                <label\n                    className={CLASSES.labelElement}\n                    hidden={hiddenWhenFluidStation}\n                    htmlFor={\"connectChestsWithGreenWire\"}\n                >\n                    Connect chests with green wire?\n                </label>\n                <label\n                    className={CLASSES.labelElement}\n                    hidden={hiddenWhenNormalStation}\n                    htmlFor={\"connectChestsWithGreenWire\"}\n                >\n                    Connect storage tanks with green wire?\n                </label>\n                {myCheckbox(\n                    \"connectBothSideWithGreenWire\",\n                    hiddenWhenFluidStation || hiddenWhenNotBothSides\n                )}\n                <label\n                    className={CLASSES.labelElement}\n                    hidden={hiddenWhenFluidStation || hiddenWhenNotBothSides}\n                    htmlFor={\"connectBothSideWithGreenWire\"}\n                >\n                    Connect left and right side with green wire?\n                </label>\n                {myCheckbox(\"connectChestsWithRedWire\")}\n                <label\n                    className={CLASSES.labelElement}\n                    hidden={hiddenWhenFluidStation}\n                    htmlFor={\"connectChestsWithRedWire\"}\n                >\n                    Connect chests with red wire?\n                </label>\n                <label\n                    className={CLASSES.labelElement}\n                    hidden={hiddenWhenNormalStation}\n                    htmlFor={\"connectChestsWithGreenWire\"}\n                >\n                    Connect storage tanks with red wire?\n                </label>\n                {myCheckbox(\n                    \"connectBothSideWithRedWire\",\n                    hiddenWhenFluidStation || hiddenWhenNotBothSides\n                )}\n                <label\n                    className={CLASSES.labelElement}\n                    hidden={hiddenWhenFluidStation || hiddenWhenNotBothSides}\n                    htmlFor={\"connectBothSideWithRedWire\"}\n                >\n                    Connect left and right side with red wire?\n                </label>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport { iSectionsProps } from \"../../constants/interfaces\"\nimport { CLASSES } from \"../../css/classes\"\nimport {\n    enabledConditionOperators,\n    enabledConditionOperatorsHuman,\n} from \"../../constants/constants\"\n\nexport default function EnabledConditionSettings(props: iSectionsProps) {\n    let enabledConditionOperatorHtml = (\n        <select\n            className={CLASSES.selectElement}\n            value={props.userSettings.enabledConditionOperator}\n            onChange={(e) => {\n                props.setUserSettings({\n                    ...props.userSettings,\n                    // @ts-ignore\n                    enabledConditionOperator: e.target.value,\n                })\n            }}\n        >\n            {enabledConditionOperators.map((operator) => {\n                return (\n                    <option className={CLASSES.optionElement} key={operator} value={operator}>\n                        {enabledConditionOperatorsHuman[operator]}\n                    </option>\n                )\n            })}\n        </select>\n    )\n\n    return (\n        <div className={CLASSES.section}>\n            <div className={CLASSES.gridSection}>\n                <input\n                    className={CLASSES.checkboxElement}\n                    type={\"checkbox\"}\n                    id={\"trainStopUsesEnabledCondition\"}\n                    checked={props.userSettings.trainStopUsesEnabledCondition}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            trainStopUsesEnabledCondition: e.target.checked,\n                        })\n                    }}\n                />\n                <label className={CLASSES.labelElement} htmlFor={\"trainStopUsesEnabledCondition\"}>\n                    Train stop uses 'enabled-condition'?\n                </label>\n                {enabledConditionOperatorHtml}\n                {/*<input type={\"text\"} value={props.userSettings.enabledConditionOperator} onChange={} />*/}\n                <input\n                    type={\"number\"}\n                    className={CLASSES.selectElement}\n                    placeholder={\"Amount of items\"}\n                    value={props.userSettings.enabledConditionAmount}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            enabledConditionAmount: e.target.value,\n                        })\n                    }}\n                />\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport { iSectionsProps } from \"../../constants/interfaces\"\nimport { CLASSES } from \"../../css/classes\"\n\nexport default function LampsSettings(props: iSectionsProps) {\n    return (\n        <div className={CLASSES.section}>\n            <div className={CLASSES.gridSection}>\n                <input\n                    className={CLASSES.checkboxElement}\n                    type={\"checkbox\"}\n                    id={\"placeLampsNearPoles\"}\n                    checked={props.userSettings.placeLampsNearPoles}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            placeLampsNearPoles: e.target.checked,\n                        })\n                    }}\n                />\n                <label className={CLASSES.labelElement} htmlFor={\"placeLampsNearPoles\"}>\n                    Place lamps near poles?\n                </label>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport { iSectionsProps } from \"../../constants/interfaces\"\nimport { CLASSES } from \"../../css/classes\"\n\nexport default function StationNameSettings(props: iSectionsProps) {\n    return (\n        <div>\n            <div className={CLASSES.section}>\n                <input\n                    className={CLASSES.inputTextElement}\n                    type={\"text\"}\n                    placeholder={\"Station Name\"}\n                    value={props.userSettings.stationName}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            stationName: e.target.value,\n                        })\n                    }}\n                />\n                <input\n                    className={CLASSES.inputTextElement}\n                    type={\"number\"}\n                    placeholder={\"Train limit\"}\n                    value={props.userSettings.trainLimit}\n                    min={\"-1\"}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            trainLimit: e.target.value,\n                        })\n                    }}\n                />\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport TrainTypeSettings from \"../Sections/TrainTypeSettings\"\nimport { iSectionsProps } from \"../../constants/interfaces\"\nimport InserterSettings from \"../Sections/InserterSettings\"\nimport SequentialStationSettings from \"../Sections/SequentialStationSettings\"\nimport ChestTypeSettings from \"../Sections/ChestTypeSettings\"\nimport BeltTypeSettings from \"../Sections/BeltTypeSettings\"\nimport RefillSettings from \"../Sections/RefillSettings\"\nimport WireSettings from \"../Sections/WireSettings\"\nimport EnabledConditionSettings from \"../Sections/EnabledConditionSettings\"\nimport LampsSettings from \"../Sections/LampsSettings\"\nimport StationNameSettings from \"../Sections/StationNameSettings\"\n\nexport default function NormalStation(props: iSectionsProps) {\n    return (\n        <div className={\"flex flex-col\"}>\n            <div className={\"grid gap-x-4 grid-cols-1 lg:grid-cols-2\"}>\n                <div>\n                    <StationNameSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                    <SequentialStationSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                    <TrainTypeSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                    <InserterSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n\n                    <ChestTypeSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                </div>\n                <div>\n                    <BeltTypeSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n\n                    <RefillSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                    <WireSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                    <EnabledConditionSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                    <LampsSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport { iSectionsProps } from \"../../constants/interfaces\"\nimport { CLASSES } from \"../../css/classes\"\nimport { pumpSides } from \"../../constants/constants\"\n\nexport default function FluidSettings(props: iSectionsProps) {\n    let pumpSideHtml = (\n        <select\n            id={\"sidesUsed\"}\n            className={CLASSES.selectElement}\n            value={props.userSettings.pumpSidesToBeUsed}\n            onChange={(e) => {\n                // @ts-ignore\n                props.setUserSettings({ ...props.userSettings, pumpSidesToBeUsed: e.target.value })\n            }}\n        >\n            {pumpSides.map((pumpSide) => {\n                return (\n                    <option className={CLASSES.optionElement} key={pumpSide} value={pumpSide}>\n                        {pumpSide}\n                    </option>\n                )\n            })}\n        </select>\n    )\n\n    return (\n        <div className={CLASSES.section}>\n            <div className={CLASSES.gridSection}>\n                {pumpSideHtml}\n                <label className={CLASSES.labelElement} htmlFor={\"sidesUsed\"}>\n                    Sides to be used\n                </label>\n                <input\n                    className={CLASSES.checkboxElement}\n                    type={\"checkbox\"}\n                    id={\"connectTanks\"}\n                    checked={props.userSettings.pumpConnectWithPipe}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            pumpConnectWithPipe: e.target.checked,\n                        })\n                    }}\n                />\n                <label className={CLASSES.labelElement} htmlFor={\"connectTanks\"}>\n                    Connect tank with pipe?\n                </label>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport TrainTypeSettings from \"../Sections/TrainTypeSettings\"\nimport { iSectionsProps } from \"../../constants/interfaces\"\nimport RefillSettings from \"../Sections/RefillSettings\"\nimport WireSettings from \"../Sections/WireSettings\"\nimport EnabledConditionSettings from \"../Sections/EnabledConditionSettings\"\nimport LampsSettings from \"../Sections/LampsSettings\"\nimport StationNameSettings from \"../Sections/StationNameSettings\"\nimport FluidSettings from \"../Sections/FluidSettings\"\n\nexport default function FluidStation(props: iSectionsProps) {\n    return (\n        <div className={\"flex flex-col\"}>\n            <div className={\"grid gap-x-4 grid-cols-1 lg:grid-cols-2\"}>\n                <div>\n                    <StationNameSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                    <TrainTypeSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                    <FluidSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                    <RefillSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                </div>\n                <div>\n                    <WireSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                    <EnabledConditionSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                    <LampsSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport { CLASSES } from \"../css/classes\"\n\nexport default function Title(props: any) {\n    return <div className={CLASSES.title}>Burny's Train Station Blueprint Creator</div>\n}\n","import React from \"react\"\n\nexport default function Footer(props: any) {\n    return <div>FOOTER</div>\n}\n","import React from \"react\"\nimport { iSectionsProps } from \"../../constants/interfaces\"\nimport { CLASSES } from \"../../css/classes\"\nimport { stackerDiagonalTypes, stackerTypes } from \"../../constants/constants\"\n\nexport default function StackerSettings(props: iSectionsProps) {\n    let myCheckbox = (keyName: \"diagonalStacker\") => {\n        return (\n            <input\n                className={CLASSES.checkboxElement}\n                key={keyName}\n                type={\"checkbox\"}\n                id={keyName}\n                checked={props.userSettings[keyName]}\n                onChange={(e) => {\n                    props.setUserSettings({\n                        ...props.userSettings,\n                        [keyName]: e.target.checked,\n                    })\n                }}\n            />\n        )\n    }\n\n    let stackerTypesHtml = (\n        <select\n            className={CLASSES.selectElement}\n            value={props.userSettings.stackerType}\n            onChange={(e) => {\n                props.setUserSettings({\n                    ...props.userSettings,\n                    // @ts-ignore\n                    stackerType: e.target.value,\n                })\n            }}\n        >\n            {stackerTypes.map((type) => {\n                if (props.userSettings.diagonalStacker) return undefined\n                return (\n                    <option key={type} value={type}>\n                        {type}\n                    </option>\n                )\n            })}\n            {stackerDiagonalTypes.map((type) => {\n                if (!props.userSettings.diagonalStacker) return undefined\n                return (\n                    <option key={type} value={type}>\n                        {type}\n                    </option>\n                )\n            })}\n        </select>\n    )\n\n    return (\n        <div className={CLASSES.section}>\n            <div className={CLASSES.gridSection}>\n                <input\n                    className={CLASSES.inputTextElement}\n                    id={\"stackerNumberParallelLanes\"}\n                    value={props.userSettings.stackerNumberParallelLanes}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            stackerNumberParallelLanes: e.target.value,\n                        })\n                    }}\n                />\n                <label className={CLASSES.labelElement} htmlFor={\"stackerNumberParallelLanes\"}>\n                    # of parallel lanes\n                </label>\n                {myCheckbox(\"diagonalStacker\")}\n                <label className={CLASSES.labelElement} htmlFor={\"diagonalStacker\"}>\n                    Diagonal Stacker?\n                </label>\n                {stackerTypesHtml}\n                <label className={CLASSES.labelElement} htmlFor={\"leftRightStacker\"}>\n                    Stacker Type\n                </label>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport TrainTypeSettings from \"../Sections/TrainTypeSettings\"\nimport { iSectionsProps } from \"../../constants/interfaces\"\nimport StackerSettings from \"../Sections/StackerSettings\"\n\nexport default function Stacker(props: iSectionsProps) {\n    return (\n        <div className={\"flex flex-col\"}>\n            <TrainTypeSettings\n                userSettings={props.userSettings}\n                setUserSettings={props.setUserSettings}\n            />\n            <StackerSettings\n                userSettings={props.userSettings}\n                setUserSettings={props.setUserSettings}\n            />\n        </div>\n    )\n}\n","import React, { useState } from \"react\"\nimport NormalStation from \"./StationTypes/NormalStation\"\nimport FluidStation from \"./StationTypes/FluidStation\"\nimport Title from \"./Title\"\nimport { defaultSettings, stationTypes } from \"../constants/constants\"\nimport { CLASSES } from \"../css/classes\"\nimport Footer from \"./Footer\"\nimport Stacker from \"./StationTypes/Stacker\"\nimport copy from \"copy-to-clipboard\"\nimport { createBlueprint, createBlueprintString } from \"../BlueprintCreation/CreateBlueprint\"\nconst cloneDeep = require(\"clone-deep\")\n\nexport default function Website(props: any) {\n    let [userSettings, setUserSettings] = useState(cloneDeep(defaultSettings))\n    let [blueprintString, setBlueprintString] = useState(\"\")\n\n    let stationTypeSelect = (\n        <select\n            className={CLASSES.selectElement}\n            value={userSettings.stationType}\n            onChange={(e) => {\n                setUserSettings({ ...userSettings, stationType: e.target.value })\n            }}\n        >\n            {stationTypes.map((stationType) => {\n                return (\n                    <option className={CLASSES.optionElement} key={stationType} value={stationType}>\n                        {stationType}\n                    </option>\n                )\n            })}\n        </select>\n    )\n\n    // Select which sub-station settings are available\n    let stationTypeHtml: JSX.Element = <div>ERROR LOADING CORRECT STATION TYPE</div>\n    if ([\"Loading Station\", \"Unloading Station\"].includes(userSettings.stationType)) {\n        stationTypeHtml = (\n            <NormalStation userSettings={userSettings} setUserSettings={setUserSettings} />\n        )\n    } else if (\n        [\"Fluid Loading Station\", \"Fluid Unloading Station\"].includes(userSettings.stationType)\n    ) {\n        stationTypeHtml = (\n            <FluidStation userSettings={userSettings} setUserSettings={setUserSettings} />\n        )\n    } else if (userSettings.stationType === \"Stacker\") {\n        stationTypeHtml = <Stacker userSettings={userSettings} setUserSettings={setUserSettings} />\n    }\n\n    return (\n        <div className={CLASSES.background}>\n            <div className={CLASSES.background2}>\n                <Title />\n                <div className={\"grid grid-cols-1 justify-items-center m-auto bg-blue-800\"}>\n                    <div className={CLASSES.section}>{stationTypeSelect}</div>\n                    {stationTypeHtml}\n                    <button\n                        className={CLASSES.buttonElement}\n                        onClick={(e) => {\n                            setBlueprintString(createBlueprintString(createBlueprint(userSettings)))\n                        }}\n                    >\n                        Generate Blueprint\n                    </button>\n                    <input\n                        className={CLASSES.inputTextElement}\n                        placeholder={\"Blueprint string will be generated here.\"}\n                        value={blueprintString}\n                        readOnly\n                    />\n                    <button\n                        className={CLASSES.buttonElement}\n                        onClick={(e) => {\n                            // Copy to clipboard\n                            copy(blueprintString, {\n                                debug: true,\n                                message: \"asd\",\n                            })\n                        }}\n                    >\n                        Copy to Clipboard\n                    </button>\n                    <Footer />\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport Website from \"./Website\"\n\nexport default function MyRouter(props: any) {\n    return (\n        // TODO use path to be able to link a setting to a friend\n        <Website />\n    )\n}\n","import React from \"react\"\nimport MyRouter from \"./components/MyRouter\"\n\nfunction App() {\n    return <MyRouter />\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void\n    onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\")\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { \"Service-Worker\": \"script\" },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\")\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\"No internet connection found. App is running in offline mode.\")\n        })\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister()\n            })\n            .catch((error) => {\n                console.error(error.message)\n            })\n    }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport \"./css/style.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}