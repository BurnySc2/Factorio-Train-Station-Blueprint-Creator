{"version":3,"sources":["css/classes.ts","constants/tooltips.tsx","components/Sections/TrainTypeSettings.tsx","components/Sections/InserterSettings.tsx","components/Sections/ChestTypeSettings.tsx","components/Sections/BeltTypeSettings.tsx","components/Sections/RefillSettings.tsx","components/Sections/WireSettings.tsx","components/Sections/EnabledConditionSettings.tsx","components/Sections/LampsSettings.tsx","components/Sections/StationNameSettings.tsx","components/Sections/StationSettings.tsx","components/StationTypes/NormalStation.tsx","components/Sections/FluidSettings.tsx","components/StationTypes/FluidStation.tsx","components/Title.tsx","components/Footer.tsx","components/Sections/StackerSettings.tsx","components/StationTypes/Stacker.tsx","components/WarningMessage.tsx","components/ErrorMessage.tsx","components/Website.tsx","components/MyRouter.tsx","App.tsx","index.tsx","constants/helper.ts","BlueprintCreation/CreateItems.ts","constants/constants.ts","BlueprintCreation/CreateBlueprint.ts","BlueprintCreation/CreateNormalStation.ts","BlueprintCreation/CreateFluidStation.ts","constants/verticalStackerCurves.ts","constants/diagonalStackerCurves.ts","BlueprintCreation/CreateStacker.ts"],"names":["CLASSES","TOOLTIPS","trainLimit","trainLimitNumberInput","doubleHeaded","includeTrainInBlueprint","enableFilterInserters","chestType","chestLimit","beltFlow","refillEnabled","connectChestsWithGreenWire","connectBothSideWithGreenWire","connectChestsWithRedWire","connectBothSideWithRedWire","madzuriEvenLoadUnload","trainStopUsesEnabledCondition","diagonalStacker","TrainTypeSettings","props","hideIfDiagonalStacker","userSettings","stationType","cargoWagonName","fluidStation","includes","className","type","min","id","data-tip","checked","onChange","e","setUserSettings","target","htmlFor","value","locomotivesPerEnd","cargoWagon","hidden","InserterSettings","inserterSelect","inserterType","inserterTypes","map","inserterTypesHuman","isFilterInserter","newFilterInputField","index","list","filterFields","placeholder","oldArray","newValue","slice","setValueAtIndex","previousIsEmpty","filterInserterInputFields","Array","fill","_","ChestTypeSettings","chestTypesHtml","chestTypes","chestTypesHuman","isRequesterChest","requestChestTypes","canRequestFromBufferChests","chestRequests","i","Math","floor","chestRequestItemsType","chestRequestItemsAmount","chestRequestFromBuffers","BeltTypeSettings","hideIfBotChests","botChestTypes","beltTypesHtml","beltType","beltTypes","beltTypesHuman","beltSideHtml","beltSidesUsed","beltSides","beltSide","beltFlowHtml","beltFlowDirection","beltFlowDirections","RefillSettings","fuelTypesHtml","refillFuelType","refillFuelTypes","fuelType","refillFuelTypesHuman","refillFuelAmount","WireSettings","hiddenWhenNormalStation","hiddenWhenFluidStation","hiddenWhenNotBothSides","myCheckbox","keyName","EnabledConditionSettings","hideIfCheckboxDisabled","enabledConditionOperatorHtml","enabledConditionOperator","enabledConditionOperators","operator","enabledConditionOperatorsHuman","enabledConditionAmount","LampsSettings","placeLampsNearPoles","StationNameSettings","stationName","StationSettings","hideWhenTrainLimitIsNotDynamic","hideWhenFluidStation","hideWhenNotUnloadingStation","useEffect","applyArray","calcCombinatorSettings","trainLimitToAtMostOneTrain","trainLimitStackSize","myInput","key","mySelectOperator","operatorTypes","trainLimitHtml","optionStr","combinatorArray","trainLimitArithmetic1Constant1","trainLimitArithmetic1Operator","trainLimitArithmetic1Constant2","trainLimitArithmetic2Constant1","trainLimitArithmetic2Operator","trainLimitArithmetic2Constant2","NormalStation","FluidSettings","pumpSideHtml","pumpSidesToBeUsed","pumpSides","pumpSide","pumpStorageTankColumns","pumpConnectWithPipe","FluidStation","Title","rel","href","Footer","StackerSettings","stackerTypesHtml","stackerType","stackerTypes","stackerDiagonalTypes","stackerNumberParallelLanes","Stacker","WarningMessage","warningMessage","ErrorMessage","errorMessage","cloneDeep","require","isEqual","pick","Website","useState","defaultSettings","blueprintString","setBlueprintString","setWarningMessage","setErrorMessage","history","useHistory","params","URLSearchParams","useLocation","search","settingsFromUrl","get","decodedSettings","decodeSettings","console","log","currentSettings","newWarningMessage","checkForHintsBlueprintSettings","newErrorMessage","validateBlueprintSettings","getUrlParams","bpSettings","keysToKeep","Object","keys","bpSettingsPick","urlString","encodeSettings","settings","toString","stationTypeSelect","stationTypes","stationTypeHtml","normalStation","itemdatalist","itemlist","itemInfo","onClick","createBlueprintString","createBlueprint","newUrl","push","replace","assignSettingsToUrlParams","length","readOnly","copy","debug","message","websiteUrl","place","multiline","MyRouter","path","App","ReactDOM","render","StrictMode","document","getElementById","zlib","verifyNumberInput","isNaN","parseInt","itemType","numberAsString","allowedCharacters","cargoCount","sidesFactor","totalChestCount","connectedChestCount","chestSlotsCount","chestTotalItemCount","trainTotalItemCount","stackSize","round","minuend","deflateSync","JSON","stringify","level","parse","inflateSync","Buffer","from","entityNumber","resetEntityNumber","newItem","itemName","x","y","options","item","entity_number","name","position","direction","orientation","bar","filters","request_filters","request_from_buffers","control_behavior","station","manual_trains_limit","trains_limit_signal","assignEntityNumberToItems","items","xOffset","yOffset","getTrainArray","startOffset","bottomOffset","returnArray","getFrontLocomotivesArray","getBackLocomotivesArray","getCargoArray","placeTrainTracks","forEach","placeSignals","singleHeadedOffset","end","start","DIRECTION","DOWN","UP","placeTrainStop","undefined","controlBehavior","circuit_enable_disable","circuit_condition","first_signal","constant","comparator","set_trains_limit","placeTrain","count","locoCount","placeInserters","filterArray","innerInserters","outerInserters","filterInserters","inserterDirection","RIGHT","LEFT","newInserter","inserterStackSize","placeChests","requests","itemAmount","requestFromBuffers","placeLoadingBelts","placeUnloadingBelts","placePumps","pumpDirection","placeStorageTanks","tankDirection","placePipes","array","j","placeVerticalBelts","splitters","mode","beltEnd","sortByYPosition","splitter","reverse","placeSplitters","splitterType","splitterTypes","splitterDirection","placePoles","placeLamps","placeMadzuriArithmeticCombinator","side","chests","inserters","lampOffset","connectBothSidesFactor","arithmetic","arithmetic_conditions","second_constant","operation","output_signal","chest","inserter","connectTwoEntitiesWithWire","placeEnabledConditionDecider","topPole","trainStop","decider","decider_conditions","copy_count_from_input","placeDynamicTrainLimitCombinators","arithmetic1Xvalue","arithmetic2Xvalue","arithmeticXOffset","arithmetic1Condition","arithmetic1","arithmetic2Condition","arithmetic2","placeTopRefuelPoles","placeBottomRefuelPoles","placeRefuelChestsAndInserters","entity1","entity2","color","entity1ConNumber","entity2ConNumber","circuit1Number","circuit2Number","entity1Number","entity2Number","createWirePath","entity","conNumber","connections","entityColor","conn1","entity_id","conn2","circuit_id","connectItemsWithWire","item1","item2","mirrorItemsHorizontal","mirrorXOffset","changeItemsCoordinates","copyPasteItems","clone","mixSides","sidesUsed","leftArray","rightArray","assert","sort","a","b","sortStorageTanks","rowCount","rowItems","wood","coal","tooltipText","createNormalStation","createFluidStation","createStacker","blueprint","icons","signal","entities","version","label","encode","allItems","rightSplitters","stationItems","rightChests","leftChests","rightInnerInserters","rightOuterInserters","leftOuterInserters","madzuriRightArithmetic","madzuriLeftArithmetic","rightSideItems","newSplitters","rightPoles","leftPoles","poles","leftSideItems","rightLamps","leftLamps","topPoles","combinators","combineArray","rightVerticalBelts","leftVerticalBelts","leftSplitters","trainStops","filter","railSignals","stop","rightStorageTanks","leftStorageTanks","rightPumps","leftPumps","rightPipes","leftPipes","bottomPoles","frontLeftCurve","frontRightCurve","backLeftCurve","backRightCurve","diagonalFrontLeftCurve","diagonalFrontRightCurve","diagonalBackLeftCurve","diagonalBackRightCurve","createDiagonalStacker","createVerticalStacker","frontCurve","backCurve","entranceChainSignal","trainLength","backEndYOffset","parallelTracks","copyPasteBlueprint","doubleHeadedFactor","diagonalLength","validTypes","diagonals","newDiagonals"],"mappings":"wMAAaA,EAEF,6EAFEA,EAKG,uBALHA,EAMI,4BANJA,EASA,2CATAA,EAUI,yBAVJA,EAYU,+BAZVA,EAeQ,0CAfRA,EAgBW,mCAhBXA,EAiBK,4BAjBLA,EAkBS,qEAlBTA,EAoBL,0EApBKA,EAqBM,yDArBNA,EAuBL,sFAvBKA,EAyBM,GAzBNA,EA0BO,uEA1BPA,EA6BL,gFA7BKA,EA+Bc,2DCFZC,EA7BE,CACbC,WACI,ubACJC,sBAAuB,8DACvBC,aAAc,mEACdC,wBACI,wEACJC,sBACI,4EACJC,UACI,+HACJC,WACI,sKACJC,SAAU,+DACVC,cACI,sHACJC,2BACI,oHACJC,6BACI,wFACJC,yBACI,oHACJC,2BACI,sFACJC,sBAAuB,GACvBC,8BACI,qOACJC,gBAAiB,uC,OCrBN,SAASC,EAAkBC,GACtC,IAAMC,EACiC,YAAnCD,EAAME,aAAaC,aAA6BH,EAAME,aAAaJ,gBACjEM,EAAiBC,IAAaC,SAASN,EAAME,aAAaC,aAAe,QAAU,QACzF,OACI,qBAAKI,UAAW1B,EAAhB,SACI,sBAAK0B,UAAW1B,EAAhB,UACI,uBACI0B,UAAW1B,EACX2B,KAAM,WACNC,IAAK,IACLC,GAAI,eACJC,WAAU7B,EAASG,aACnB2B,QAASZ,EAAME,aAAajB,aAC5B4B,SAAU,SAACC,GACPd,EAAMe,gBAAN,2BACOf,EAAME,cADb,IAEIjB,aAAc6B,EAAEE,OAAOJ,cAInC,uBAAOL,UAAW1B,EAAsBoC,QAAS,eAAjD,2BAGA,uBACIV,UAAW1B,EACX2B,KAAM,SACNC,IAAK,IACLC,GAAI,oBACJQ,MAAOlB,EAAME,aAAaiB,kBAC1BN,SAAU,SAACC,GACPd,EAAMe,gBAAN,2BACOf,EAAME,cADb,IAEIiB,kBAAmBL,EAAEE,OAAOE,YAIxC,uBAAOX,UAAW1B,EAAsBoC,QAAS,oBAAjD,mCAGA,uBACIV,UAAW1B,EACX2B,KAAM,SACNC,IAAK,IACLC,GAAI,aACJQ,MAAOlB,EAAME,aAAakB,WAC1BP,SAAU,SAACC,GACPd,EAAMe,gBAAN,2BAA2Bf,EAAME,cAAjC,IAA+CkB,WAAYN,EAAEE,OAAOE,YAG5E,uBAAOX,UAAW1B,EAAsBoC,QAAS,aAAjD,qBACUb,EADV,aAGA,uBACIG,UAAW1B,EACXwC,OAAQpB,EACRO,KAAM,WACNE,GAAI,0BACJC,WAAU7B,EAASI,wBACnB0B,QAASZ,EAAME,aAAahB,wBAC5B2B,SAAU,SAACC,GACPd,EAAMe,gBAAN,2BACOf,EAAME,cADb,IAEIhB,wBAAyB4B,EAAEE,OAAOJ,cAI9C,uBACIL,UAAW1B,EACXwC,OAAQpB,EACRgB,QAAS,0BAHb,6C,WCnED,SAASK,EAAiBtB,GAErC,IAAMuB,EACF,wBACIb,GAAI,eACJH,UAAW1B,EACXqC,MAAOlB,EAAME,aAAasB,aAC1BX,SAAU,SAACC,GACPd,EAAMe,gBAAN,2BACOf,EAAME,cADb,IAEIsB,aAAcV,EAAEE,OAAOE,UAPnC,SAWKO,IAAcC,KAAI,SAACF,GAChB,OACI,wBACIjB,UAAW1B,EAEXqC,MAAOM,EAHX,SAKKG,IAAmBH,IAHfA,QAsBnBI,EAAmB5B,EAAME,aAAaf,sBAEtC0C,EAAsB,SAACC,GACzB,OACI,uBAEIvB,UAAW1B,EACXwC,QAASO,EACTG,KAAM,WACNb,MAAOlB,EAAME,aAAa8B,aAAaF,GACvCG,YACc,IAAVH,EAAc,6BAAd,iBAAuDA,EAAQ,EAA/D,cAEJjB,SAAU,SAACC,IAzBC,SAACoB,EAAoBC,EAAkBL,GAC3D9B,EAAMe,gBAAN,2BACOf,EAAME,cADb,IAGI8B,aAAa,GAAD,mBACLhC,EAAME,aAAa8B,aAAaI,MAAM,EAAGN,IADpC,CAERK,GAFQ,YAGLnC,EAAME,aAAa8B,aAAaI,MAAMN,EAAQ,QAmB7CO,CAAgBrC,EAAME,aAAa8B,aAAclB,EAAEE,OAAOE,MAAOY,KAVzE,UACYA,KAgBhBQ,GAAmB,EACjBC,EAA4B,IAAIC,MAAM,GAAGC,KAAK,GAAGf,KAAI,SAACgB,EAAGZ,GAC3D,MAAyB,IAArBQ,GAA0BA,EAAkBR,GAMhD,MAH+C,KAA3C9B,EAAME,aAAa8B,aAAaF,KAChCQ,EAAkBR,GAEfD,EAAoBC,MAG/B,OACI,qBAAKvB,UAAW1B,EAAhB,SACI,sBAAK0B,UAAW1B,EAAhB,UACK0C,EACD,uBAAOhB,UAAW1B,EAAsBoC,QAAS,eAAjD,2BAGA,uBACIV,UAAW1B,EACX6B,GAAI,wBACJF,KAAM,WACNG,WAAU7B,EAASK,sBACnByB,QAASZ,EAAME,aAAaf,sBAC5B0B,SAAU,SAACC,GACPd,EAAMe,gBAAN,2BACOf,EAAME,cADb,IAEIf,sBAAuB2B,EAAEE,OAAOJ,cAI5C,uBAAOL,UAAW1B,EAAsBoC,QAAS,wBAAjD,sCAGCsB,OC/FF,SAASI,EAAkB3C,GACtC,IAAM4C,EACF,wBACIlC,GAAI,aACJH,UAAW1B,EACXqC,MAAOlB,EAAME,aAAad,UAC1BuB,WAAU7B,EAASM,UACnByB,SAAU,SAACC,GACPd,EAAMe,gBAAN,2BACOf,EAAME,cADb,IAEId,UAAW0B,EAAEE,OAAOE,UARhC,SAYK2B,IAAWnB,KAAI,SAACtC,GACb,OACI,wBAAQmB,UAAW1B,EAAuCqC,MAAO9B,EAAjE,SACK0D,IAAgB1D,IAD0BA,QAQzD2D,EAAmBC,IAAkB1C,SAASN,EAAME,aAAad,WACjE6D,EAA8D,6BAAjCjD,EAAME,aAAad,UAElDkD,GAAmB,EACjBY,EAAgB,IAAIV,MAAM,IAAIC,KAAK,GAAGf,KAAI,SAACgB,EAAGS,GAChD,IAAMrB,EAAQsB,KAAKC,MAAMF,EAAI,GAC7B,MAAyB,IAArBb,GAA0BA,EAAkBR,GAMhD,MAHwD,KAApD9B,EAAME,aAAaoD,sBAAsBxB,KACzCQ,EAAkBR,GAElBqB,EAAI,IAAM,EAEN,uBACI5C,UAAW1B,EACXwC,QAAS0B,EACThB,KAAM,WAENvB,KAAM,OACNU,MAAOlB,EAAME,aAAaoD,sBAAsBxB,GAChDG,YAAW,kBAAaH,EAAQ,EAArB,cACXjB,SAAU,SAACC,GACPd,EAAMe,gBAAN,2BACOf,EAAME,cADb,IAEIoD,sBAAsB,GAAD,mBACdtD,EAAME,aAAaoD,sBAAsBlB,MAAM,EAAGN,IADpC,CAEjBhB,EAAEE,OAAOE,OAFQ,YAGdlB,EAAME,aAAaoD,sBAAsBlB,MAAMN,EAAQ,UAd1E,UAIYA,EAJZ,2BAsBA,uBACIvB,UAAW1B,EACXwC,QAAS0B,EAETvC,KAAM,SACNC,IAAK,IACLS,MAAOlB,EAAME,aAAaqD,wBAAwBzB,GAClDG,YAAW,kBAAaH,EAAQ,EAArB,WACXjB,SAAU,SAACC,GACPd,EAAMe,gBAAN,2BACOf,EAAME,cADb,IAEIqD,wBAAwB,GAAD,mBAChBvD,EAAME,aAAaqD,wBAAwBnB,MAAM,EAAGN,IADpC,CAEnBhB,EAAEE,OAAOE,OAFU,YAGhBlB,EAAME,aAAaqD,wBAAwBnB,MAAMN,EAAQ,UAd5E,UAGYA,EAHZ,gCAuBZ,OACI,qBAAKvB,UAAW1B,EAAhB,SACI,sBAAK0B,UAAW1B,EAAhB,UACK+D,EACD,uBAAOrC,UAAW1B,EAAsBoC,QAAS,aAAjD,wBAGA,uBACIV,UAAW1B,EACX2B,KAAM,SACNC,IAAK,IACLS,MAAOlB,EAAME,aAAab,WAC1BsB,WAAU7B,EAASO,WACnBwB,SAAU,SAACC,GACPd,EAAMe,gBAAN,2BACOf,EAAME,cADb,IAEIb,WAAYyB,EAAEE,OAAOE,YAIjC,uBAAOX,UAAW1B,EAAsBoC,QAAS,aAAjD,yBAGA,uBACIV,UAAW1B,EACXwC,QAAS4B,EACTvC,GAAI,qBACJF,KAAM,WACNI,QAASZ,EAAME,aAAasD,wBAC5B3C,SAAU,SAACC,GACPd,EAAMe,gBAAN,2BACOf,EAAME,cADb,IAEIsD,wBAAyB1C,EAAEE,OAAOJ,cAI9C,uBACIL,UAAW1B,EACXwC,QAAS4B,EACThC,QAAS,qBAHb,kCAOCiC,OCxHF,SAASO,EAAiBzD,GACrC,IAAM0D,EAAkBC,IAAcrD,SAASN,EAAME,aAAad,WAE5DwE,EACF,wBACIlD,GAAI,WACJH,UAAW1B,EACXqC,MAAOlB,EAAME,aAAa2D,SAC1BhD,SAAU,SAACC,GACPd,EAAMe,gBAAN,2BACOf,EAAME,cADb,IAEI2D,SAAU/C,EAAEE,OAAOE,UAP/B,SAWK4C,IAAUpC,KAAI,SAACmC,GACZ,OACI,wBAAQtD,UAAW1B,EAAsCqC,MAAO2C,EAAhE,SACKE,IAAeF,IAD2BA,QAQzDG,EACF,wBACItD,GAAI,YACJH,UAAW1B,EACXqC,MAAOlB,EAAME,aAAa+D,cAC1BpD,SAAU,SAACC,GACPd,EAAMe,gBAAN,2BACOf,EAAME,cADb,IAEI+D,cAAenD,EAAEE,OAAOE,UAPpC,SAWKgD,IAAUxC,KAAI,SAACyC,GACZ,OACI,wBAAQ5D,UAAW1B,EAAsCqC,MAAOiD,EAAhE,SACKA,GAD0CA,QAOzDC,EACF,wBACI1D,GAAI,WACJH,UAAW1B,EACXqC,MAAOlB,EAAME,aAAamE,kBAC1B1D,WAAU7B,EAASQ,SACnBuB,SAAU,SAACC,GACPd,EAAMe,gBAAN,2BAA2Bf,EAAME,cAAjC,IAA+CmE,kBAAmBvD,EAAEE,OAAOE,UANnF,SASKoD,IAAmB5C,KAAI,SAACpC,GACrB,OACI,wBAAQiB,UAAW1B,EAAsCqC,MAAO5B,EAAhE,SACKA,GAD0CA,QAQ/D,OACI,qBAAKiB,UAAW1B,EAAiBwC,OAAQqC,EAAzC,SACI,sBAAKnD,UAAW1B,EAAhB,UACK+E,EACD,uBAAOrD,UAAW1B,EAAsBoC,QAAS,WAAjD,uBAGC+C,EACD,uBAAOzD,UAAW1B,EAAsBoC,QAAS,YAAjD,8BAGCmD,EACD,uBAAO7D,UAAW1B,EAAsBoC,QAAS,WAAjD,4BCpFD,SAASsD,EAAevE,GACnC,IAAMwE,EACF,wBACIjE,UAAW1B,EACXwC,QAASrB,EAAME,aAAaX,cAC5B2B,MAAOlB,EAAME,aAAauE,eAC1B5D,SAAU,SAACC,GACPd,EAAMe,gBAAN,2BACOf,EAAME,cADb,IAEIuE,eAAgB3D,EAAEE,OAAOE,UAPrC,SAWKwD,IAAgBhD,KAAI,SAACiD,GAClB,OACI,wBAAQpE,UAAW1B,EAAsCqC,MAAOyD,EAAhE,SACKC,IAAqBD,IADqBA,QAQ/D,OACI,qBAAKpE,UAAW1B,EAAhB,SACI,sBAAK0B,UAAW1B,EAAhB,UACI,uBACI0B,UAAW1B,EACX2B,KAAM,WACNE,GAAI,gBACJE,QAASZ,EAAME,aAAaX,cAC5BoB,WAAU7B,EAASS,cACnBsB,SAAU,SAACC,GACPd,EAAMe,gBAAN,2BACOf,EAAME,cADb,IAEIX,cAAeuB,EAAEE,OAAOJ,cAIpC,uBAAOL,UAAW1B,EAAsBoC,QAAS,gBAAjD,qCAGCuD,EACD,uBACIjE,UAAW1B,EACXwC,QAASrB,EAAME,aAAaX,cAC5B0B,QAAS,YAHb,uBAOA,uBACIT,KAAM,SACND,UAAW1B,EACXwC,QAASrB,EAAME,aAAaX,cAC5B2B,MAAOlB,EAAME,aAAa2E,iBAC1BpE,IAAK,IACLI,SAAU,SAACC,GACPd,EAAMe,gBAAN,2BACOf,EAAME,cADb,IAEI2E,iBAAkB/D,EAAEE,OAAOE,YAIvC,uBACIX,UAAW1B,EACXwC,QAASrB,EAAME,aAAaX,cAC5B0B,QAAS,aAHb,yB,YChED,SAAS6D,EAAa9E,GACjC,IAEM+E,EAFc,CAAC,kBAAmB,qBAEIzE,SAASN,EAAME,aAAaC,aAClE6E,EAFa,CAAC,wBAAyB,2BAEH1E,SAASN,EAAME,aAAaC,aAChE8E,EAA8D,SAArCjF,EAAME,aAAa+D,cAE5CiB,EAAa,SACfC,GAOE,IADF9D,EACC,wDACD,OACI,uBACId,UAAW1B,EACXwC,OAAQA,EAERb,KAAM,WACNE,GAAIyE,EACJvE,QAASZ,EAAME,aAAaiF,GAC5BxE,WAAU7B,EAASqG,GACnBtE,SAAU,SAACC,GACPd,EAAMe,gBAAN,2BACOf,EAAME,cADb,kBAEKiF,EAAUrE,EAAEE,OAAOJ,aARvBuE,IAejB,OACI,qBAAK5E,UAAW1B,EAAhB,SACI,sBAAK0B,UAAW1B,EAAhB,UACKqG,EAAW,wBAAyBF,GACrC,uBACIzE,UAAW1B,EACXwC,OAAQ2D,EACR/D,QAAS,wBAHb,yCAOCiE,EAAW,8BACZ,uBACI3E,UAAW1B,EACXwC,OAAQ2D,EACR/D,QAAS,6BAHb,6CAOA,uBACIV,UAAW1B,EACXwC,OAAQ0D,EACR9D,QAAS,6BAHb,oDAOCiE,EACG,+BACAF,GAA0BC,GAE9B,uBACI1E,UAAW1B,EACXwC,OAAQ2D,GAA0BC,EAClChE,QAAS,+BAHb,iDAOCiE,EAAW,4BACZ,uBACI3E,UAAW1B,EACXwC,OAAQ2D,EACR/D,QAAS,2BAHb,2CAOA,uBACIV,UAAW1B,EACXwC,OAAQ0D,EACR9D,QAAS,6BAHb,kDAOCiE,EACG,6BACAF,GAA0BC,GAE9B,uBACI1E,UAAW1B,EACXwC,OAAQ2D,GAA0BC,EAClChE,QAAS,6BAHb,oDCvFD,SAASmE,EAAyBpF,GAC7C,IAAMqF,GAA0BrF,EAAME,aAAaL,8BAE7CyF,EACF,wBACI/E,UAAW1B,EACXwC,OAAQgE,EACRnE,MAAOlB,EAAME,aAAaqF,yBAC1B1E,SAAU,SAACC,GACPd,EAAMe,gBAAN,2BACOf,EAAME,cADb,IAEIqF,yBAA0BzE,EAAEE,OAAOE,UAP/C,SAWKsE,IAA0B9D,KAAI,SAAC+D,GAC5B,OACI,wBAAQlF,UAAW1B,EAAsCqC,MAAOuE,EAAhE,SACKC,IAA+BD,IADWA,QAQ/D,OACI,qBAAKlF,UAAW1B,EAAhB,SACI,sBAAK0B,UAAW1B,EAAhB,UACI,uBACI0B,UAAW1B,EACX2B,KAAM,WACNE,GAAI,gCACJE,QAASZ,EAAME,aAAaL,8BAC5Bc,WAAU7B,EAASe,8BACnBgB,SAAU,SAACC,GACPd,EAAMe,gBAAN,2BACOf,EAAME,cADb,IAEIL,8BAA+BiB,EAAEE,OAAOJ,cAIpD,uBAAOL,UAAW1B,EAAsBoC,QAAS,gCAAjD,SACK,yCAEJqE,EACD,uBACI9E,KAAM,SACND,UAAW1B,EACXwC,OAAQgE,EACRpD,YAAa,kBACbf,MAAOlB,EAAME,aAAayF,uBAC1B9E,SAAU,SAACC,GACPd,EAAMe,gBAAN,2BACOf,EAAME,cADb,IAEIyF,uBAAwB7E,EAAEE,OAAOE,iBC3D9C,SAAS0E,EAAc5F,GAClC,OACI,qBAAKO,UAAW1B,EAAhB,SACI,sBAAK0B,UAAW1B,EAAhB,UACI,uBACI0B,UAAW1B,EACX2B,KAAM,WACNE,GAAI,sBACJE,QAASZ,EAAME,aAAa2F,oBAC5BhF,SAAU,SAACC,GACPd,EAAMe,gBAAN,2BACOf,EAAME,cADb,IAEI2F,oBAAqB/E,EAAEE,OAAOJ,cAI1C,uBAAOL,UAAW1B,EAAsBoC,QAAS,sBAAjD,0CChBD,SAAS6E,EAAoB9F,GACxC,OACI,8BACI,qBAAKO,UAAW1B,EAAhB,SACI,uBACI0B,UAAW1B,EACX2B,KAAM,OACNyB,YAAa,eACbf,MAAOlB,EAAME,aAAa6F,YAC1BlF,SAAU,SAACC,GACPd,EAAMe,gBAAN,2BACOf,EAAME,cADb,IAEI6F,YAAajF,EAAEE,OAAOE,gB,YCTnC,SAAS8E,EAAgBhG,GACpC,IAAMiG,EAAmE,YAAlCjG,EAAME,aAAanB,WACpDmH,EAAuB7F,IAAaC,SAASN,EAAME,aAAaC,aAChEgG,EACiC,sBAAnCnG,EAAME,aAAaC,aACgB,4BAAnCH,EAAME,aAAaC,YAEvBiG,qBAAU,WACNC,EAAWC,YAAuBtG,EAAME,iBACzC,CACCF,EAAME,aAAaC,YACnBH,EAAME,aAAaqG,2BACnBvG,EAAME,aAAasG,oBACnBxG,EAAME,aAAakB,WACnBpB,EAAME,aAAab,WACnBW,EAAME,aAAad,UACnBY,EAAME,aAAa+D,cACnBjE,EAAME,aAAaV,2BACnBQ,EAAME,aAAaT,+BAGvB,IAAMgH,EAAU,SACZC,GAMA,OACI,uBACIlG,KAAM,OACND,UAAS,UAAK1B,EAAL,eACT8B,WAAU7B,EAASE,sBACnBqC,OAAQ4E,EACR/E,MAAOlB,EAAME,aAAawG,GAC1B7F,SAAU,SAACC,GACPd,EAAMe,gBAAN,2BACOf,EAAME,cADb,kBAEKwG,EAAM5F,EAAEE,OAAOE,aAO9ByF,EAAmB,SACrBD,GAEA,OACI,wBACInG,UAAS,UAAK1B,EAAL,eACTwC,OAAQ4E,EACR/E,MAAOlB,EAAME,aAAawG,GAC1B7F,SAAU,SAACC,GACPd,EAAMe,gBAAN,2BACOf,EAAME,cADb,kBAEKwG,EAAM5F,EAAEE,OAAOE,UAP5B,SAWK0F,IAAclF,KAAI,SAAC+D,GAChB,OACI,wBAAuBvE,MAAOuE,EAA9B,SACKA,GADQA,SAS3BoB,EACF,wBACItG,UAAS,UAAK1B,EAAL,eACT8B,WAAU7B,EAASC,WACnBmC,MAAOlB,EAAME,aAAanB,WAC1B8B,SAAU,SAACC,GACPd,EAAMe,gBAAN,2BACOf,EAAME,cADb,IAEInB,WAAY+B,EAAEE,OAAOE,UAPjC,SAWKnC,IAAW2C,KAAI,SAACoF,GACb,OACI,wBAAwB5F,MAAO4F,EAA/B,SACKA,GADQA,QAQvBT,EAAa,SACfU,GAEA/G,EAAMe,gBAAN,2BACOf,EAAME,cADb,IAEI8G,+BAAgCD,EAAgB,GAChDE,8BAA+BF,EAAgB,GAC/CG,+BAAgCH,EAAgB,GAChDI,+BAAgCJ,EAAgB,GAChDK,8BAA+BL,EAAgB,GAC/CM,+BAAgCN,EAAgB,OAIxD,OACI,8BACI,qBAAKxG,UAAW1B,EAAhB,SACI,sBAAK0B,UAAW1B,EAAhB,UACKgI,EACD,uBAAOtG,UAAS,UAAK1B,EAAL,eAAhB,yBACA,uBACI0B,UAAS,UAAK1B,EAAL,eACTwC,OAAQ8E,GAA+BF,EACvCzF,KAAM,WACNE,GAAI,6BACJE,QAASZ,EAAME,aAAaqG,2BAC5B1F,SAAU,SAACC,GACPd,EAAMe,gBAAN,2BACOf,EAAME,cADb,IAEIqG,2BAA4BzF,EAAEE,OAAOJ,cAIjD,uBACIL,UAAS,UAAK1B,EAAL,eACTwC,OAAQ8E,GAA+BF,EACvChF,QAAS,6BAHb,8CAOCwF,EAAQ,kCACRE,EAAiB,iCACjBF,EAAQ,kCACT,uBACIlG,UAAS,UAAK1B,EAAL,eACTwC,OAAQ4E,EAFZ,kDAOCQ,EAAQ,kCACRE,EAAiB,iCACjBF,EAAQ,kCACT,uBACIlG,UAAS,UAAK1B,EAAL,eACTwC,OAAQ4E,EAFZ,mDAOA,uBACIvF,GAAI,wBACJH,UAAS,UAAK1B,EAAL,eACTwC,OAAQ4E,GAAkCC,EAC1C1F,KAAM,QACNU,MAAO,GACPN,QAAoD,KAA3CZ,EAAME,aAAasG,oBAC5B3F,SAAU,WACNb,EAAMe,gBAAN,2BACOf,EAAME,cADb,IAEIsG,oBAAqB,SAIjC,uBACIjG,UAAS,UAAK1B,EAAL,eACTwC,OAAQ4E,GAAkCC,EAF9C,gCAMA,uBACIxF,GAAI,yBACJH,UAAS,UAAK1B,EAAL,eACTwC,OAAQ4E,GAAkCC,EAC1C1F,KAAM,QACNU,MAAO,IACPN,QAAoD,MAA3CZ,EAAME,aAAasG,oBAC5B3F,SAAU,WACNb,EAAMe,gBAAN,2BACOf,EAAME,cADb,IAEIsG,oBAAqB,UAIjC,uBACIjG,UAAS,UAAK1B,EAAL,eACTwC,OAAQ4E,GAAkCC,EAF9C,iCAMA,uBACIxF,GAAI,yBACJH,UAAS,UAAK1B,EAAL,eACTwC,OAAQ4E,GAAkCC,EAC1C1F,KAAM,QACNU,MAAO,IACPN,QAAoD,MAA3CZ,EAAME,aAAasG,oBAC5B3F,SAAU,WACNb,EAAMe,gBAAN,2BACOf,EAAME,cADb,IAEIsG,oBAAqB,UAIjC,uBACIjG,UAAS,UAAK1B,EAAL,eACTwC,OAAQ4E,GAAkCC,EAF9C,wCCzML,SAASoB,EAActH,GAClC,OACI,qBAAKO,UAAW,gBAAhB,SACI,sBAAKA,UAAW,0CAAhB,UACI,gCACI,cAACuF,EAAD,CACI5F,aAAcF,EAAME,aACpBa,gBAAiBf,EAAMe,kBAE3B,cAACiF,EAAD,CACI9F,aAAcF,EAAME,aACpBa,gBAAiBf,EAAMe,kBAE3B,cAAChB,EAAD,CACIG,aAAcF,EAAME,aACpBa,gBAAiBf,EAAMe,kBAE3B,cAAC0C,EAAD,CACIvD,aAAcF,EAAME,aACpBa,gBAAiBf,EAAMe,qBAG/B,gCACI,cAACO,EAAD,CACIpB,aAAcF,EAAME,aACpBa,gBAAiBf,EAAMe,kBAE3B,cAAC4B,EAAD,CACIzC,aAAcF,EAAME,aACpBa,gBAAiBf,EAAMe,kBAG3B,cAACwD,EAAD,CACIrE,aAAcF,EAAME,aACpBa,gBAAiBf,EAAMe,kBAE3B,cAAC+D,EAAD,CACI5E,aAAcF,EAAME,aACpBa,gBAAiBf,EAAMe,kBAE3B,cAACqE,EAAD,CACIlF,aAAcF,EAAME,aACpBa,gBAAiBf,EAAMe,kBAE3B,cAAC6E,EAAD,CACI1F,aAAcF,EAAME,aACpBa,gBAAiBf,EAAMe,0BCtDhC,SAASwG,EAAcvH,GAClC,IAAMwH,EACF,wBACI9G,GAAI,YACJH,UAAW1B,EACXqC,MAAOlB,EAAME,aAAauH,kBAC1B5G,SAAU,SAACC,GACPd,EAAMe,gBAAN,2BACOf,EAAME,cADb,IAEIuH,kBAAmB3G,EAAEE,OAAOE,UAPxC,SAWKwG,IAAUhG,KAAI,SAACiG,GACZ,OACI,wBAAQpH,UAAW1B,EAAsCqC,MAAOyG,EAAhE,SACKA,GAD0CA,QAQ/D,OACI,qBAAKpH,UAAW1B,EAAhB,SACI,sBAAK0B,UAAW1B,EAAhB,UACK2I,EACD,uBAAOjH,UAAW1B,EAAsBoC,QAAS,YAAjD,8BAGA,uBACIV,UAAW1B,EACX2B,KAAM,SACNC,IAAK,IACLC,GAAI,qBACJQ,MAAOlB,EAAME,aAAa0H,uBAC1B/G,SAAU,SAACC,GACPd,EAAMe,gBAAN,2BACOf,EAAME,cADb,IAEI0H,uBAAwB9G,EAAEE,OAAOE,YAI7C,uBAAOX,UAAW1B,EAAsBoC,QAAS,qBAAjD,4CAGA,uBACIV,UAAW1B,EACX2B,KAAM,WACNE,GAAI,eACJE,QAASZ,EAAME,aAAa2H,oBAC5BhH,SAAU,SAACC,GACPd,EAAMe,gBAAN,2BACOf,EAAME,cADb,IAEI2H,oBAAqB/G,EAAEE,OAAOJ,cAI1C,uBAAOL,UAAW1B,EAAsBoC,QAAS,eAAjD,2CCpDD,SAAS6G,EAAa9H,GACjC,OACI,qBAAKO,UAAW,gBAAhB,SACI,sBAAKA,UAAW,0CAAhB,UACI,gCACI,cAACuF,EAAD,CACI5F,aAAcF,EAAME,aACpBa,gBAAiBf,EAAMe,kBAE3B,cAACiF,EAAD,CACI9F,aAAcF,EAAME,aACpBa,gBAAiBf,EAAMe,kBAE3B,cAAChB,EAAD,CACIG,aAAcF,EAAME,aACpBa,gBAAiBf,EAAMe,kBAE3B,cAACwG,EAAD,CACIrH,aAAcF,EAAME,aACpBa,gBAAiBf,EAAMe,qBAG/B,gCACI,cAACwD,EAAD,CACIrE,aAAcF,EAAME,aACpBa,gBAAiBf,EAAMe,kBAE3B,cAAC+D,EAAD,CACI5E,aAAcF,EAAME,aACpBa,gBAAiBf,EAAMe,kBAE3B,cAACqE,EAAD,CACIlF,aAAcF,EAAME,aACpBa,gBAAiBf,EAAMe,kBAE3B,cAAC6E,EAAD,CACI1F,aAAcF,EAAME,aACpBa,gBAAiBf,EAAMe,0BC7ChC,SAASgH,IACpB,OACI,mBACIxH,UAAW1B,EACXmC,OAAO,SACPgH,IAAI,aACJC,KAAK,uEAJT,SAMK,4CCRE,SAASC,IACpB,OACI,sBAAK3H,UAAS,qBAAd,UACI,mBACIA,UAAW1B,EACXmC,OAAO,SACPgH,IAAI,aACJC,KAAK,uEAJT,wBAQA,mBACI1H,UAAW1B,EACXmC,OAAO,SACPgH,IAAI,aACJC,KAAK,kFAJT,uCAQA,mBACI1H,UAAW1B,EACXmC,OAAO,SACPgH,IAAI,aACJC,KAAK,sDAJT,iCChBG,SAASE,EAAgBnI,GACpC,IAAoBmF,EAmBdiD,EACF,yBACI7H,UAAW1B,EACXqC,MAAOlB,EAAME,aAAamI,YAC1BxH,SAAU,SAACC,GACPd,EAAMe,gBAAN,2BACOf,EAAME,cADb,IAEImI,YAAavH,EAAEE,OAAOE,UANlC,UAUKoH,IAAa5G,KAAI,SAAClB,GACf,IAAIR,EAAME,aAAaJ,gBACvB,OACI,wBAAmBoB,MAAOV,EAA1B,SACKA,GADQA,MAKpB+H,IAAqB7G,KAAI,SAAClB,GACvB,GAAKR,EAAME,aAAaJ,gBACxB,OACI,wBAAmBoB,MAAOV,EAA1B,SACKA,GADQA,SAQ7B,OACI,qBAAKD,UAAW1B,EAAhB,SACI,sBAAK0B,UAAW1B,EAAhB,UACI,uBACI0B,UAAW1B,EACX6B,GAAI,6BACJQ,MAAOlB,EAAME,aAAasI,2BAC1B3H,SAAU,SAACC,GACPd,EAAMe,gBAAN,2BACOf,EAAME,cADb,IAEIsI,2BAA4B1H,EAAEE,OAAOE,YAIjD,uBAAOX,UAAW1B,EAAsBoC,QAAS,6BAAjD,kCA/DQkE,EAkEI,kBAhEhB,uBACI5E,UAAW1B,EAEX2B,KAAM,WACNE,GAAIyE,EACJvE,QAASZ,EAAME,aAAaiF,GAC5BxE,WAAU7B,EAASqG,GACnBtE,SAAU,SAACC,GACPd,EAAMe,gBAAN,2BACOf,EAAME,cADb,kBAEKiF,EAAUrE,EAAEE,OAAOJ,aARvBuE,IA+DL,uBAAO5E,UAAW1B,EAAsBoC,QAAS,kBAAjD,+BAGCmH,EACD,uBAAO7H,UAAW1B,EAAsBoC,QAAS,mBAAjD,+BCzED,SAASwH,EAAQzI,GAC5B,OACI,sBAAKO,UAAW,gBAAhB,UACI,cAACR,EAAD,CACIG,aAAcF,EAAME,aACpBa,gBAAiBf,EAAMe,kBAE3B,cAACoH,EAAD,CACIjI,aAAcF,EAAME,aACpBa,gBAAiBf,EAAMe,qB,6BCNxB,SAAS2H,EAAe1I,GACnC,MAA6B,KAAzBA,EAAM2I,eACC,KAEJ,sBAAKpI,UAAW1B,EAAhB,mBAAsDmB,EAAM2I,kBCLxD,SAASC,EAAa5I,GACjC,MAA2B,KAAvBA,EAAM6I,aACC,KAEJ,qBAAKtI,UAAW1B,EAAhB,SAA8CmB,EAAM6I,e,8BCiBzDC,GAAYC,EAAQ,IAEpBC,GAAUD,EAAQ,IAElBE,GAAOF,EAAQ,KAEN,SAASG,KAAwB,IAAD,EACHC,mBAASL,GAAUM,MADhB,mBACpClJ,EADoC,KACtBa,EADsB,OAEGoI,mBAAS,IAFZ,mBAEpCE,EAFoC,KAEnBC,EAFmB,OAGCH,mBAAS,IAHV,mBAGpCR,EAHoC,KAGpBY,EAHoB,OAIHJ,mBAAS,IAJN,mBAIpCN,EAJoC,KAItBW,EAJsB,KAMrCC,EAAUC,eACVC,EAAS,IAAIC,gBAAgBC,eAAcC,QAGjD1D,qBAAU,WAEN,IAAM2D,EAAkBJ,EAAOK,IAAI,YAEnC,GAAID,EAAiB,CACjB,IAAIE,EACJ,IACIA,EAAkBC,YAAeH,GACnC,SAEE,YADAI,QAAQC,IAAI,sCAGhB,IAAMC,EAAkBvB,GAAU5I,GAG7B8I,GAAQiB,EAAiBI,IAC1BtJ,EAAgB,2BACTqI,KACAa,OAIhB,IAEH7D,qBAAU,WACN,IAAMkE,EAAoBC,YAA+BrK,GACzDqJ,EAAkBe,GAClB,IAAME,EAAkBC,YAA0BvK,GAClDsJ,EAAgBgB,KACjB,CAACtK,IAEJ,IAAMwK,EAAe,SAACC,GAClB,IAAMC,EAAaC,OAAOC,KAAK1B,KACzB2B,EAAiB9B,GAAK0B,EAAYC,GAClCI,EAAYC,YAAeF,GAEjC,MAAO,IADQ,IAAInB,gBAAgB,CAAEsB,SAAUF,IAC3BG,YAUlBC,EACF,wBACI7K,UAAW1B,EACXqC,MAAOhB,EAAaC,YACpBU,SAAU,SAACC,GACPC,EAAgB,2BAAKb,GAAN,IAAoBC,YAAaW,EAAEE,OAAOE,UAJjE,SAOKmK,IAAa3J,KAAI,SAACvB,GACf,OACI,wBAAQI,UAAW1B,EAAyCqC,MAAOf,EAAnE,SACKA,GAD0CA,QAS3DmL,EAA+B,qEAC/BC,IAAcjL,SAASJ,EAAaC,aACpCmL,EACI,cAAChE,EAAD,CAAepH,aAAcA,EAAca,gBAAiBA,IAEzDV,IAAaC,SAASJ,EAAaC,aAC1CmL,EACI,cAACxD,EAAD,CAAc5H,aAAcA,EAAca,gBAAiBA,IAE3B,YAA7Bb,EAAaC,cACpBmL,EAAkB,cAAC7C,EAAD,CAASvI,aAAcA,EAAca,gBAAiBA,KAK5E,IAAMyK,EACF,0BAAU9K,GAAI,WAAd,SACK+K,GAAS/J,KAAI,SAACgK,GACX,OAAO,wBAA0BxK,MAAOwK,EAAShL,IAA7BgL,EAAShL,SAKzC,OACI,qBAAKH,UAAW1B,EAAhB,SACI,sBAAK0B,UAAW1B,EAAhB,UACI,cAACkJ,EAAD,IACA,sBAAKxH,UAAW,2DAAhB,UACI,qBAAKA,UAAW1B,EAAhB,SAAkCuM,IACjCE,EAED,cAAC1C,EAAD,CAAcC,aAAcA,IAE5B,cAACH,EAAD,CAAgBC,eAAgBA,EAAgBzI,aAAcA,IAC9D,wBACIK,UAAW1B,EACX8M,QAAS,WACgB,KAAjB9C,IACAS,EACIsC,YAAsBC,YAAgB3L,KAlEpC,SAACyK,GAC/B,IAAMmB,EAASpB,EAAaC,GAE5BlB,EAAQsC,KAAKD,GAEbrC,EAAQuC,QAAQF,GA+DQG,CAA0B/L,KAPtC,gCAaA,uBACIK,UAAS,UAAK1B,GACdwC,OAA4B,KAApBgI,EACRnI,MAAK,4BAAuBmI,EAAgB6C,QAC5CC,UAAQ,IAEZ,uBACI5L,UAAS,UAAK1B,GACdoD,YAAa,2CACbf,MAAOmI,EACP8C,UAAQ,IAEZ,wBACI5L,UAAW1B,EACXwC,OAA4B,KAApBgI,EACRsC,QAAS,WAELS,IAAK/C,EAAiB,CAClBgD,OAAO,EACPC,QAAS,SAPrB,+BAaA,wBACI/L,UAAW1B,EACXwC,OAA4B,KAApBgI,EACRsC,QAAS,WAELS,IAAKG,IAAa7B,EAAaxK,GAAe,CAC1CmM,OAAO,EACPC,QAAS,SAPrB,iCAaA,cAACpE,EAAD,IACA,cAAC,KAAD,CAAcsE,MAAO,SAAUC,WAAS,IACvCjB,U,aChMN,SAASkB,KACpB,OAEI,aADA,CACC,KAAD,UACI,cAAC,KAAD,UACI,cAAC,KAAD,CAAOC,KAAK,IAAZ,SACI,cAACzD,GAAD,UCHL0D,OAJf,WACI,OAAO,cAACF,GAAD,KCEXG,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,GAAD,MAEJC,SAASC,eAAe,U,iCCV5B,iMAQMC,EAAOnE,EAAQ,IAEfoE,EAAoB,SAAC1G,GAEvB,OAAQ2G,MAAMC,SAAS5G,KAGd8D,EAAiC,SAACI,GAC3C,OAAI0C,SAAS1C,EAAWxJ,mBAAqBkM,SAAS1C,EAAWvJ,YAAc,IACpE,8FAEoB,YAA3BuJ,EAAWxK,aACPkN,SAAS1C,EAAWnC,4BAA8B,IAC3C,sFAGX+C,IAAcjL,SAASqK,EAAWxK,cAC9BwK,EAAW/K,wBAA0B+K,EAAWnL,2BAC1C,8FAGVa,IAAaC,SAASqK,EAAWxK,cAC7BkN,SAAS1C,EAAW/C,wBAA0B,IACvC,+EAGgB,YAA3B+C,EAAWxK,aACPwK,EAAW9K,gCAAkC8K,EAAWnL,2BACjD,4HAIR,IAGEiL,EAA4B,SAACE,GACtC,IAAKwC,EAAkBxC,EAAWxJ,mBAC9B,MAAO,8CAEX,IAAKgM,EAAkBxC,EAAWvJ,YAC9B,MAAO,yCAEX,GAAImK,IAAcjL,SAASqK,EAAWxK,aAClC,IAAK,IAAIgD,EAAI,EAAGA,EAAI,GAAIA,IAAK,CACzB,IAAMmK,EAAW3C,EAAWrH,sBAAsBH,GAC5CoK,EAAiB5C,EAAWpH,wBAAwBJ,GAE1D,GAAiB,KAAbmK,IAAoBH,EAAkBI,GACtC,MAAM,6BAAN,OAAoCpK,EAAI,EAAxC,qBAIZ,GAAIkK,SAAS1C,EAAWxJ,mBAAqB,EACzC,MAAO,2CAEX,GAAIkM,SAAS1C,EAAWvJ,YAAc,EAClC,MAAO,2CAEX,GAA+B,YAA3BuJ,EAAWxK,aACPkN,SAAS1C,EAAWnC,4BAA8B,EAClD,MAAO,4CAGf,GAAI+C,IAAcjL,SAASqK,EAAWxK,cAA0C,YAA1BwK,EAAW5L,WAA0B,CACvF,IACKoO,EAAkBxC,EAAW3D,kCAC7BwG,IAAkBlN,SAASqK,EAAW3D,iCACO,SAA9C2D,EAAW3D,+BAEX,MAAO,6DAEX,IACKmG,EAAkBxC,EAAWzD,kCAC7BsG,IAAkBlN,SAASqK,EAAWzD,iCACO,SAA9CyD,EAAWzD,+BAEX,MAAO,4DAEX,IACKiG,EAAkBxC,EAAWxD,kCAC7BqG,IAAkBlN,SAASqK,EAAWxD,iCACO,SAA9CwD,EAAWxD,+BAEX,MAAO,8DAEX,IACKgG,EAAkBxC,EAAWtD,kCAC7BmG,IAAkBlN,SAASqK,EAAWtD,iCACO,SAA9CsD,EAAWtD,+BAEX,MAAO,6DAGf,GAAIhH,IAAaC,SAASqK,EAAWxK,aAAc,CAC/C,IAAKgN,EAAkBxC,EAAW/C,wBAC9B,MAAO,uDAEX,GAAIyF,SAAS1C,EAAW/C,wBAA0B,EAC9C,MAAO,uDAGf,GAA+B,YAA3B+C,EAAWxK,YAA2B,CACtC,GAAIkN,SAAS1C,EAAWtL,YAAc,EAClC,MAAO,oCAEX,GAAIsL,EAAWpL,eAAiB8N,SAAS1C,EAAW9F,kBAAoB,EACpE,MAAO,oCAEX,GAA6B,IAAzB8F,EAAWtL,aAAqB8N,EAAkBxC,EAAWtL,YAC7D,MAAO,yCAEX,GAAIsL,EAAWpL,gBAAkB4N,EAAkBxC,EAAW9F,kBAC1D,MAAO,2CAEX,GACI8F,EAAW9K,gCACVsN,EAAkBxC,EAAWhF,wBAE9B,MAAO,wDAIf,MAAO,IAGEW,EAAyB,SAClCqE,GAEA,IAAM8C,EAAaJ,SAAS1C,EAAWvJ,YAGjCsM,EAA2C,SAA7B/C,EAAW1G,cAA2B,EAAI,EAC1D0J,EAAkB,EAElBA,EADApC,IAAcjL,SAASqK,EAAWxK,aACF,EAAduN,EAAkBD,EAGlB,EAAIA,EAI1B,IAAIG,EAAsB,EACtBjD,EAAWnL,6BAGPoO,EAFArC,IAAcjL,SAASqK,EAAWxK,aAEZ,EAAIsN,EAGJ,EAAIA,GAI9B9C,EAAWlL,8BACkB,SAA7BkL,EAAW1G,eACXsH,IAAcjL,SAASqK,EAAWxK,eAGlCyN,GAAuB,GAE3B,IAAMxO,EAAYuL,EAAWvL,UACzByO,EAAgC,iBAAdzO,EAA+B,GAAmB,eAAdA,EAA6B,GAAK,GACtFC,EAAuC,KAA1BsL,EAAWtL,WAAoB,OAASgO,SAAS1C,EAAWtL,YAC/EwO,EAAkBzK,KAAK3C,IAAIpB,EAAYwO,GACvC,IAAIC,EAAsB,EAGtBC,EAAsB,EACtBC,EAAYrD,EAAWnE,oBAa3B,GAZI+E,IAAcjL,SAASqK,EAAWxK,cAClC2N,EAAsBE,EAAYH,EAAkBD,EACpDG,EALoB,GAMhBN,EAA+BO,GAAaJ,EAAsBD,KAItEG,GADAE,EAAY,MAEIJ,EAAsBP,SAAS1C,EAAW/C,wBAC1DmG,EAAsBN,EAAaO,GAAaJ,EAAsBD,IAI3C,oBAA3BhD,EAAWxK,aACgB,0BAA3BwK,EAAWxK,YAEX,MAAO,CAAC,OAAQ,IAAKiD,KAAK6K,MAAMF,GAAqB5C,WAAY,IAAK,IAAK,KAG/E,GAC+B,sBAA3BR,EAAWxK,aACgB,4BAA3BwK,EAAWxK,YACb,CAEE,IAAI+N,EAAU,IAId,OAHKvD,EAAWpE,6BACZ2H,EAAU9K,KAAKC,MAAMyK,EAAsBC,GAAqB5C,YAE7D,CAAC,OAAQ,IAAK/H,KAAK6K,MAAMF,GAAqB5C,WAAY+C,EAAS,IAAK,KAGnF,MAAO,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,MAGxBjD,EAAiB,SAACC,GAC3B,MAAO,IAAMgC,EAAKiB,YAAYC,KAAKC,UAAUnD,GAAW,CAAEoD,MAAO,IAAKnD,SAAS,WAGtEjB,EAAiB,SAACb,GAC3B,OAAO+E,KAAKG,MACRrB,EAAKsB,YAAYC,EAAOC,KAAKrF,EAAgBjH,MAAM,GAAI,WAAW+I,SAAS,Y,4qCChM7ErC,EAAYC,EAAQ,IAEf4F,EAAe,EAEbC,EAAoB,WAC7BD,EAAe,EACC,GAGPE,EAAU,SACnBC,EACAC,EACAC,GAEkB,IADlBC,EACiB,uDADG,GAEdC,EAAuB,CACzBC,cAAeR,EACfS,KAAMN,EACNO,SAAU,CACNN,EAAGA,EACHC,EAAGA,IAkCX,OA/BIC,EAAQK,YACRJ,EAAKI,UAAYL,EAAQK,WAEzBL,EAAQM,cACRL,EAAKK,YAAcN,EAAQM,aAE3BN,EAAQO,MACRN,EAAKM,IAAMP,EAAQO,KAEnBP,EAAQQ,UACRP,EAAKO,QAAUR,EAAQQ,SAEvBR,EAAQS,kBACRR,EAAKQ,gBAAkBT,EAAQS,iBAE/BT,EAAQU,uBACRT,EAAKS,qBAAuBV,EAAQU,sBAEpCV,EAAQW,mBACRV,EAAKU,iBAAmBX,EAAQW,kBAEhCX,EAAQY,UACRX,EAAKW,QAAUZ,EAAQY,SAEvBZ,EAAQa,sBACRZ,EAAKY,oBAAsBb,EAAQa,qBAEnCb,EAAQc,sBACRb,EAAKa,oBAAsBd,EAAQc,qBAEvCpB,GAAgB,EACTO,GAEEc,EAA4B,SACrCC,GAGoB,IAFpBC,EAEmB,uDAFT,EACVC,EACmB,uDADT,EAEV,OAAOF,EAAMvO,KAAI,SAACwN,GACd,OAAOL,EAAQK,EAAKE,KAAMF,EAAKG,SAASN,EAAImB,EAAShB,EAAKG,SAASL,EAAImB,EAAS,CAC5Eb,UAAWJ,EAAKI,gBAKfc,EAAgB,SACzBzF,GAMA,IAHY,IAFZ0F,EAEW,uDAFG,EACdC,EACW,uDADI,EAETC,EAAwB,GACxBtR,EAAe0L,EAAW1L,aAAe,EAAI,EAE3CkE,EAAIkN,EACRlN,EAEI,GADHlE,EAAeoO,SAAS1C,EAAWxJ,mBAAqBkM,SAAS1C,EAAWvJ,aAEzEkP,EACJnN,IAEAoN,EAAYxE,KAAK5I,GAErB,OAAOoN,GAGEC,EAA2B,SACpC7F,GAKA,IAFY,IAFZ0F,EAEW,wDAFI,EACfC,EACW,wDADK,EAEVC,EAAwB,GACrBpN,EAAIkN,EAAalN,EAA6C,EAAzCkK,SAAS1C,EAAWxJ,mBAAyBmP,EAAcnN,IACrFoN,EAAYxE,KAAK5I,GAErB,OAAOoN,GAGEE,EAA0B,SACnC9F,GAGY,IAFZ0F,EAEW,wDAFI,EACfC,EACW,wDADK,EAEhB,IAAK3F,EAAW1L,aAAc,MAAO,GAErC,IADA,IAAMsR,EAAwB,GAEtBpN,EAC6E,GAA5EkK,SAAS1C,EAAWxJ,mBAAqBkM,SAAS1C,EAAWvJ,aAC9DiP,EACJlN,EACiF,GAAhF,EAAIkK,SAAS1C,EAAWxJ,mBAAqBkM,SAAS1C,EAAWvJ,aAC9DkP,EACJnN,IAEAoN,EAAYxE,KAAK5I,GAErB,OAAOoN,GAGEG,EAAgB,SAAC/F,GAG1B,IAH8F,IAAhC0F,EAA+B,wDAAhB,EACvEE,EAAwB,GACxBD,EAAe,EAEbnN,EAA6C,EAAzCkK,SAAS1C,EAAWxJ,mBAAyBkP,EACrDlN,EAC6E,GAA5EkK,SAAS1C,EAAWxJ,mBAAqBkM,SAAS1C,EAAWvJ,aAC1DiP,EACAC,EACJnN,IAEAoN,EAAYxE,KAAK5I,GAErB,OAAOoN,GAGEI,EAAmB,SAAChG,GAC7B,IAAM4F,EAAgC,GAWtC,OAVAH,EAAczF,GAAa,GAAGiG,SAAQ,SAACzN,EAAGrB,GAExB,IAAVA,GAAe6I,EAAW1L,cAA2C,YAA3B0L,EAAWxK,aAIrDgD,EAAI,IAAM,GACVoN,EAAYxE,KAAK8C,EAAQ,iBAAkB,IAAK1L,OAGjDoN,GAGEM,EAAe,SAAClG,GAEzB,IAAM4F,EAAgC,GAEhCtR,EAAe0L,EAAW1L,aAAe,EAAI,EAC7C6R,EAAqBnG,EAAW1L,aAAe,EAAI,EACnD8R,EAEE,GADH9R,EAAeoO,SAAS1C,EAAWxJ,mBAAqBkM,SAAS1C,EAAWvJ,aAE7E0P,EAyBJ,MAvB+B,YAA3BnG,EAAWxK,aACXoQ,EAAYxE,KACR8C,EAAQ,oBAAqB,GAAGmC,IAAa,CAAE1B,UAAW2B,IAAUC,QAExEX,EAAYxE,KAAK8C,EAAQ,cAAe,EAAGkC,EAAM,IAAK,CAAEzB,UAAW2B,IAAUC,UAIzEvG,EAAW1L,aAEXsR,EAAYxE,KACR8C,EAAQ,qBAAsB,EAAGkC,EAAM,IAAK,CAAEzB,UAAW2B,IAAUE,MAIvEZ,EAAYxE,KACR8C,EAAQ,oBAAqB,GAAGmC,IAAa,CAAE1B,UAAW2B,IAAUC,QAI5EX,EAAYxE,KAAK8C,EAAQ,cAAe,EAAGkC,EAAM,IAAK,CAAEzB,UAAW2B,IAAUC,SAG1EX,GAGEa,EAAiB,SAACzG,GAE3B,IAAM4F,EAAgC,GAChCtB,EAAoB,CACtBY,QAAoC,KAA3BlF,EAAW5E,YAAqB4E,EAAW5E,iBAAcsL,GAEhEC,EAA6C,GAuBnD,OAtBI3G,EAAW9K,gCACXyR,EAAgBC,wBAAyB,EACzCD,EAAgBE,kBAAoB,CAChCC,aAAc,CACVjR,KAAM,UACN4O,KAAM,cAEVsC,SAAU,EACVC,WAAY,MAGU,YAA1BhH,EAAW5L,YACXuS,EAAgBM,iBAA6C,YAA1BjH,EAAW5L,WAC9CuS,EAAgBvB,oBAAsB,CAClCvP,KAAM,UACN4O,KAAM,aAGVH,EAAQa,oBAAsBzC,SAAS1C,EAAW5L,YAEtDkQ,EAAQW,iBAAmB0B,EAC3Bf,EAAYxE,KAAK8C,EAAQ,aAAc,IAAM,EAAGI,IACzCsB,GAGEsB,EAAa,SAAClH,GACvB,IAAM4F,EAAgC,GAClCuB,EAAQ,EACN7S,EAAe0L,EAAW1L,aAAe,EAAI,EAC7C8S,EAAY1E,SAAS1C,EAAWxJ,mBAChCsM,EAAaJ,SAAS1C,EAAWvJ,YAevC,OAdAiM,SAAS1C,EAAWvJ,YACpBgP,EAAczF,GAAYiG,SAAQ,SAAC5B,EAAG7L,GAC9BA,EAAI,IAAM,IACV2O,EAAQC,EACRxB,EAAYxE,KAAK8C,EAAQ,cAAe,IAAKG,EAAI,IAC1C8C,EAAQC,EAAYtE,EACtBpN,IAAaC,SAASqK,EAAWxK,aAEjCoQ,EAAYxE,KAAK8C,EAAQ,eAAgB,IAAKG,EAAI,IADnDuB,EAAYxE,KAAK8C,EAAQ,eAAgB,IAAKG,EAAI,IAE/C8C,EAAQC,EAAY9S,EAAewO,GAC1C8C,EAAYxE,KAAK8C,EAAQ,cAAe,IAAKG,EAAI,EAAG,CAAEO,YAAa,MAEvEuC,GAAS,MAENvB,GAGEyB,EAAiB,SAC1BrH,GAIA,IAOIsH,EAPEC,EAAmC,GACnCC,EAAmC,GACnC3Q,EAAemJ,EAAWxL,sBAC1BiT,IAAgBzH,EAAWnJ,cAC3BmJ,EAAWnJ,aACX6Q,EACyB,oBAA3B1H,EAAWxK,YAAoC8Q,IAAUqB,MAAQrB,IAAUsB,KAO/E,GAAI5H,EAAWxL,sBAAuB,CAClC8S,EAAc,GACd,IAAK,IAAI9O,EAAI,EAAGA,EAAI,GACmB,KAA/BwH,EAAW3I,aAAamB,GADTA,IAEnB8O,EAAYlG,KAAK,CACbjK,MAAOqB,EAAI,EACXiM,KAAMzE,EAAW3I,aAAamB,KA6C1C,OAzCAuN,EAAc/F,GAAYiG,SAAQ,SAAC5B,EAAG7L,GAU9B,IAAIqP,EATJrP,EAAI,IAAM,IACd+O,EAAenG,KACX8C,EAAQrN,EAAc,EAAGwN,EAAI,GAAK,CAC9BM,UAAW+C,EACX5C,QAASwC,KAIZtO,IAAcrD,SAASqK,EAAWvL,aAM/BoT,EAHAjH,IAAcjL,SAASqK,EAAWxK,cAClCwK,EAAW/K,sBAEGiP,EAAQrN,EAAc,EAAGwN,EAAI,GAAK,CAC5CM,UAAW+C,EACX5C,QAASwC,EACTrC,iBAAkB,CACd4B,kBAAmB,CACfC,aAAc,CACVjR,KAAM,UACN4O,KAAM,qBAEVsC,SAC+B,oBAA3B/G,EAAWxK,YACLsS,IAAkB9H,EAAWnJ,cAC7B,EACVmQ,WAAuC,oBAA3BhH,EAAWxK,YAAoC,IAAM,QAK/D0O,EAAQrN,EAAc,EAAGwN,EAAI,GAAK,CAC5CM,UAAW+C,EACX5C,QAASwC,IAGjBE,EAAepG,KAAKyG,QAGrB,CAACN,EAAgBC,IAEfO,EAAc,SAAC/H,GAExB,IAAM4F,EAAgC,GAGhCxN,EAAmBC,IAAkB1C,SAASqK,EAAWvL,WACzDuT,EAID,GACL,GAAI5P,EACA,IAAK,IAAII,EAAI,EAAGA,EAAI,GAAIA,IAAK,CACzB,IAAMmK,EAAW3C,EAAWrH,sBAAsBH,GAClD,GAAiB,KAAbmK,EAAiB,MACrB,IAAMsF,EAAajI,EAAWpH,wBAAwBJ,GACtDwP,EAAS5G,KAAK,CACVjK,MAAOqB,EAAI,EACXiM,KAAM9B,EACNwE,MAAOzE,SAASuF,KAK5B,IAAMC,KACFlI,EAAWnH,yBAAoD,6BAAzBmH,EAAWvL,iBAE3CiS,EAWV,OAVAX,EAAc/F,GAAYiG,SAAQ,SAAC5B,EAAG7L,GAC9BA,EAAI,IAAM,GACdoN,EAAYxE,KACR8C,EAAQlE,EAAWvL,UAAW,EAAG4P,EAAI,GAAK,CACtCQ,IAAKnC,SAAS1C,EAAWtL,YACzBqQ,gBAAqC,IAApBiD,EAASzG,YAAemF,EAAYsB,EACrDhD,qBAAsBkD,QAI3BtC,GAGEuC,EAAoB,SAACnI,GAE9B,IAAM4F,EAAgC,GAwBtC,OAvBAG,EAAc/F,GAAYiG,SAAQ,SAAC5B,EAAG7L,GAC9BA,EAAI,IAAM,EACVoN,EAAYxE,KACR8C,EAAQlE,EAAW9G,SAAU,EAAGmL,EAAI,GAAK,CAAEM,UAAW2B,IAAUsB,QAE7DpP,EAAI,IAAM,GAEVA,EAAI,IAAM,EADjBoN,EAAYxE,KAAK8C,EAAQlE,EAAW9G,SAAU,EAAGmL,EAAI,GAAK,CAAEM,UAAW2B,IAAUE,MAG1EhO,EAAI,IAAM,GAIVA,EAAI,IAAM,EAHjBoN,EAAYxE,KACR8C,EAAQlE,EAAW9G,SAAU,EAAGmL,EAAI,GAAK,CAAEM,UAAW2B,IAAUC,QAM7D/N,EAAI,IAAM,GACjBoN,EAAYxE,KACR8C,EAAQlE,EAAW9G,SAAU,EAAGmL,EAAI,GAAK,CAAEM,UAAW2B,IAAUsB,WAIrEhC,GAEEwC,EAAsB,SAACpI,GAEhC,IAAM4F,EAAgC,GAwBtC,OAvBAG,EAAc/F,GAAYiG,SAAQ,SAAC5B,EAAG7L,GAC9BA,EAAI,IAAM,GAIHA,EAAI,IAAM,EAHjBoN,EAAYxE,KACR8C,EAAQlE,EAAW9G,SAAU,EAAGmL,EAAI,GAAK,CAAEM,UAAW2B,IAAUC,QAM7D/N,EAAI,IAAM,GAIVA,EAAI,IAAM,EAHjBoN,EAAYxE,KACR8C,EAAQlE,EAAW9G,SAAU,EAAGmL,EAAI,GAAK,CAAEM,UAAW2B,IAAUqB,UAM7DnP,EAAI,IAAM,GAEVA,EAAI,IAAM,IADjBoN,EAAYxE,KAAK8C,EAAQlE,EAAW9G,SAAU,EAAGmL,EAAI,GAAK,CAAEM,UAAW2B,IAAUE,SAKlFZ,GAEEyC,EAAa,SAACrI,GACvB,IAAM4F,EAAgC,GAChC0C,EACyB,0BAA3BtI,EAAWxK,YAA0C8Q,IAAUsB,KAAOtB,IAAUqB,MASpF,OARA5B,EAAc/F,GAAYiG,SAAQ,SAAC5B,EAAG7L,GAC9BA,EAAI,IAAM,GACVoN,EAAYxE,KAAK8C,EAAQ,OAAQ,GAAKG,EAAI,GAAK,CAAEM,UAAW2D,KAE5D9P,EAAI,IAAM,GACVoN,EAAYxE,KAAK8C,EAAQ,OAAQ,GAAKG,EAAI,GAAK,CAAEM,UAAW2D,QAG7D1C,GAEE2C,EAAoB,SAACvI,GAI9B,IAAM4F,EAAgC,GA+BtC,OA9BAG,EAAc/F,GAAYiG,SAAQ,SAAC5B,EAAG7L,GAClC,GAAIA,EAAI,IAAM,EACV,IACI,IAAI+M,EAAU,EACdA,EAAU7C,SAAS1C,EAAW/C,wBAC9BsI,IACF,CACE,IAAMiD,EAAgBjD,EAAU,IAAM,EAAIe,IAAUE,GAAKF,IAAUqB,MACnE/B,EAAYxE,KACR8C,EAAQ,eAAgC,GAAf,EAAIqB,GAAclB,EAAI,GAAK,CAChDM,UAAW6D,KAK3B,GAAIhQ,EAAI,IAAM,EACV,IACI,IAAI+M,EAAU,EACdA,EAAU7C,SAAS1C,EAAW/C,wBAC9BsI,IACF,CACE,IAAMiD,EAAgBjD,EAAU,IAAM,EAAIe,IAAUqB,MAAQrB,IAAUE,GACtEZ,EAAYxE,KACR8C,EAAQ,eAAgC,GAAf,EAAIqB,GAAclB,EAAI,GAAK,CAChDM,UAAW6D,SAMxB5C,GAEE6C,EAAa,SAACzI,GAEvB,IAAM4F,EAAgC,GAStC,OARAG,EAAc/F,GAAYiG,SAAQ,SAAC5B,EAAG7L,EAAGkQ,GACrC,GAAU,IAANlQ,GAAWA,IAAMkQ,EAAMnH,OAAS,GAAK/I,EAAI,IAAM,EAC/C,IAAK,IAAImQ,EAAI,EAAGA,EAAIjG,SAAS1C,EAAW/C,wBAAyB0L,IAAK,CAClE,IAAMpD,EAAUoD,EAAI,IAAM,EAAwB,EAApBlQ,KAAKC,MAAMiQ,EAAI,GAA6B,EAApBlQ,KAAKC,MAAMiQ,EAAI,GAAS,EAC9E/C,EAAYxE,KAAK8C,EAAQ,OAAQ,EAAIqB,EAASlB,EAAI,SAIvDuB,GAGEgD,EAAqB,SAC9B5I,EACA6I,GAEA,IAAMjD,EAAgC,GAChCkD,EAAkC,oBAA3B9I,EAAWxK,YAAoC,OAAS,SAC/DuT,EAAU/I,EAAWtG,kBAC3BsP,EAAgBH,GAChB,IAAIzE,EAAI,EA2ER,MAzEa,WAAT0E,GAAiC,UAAZC,GACrBF,EAAU5C,SAAQ,SAACgD,GACf,IAAK,IAAI5E,EAAIwE,EAAU,GAAGnE,SAASL,EAAGA,GAAK4E,EAASvE,SAASL,EAAGA,IAC5DuB,EAAYxE,KACR8C,EAAQlE,EAAW9G,SAAUkL,EAAGC,EAAI,GAAK,CAAEM,UAAW2B,IAAUE,MAGxE,IAAK,IAAIhO,EAAIyQ,EAASvE,SAASN,EAAI,EAAG5L,EAAI4L,EAAG5L,IACzCoN,EAAYxE,KACR8C,EAAQlE,EAAW9G,SAAUV,EAAGyQ,EAASvE,SAASL,EAAI,GAAK,CACvDM,UAAW2B,IAAUqB,SAIjCvD,GAAK,KAIA,WAAT0E,GAAiC,SAAZC,IACrBF,EAAUK,UACVL,EAAU5C,SAAQ,SAACgD,GACf,IAAK,IAAI5E,EAAIwE,EAAU,GAAGnE,SAASL,EAAGA,GAAK4E,EAASvE,SAASL,EAAGA,IAC5DuB,EAAYxE,KACR8C,EAAQlE,EAAW9G,SAAUkL,EAAGC,EAAI,GAAK,CAAEM,UAAW2B,IAAUC,QAGxE,IAAK,IAAI/N,EAAIyQ,EAASvE,SAASN,EAAI,EAAG5L,EAAI4L,EAAG5L,IACzCoN,EAAYxE,KACR8C,EAAQlE,EAAW9G,SAAUV,EAAGyQ,EAASvE,SAASL,EAAI,GAAK,CACvDM,UAAW2B,IAAUqB,SAIjCvD,GAAK,MAIA,SAAT0E,GAA+B,UAAZC,GACnBF,EAAU5C,SAAQ,SAACgD,GACf,IAAK,IAAI5E,EAAIwE,EAAU,GAAGnE,SAASL,EAAGA,EAAI4E,EAASvE,SAASL,EAAGA,IAC3DuB,EAAYxE,KACR8C,EAAQlE,EAAW9G,SAAUkL,EAAGC,EAAI,GAAK,CAAEM,UAAW2B,IAAUC,QAGxE,IAAK,IAAI/N,EAAIyQ,EAASvE,SAASN,EAAI,EAAG5L,GAAK4L,EAAG5L,IAC1CoN,EAAYxE,KACR8C,EAAQlE,EAAW9G,SAAUV,EAAGyQ,EAASvE,SAASL,EAAI,GAAK,CACvDM,UAAW2B,IAAUsB,QAIjCxD,GAAK,KAIA,SAAT0E,GAA+B,SAAZC,IACnBF,EAAUK,UACVL,EAAU5C,SAAQ,SAACgD,GACf,IAAK,IAAI5E,EAAIwE,EAAU,GAAGnE,SAASL,EAAGA,EAAI4E,EAASvE,SAASL,EAAGA,IAC3DuB,EAAYxE,KACR8C,EAAQlE,EAAW9G,SAAUkL,EAAGC,EAAI,GAAK,CAAEM,UAAW2B,IAAUE,MAGxE,IAAK,IAAIhO,EAAIyQ,EAASvE,SAASN,EAAI,EAAG5L,GAAK4L,EAAG5L,IAC1CoN,EAAYxE,KACR8C,EAAQlE,EAAW9G,SAAUV,EAAGyQ,EAASvE,SAASL,EAAI,GAAK,CACvDM,UAAW2B,IAAUsB,QAIjCxD,GAAK,MAGNwB,GAEEuD,EAAiB,SAACnJ,GAC3B,IAAM4F,EAAgC,GAChCwD,EAAeC,IAAcrJ,EAAW9G,UACxCoQ,EACyB,oBAA3BtJ,EAAWxK,YAAoC8Q,IAAUsB,KAAOtB,IAAUqB,MAK9E,OAJA5B,EAAc/F,GAAYiG,SAAQ,SAAC5B,EAAG7L,GAC9BA,EAAI,IAAM,GACdoN,EAAYxE,KAAK8C,EAAQkF,EAAc,EAAG/E,EAAG,CAAEM,UAAW2E,QAEvD1D,GAEE2D,EAAa,SAACvJ,GAEvB,IAAM4F,EAAgC,GAKtC,OAJAG,EAAc/F,GAAYiG,SAAQ,SAAC5B,EAAG7L,GAC9BA,EAAI,IAAM,GACdoN,EAAYxE,KAAK8C,EAAQ,uBAAwB,EAAGG,EAAI,QAErDuB,GAEE4D,EAAa,SAACxJ,GAEvB,IAAM4F,EAAgC,GAsBtC,OArBAG,EAAc/F,GAAYiG,SAAQ,SAAC5B,EAAG7L,GAC9BA,EAAI,IAAM,GACdoN,EAAYxE,KAAK8C,EAAQ,aAAc,EAAGG,EAAI,QAmB3CuB,GAGE6D,EAAmC,SAC5CzJ,EACA0J,EACAC,EACAC,GAGA,GAAIlH,SAAS1C,EAAWvJ,aAAe,EACnC,MAAO,GAEX,IAAMkO,EAAqB,UAAT+E,EAAmBpD,IAAUqB,MAAQrB,IAAUsB,KAC3DiC,EAAa7J,EAAW9E,oBAAsB,EAAI,EAClDqK,EAAmB,UAATmE,EAAmB,EAAIG,GAAc,EAAIA,EACnDC,EAC2B,SAA7B9J,EAAW1G,eAA4B0G,EAAWlL,6BAA+B,EAAI,EACnFiV,EAAa7F,EAAQ,wBAAyBqB,EAAS,GAAI,CAC7DZ,UAAWA,EACXM,iBAAkB,CACd+E,sBAAuB,CACnBlD,aAAc,CACVjR,KAAM,UACN4O,KAAM,eAEVwF,iBAAkB,EAAIvH,SAAS1C,EAAWvJ,YAAcqT,EACxDI,UAAW,IACXC,cAAe,CACXtU,KAAM,UACN4O,KAAM,mBAetB,OAVAkF,EAAO1D,SAAQ,SAACmE,EAAOjT,GACnB,IAAMkT,EAAWT,EAAUzS,GACb,IAAVA,IAEAmT,EAA2BF,EAAOL,EAAY,SAE9CO,EAA2BP,EAAYM,EAAU,QAAS,MAE9DC,EAA2BF,EAAOC,EAAU,UAEzC,CAACN,IAGCQ,EAA+B,SACxCvK,EACAwK,EACAC,GAEA,IAAMC,EAAUxG,EAAQ,qBAAsB,EAAG,EAAG,CAChDe,iBAAkB,CACd0F,mBAAoB,CAChB7D,aAAc,CACVjR,KAAM,UACN4O,KAAM,mBAEVsC,SAAUrE,SAAS1C,EAAWhF,wBAC9BgM,WAAYhH,EAAWpF,yBACvBuP,cAAe,CACXtU,KAAM,UACN4O,KAAM,cAEVmG,uBAAuB,MAQnC,OAHAN,EAA2BI,EAASD,EAAW,QAAS,IAAK,KAE7DH,EAA2BI,EAASF,EAAS,SACtC,CAACE,IAGCG,EAAoC,SAC7C7K,EACAwK,EACAC,GAEA,IAAIK,EAAoB,EACpBC,EAAoB,EACpBC,EAAoBhL,EAAW9E,oBAAsB,EAAI,EAC7D,GACK0F,IAAcjL,SAASqK,EAAWxK,cAA6C,SAA7BwK,EAAW1G,eAC7D5D,IAAaC,SAASqK,EAAWxK,cAAiD,SAAjCwK,EAAWlD,kBAC/D,CACEgO,IAAsB,EACtBC,IAAsB,EAEtBC,GAAqB,EAAIA,EADH,EAI1B,IAAMC,EAA6C,CAC/Cf,UAAWlK,EAAW1D,8BACtB6N,cAAe,CACXtU,KAAM,UACN4O,KAAM,aAIoC,SAA9CzE,EAAW3D,gCACXwG,IAAkBlN,SAASqK,EAAW3D,gCAEtC4O,EAAoB,aAAmB,CACnCpV,KAAM,UACN4O,KACkD,SAA9CzE,EAAW3D,+BACL,cADN,iBAEgB2D,EAAW3D,iCAGnC4O,EAAoB,eAAqBvI,SAAS1C,EAAW3D,gCAEf,SAA9C2D,EAAWzD,gCACXsG,IAAkBlN,SAASqK,EAAWzD,gCAEtC0O,EAAoB,cAAoB,CACpCpV,KAAM,UACN4O,KACkD,SAA9CzE,EAAWzD,+BACL,cADN,iBAEgByD,EAAWzD,iCAGnC0O,EAAoB,gBAAsBvI,SACtC1C,EAAWzD,gCAEnB,IAAM2O,EAAchH,EAAQ,wBAAyB4G,EAAoBE,EAAmB,EAAG,CAC3F/F,iBAAkB,CACd+E,sBAAuBiB,KAKzBE,EAA6C,CAC/CjB,UAAWlK,EAAWvD,8BACtB0N,cAAe,CACXtU,KAAM,UACN4O,KAAM,aAIoC,SAA9CzE,EAAWxD,gCACXqG,IAAkBlN,SAASqK,EAAWxD,gCAEtC2O,EAAoB,aAAmB,CACnCtV,KAAM,UACN4O,KACkD,SAA9CzE,EAAWxD,+BACL,cADN,iBAEgBwD,EAAWxD,iCAGnC2O,EAAoB,eAAqBzI,SAAS1C,EAAWxD,gCAEf,SAA9CwD,EAAWtD,gCACXmG,IAAkBlN,SAASqK,EAAWtD,gCAEtCyO,EAAoB,cAAoB,CACpCtV,KAAM,UACN4O,KACkD,SAA9CzE,EAAWtD,+BACL,cADN,iBAEgBsD,EAAWtD,iCAGnCyO,EAAoB,gBAAsBzI,SACtC1C,EAAWtD,gCAEnB,IAAM0O,EAAclH,EAAQ,wBAAyB6G,EAAoBC,EAAmB,EAAG,CAC3F/F,iBAAkB,CACd+E,sBAAuBmB,KAQ/B,OAJAb,EAA2Bc,EAAaX,EAAW,QAAS,IAAK,IAAK,EAAG,GACzEH,EAA2BY,EAAaE,EAAa,QAAS,IAAK,IAAK,EAAG,GAE3Ed,EAA2BY,EAAaV,EAAS,SAC1C,CAACU,EAAaE,IAGZC,EAAsB,SAACrL,GAChC,IAAM4F,EAAgC,GAKtC,OAJAC,EAAyB7F,GAAYiG,SAAQ,SAAC5B,EAAG7L,EAAGkQ,GAC5ClQ,EAAI,IAAM,GAAKkQ,EAAMnH,SAAW/I,EAAI,GAAW,IAANA,GAC7CoN,EAAYxE,KAAK8C,EAAQ,uBAAwB,EAAGG,EAAI,QAErDuB,GAEE0F,EAAyB,SAACtL,GACnC,IAAM4F,EAAgC,GAKtC,OAJAE,EAAwB9F,GAAYiG,SAAQ,SAAC5B,EAAG7L,EAAGkQ,GAC3ClQ,EAAI,IAAM,GAAKkQ,EAAMnH,SAAW/I,EAAI,GAAW,IAANA,GAC7CoN,EAAYxE,KAAK8C,EAAQ,uBAAwB,EAAGG,EAAI,QAErDuB,GAEE2F,EAAgC,SACzCvL,GAGA,IAAM4F,EAAgC,GA+BtC,OA9BAC,EAAyB7F,GAAYiG,SAAQ,SAAC5B,EAAG7L,GACzCA,EAAI,IAAM,IACdoN,EAAYxE,KAAK8C,EAAQ,WAAY,EAAGG,EAAI,GAAK,CAAEM,UAAW2B,IAAUqB,SACxE/B,EAAYxE,KACR8C,EAAQ,2BAA4B,EAAGG,EAAI,GAAK,CAC5CU,gBAAiB,CACb,CACI5N,MAAO,EACPsN,KAAMzE,EAAWlG,eACjBqN,MAAOzE,SAAS1C,EAAW9F,2BAM/C4L,EAAwB9F,GAAYiG,SAAQ,SAAC5B,EAAG7L,GACxCA,EAAI,IAAM,IACdoN,EAAYxE,KAAK8C,EAAQ,WAAY,EAAGG,EAAI,GAAK,CAAEM,UAAW2B,IAAUqB,SACxE/B,EAAYxE,KACR8C,EAAQ,2BAA4B,EAAGG,EAAI,GAAK,CAC5CU,gBAAiB,CACb,CACI5N,MAAO,EACPsN,KAAMzE,EAAWlG,eACjBqN,MAAOzE,SAAS1C,EAAW9F,2BAMxC0L,GAGE0E,EAA6B,SACtCkB,EACAC,EACAC,GAKQ,IAJRC,EAIO,uDAJuB,IAC9BC,EAGO,uDAHuB,IAC9BC,EAEO,4DAF6BnF,EACpCoF,EACO,4DAD6BpF,EAE9BqF,EAAgBP,EAAQhH,cACxBwH,EAAgBP,EAAQjH,cAExByH,EAAiB,SAACC,EAAwBC,GACvCD,EAAOE,cACRF,EAAOE,YAAc,IAEpBF,EAAOE,YAAYD,KACpBD,EAAOE,YAAYD,GAAa,IAEpC,IAAME,EAAcH,EAAOE,YAAYD,GAIlCE,EAAYX,KACbW,EAAYX,GAAS,KAQ7BO,EAAeT,EAASG,GACxBM,EAAeR,EAASG,GAExB,IAAMU,EAA4B,CAC9BC,UAAWP,GAETQ,EAA4B,CAC9BD,UAAWR,GAGXF,IACAS,EAAMG,WAAaZ,GAEnBC,IACAU,EAAMC,WAAaX,GAKvBN,EAAQY,YAAYT,GAAkBD,GAAOtK,KAAKkL,GAGlDb,EAAQW,YAAYR,GAAkBF,GAAOtK,KAAKoL,IAEzCE,EAAuB,SAACpH,EAAyBoG,GAC1DpG,EAAMW,SAAQ,SAAC0G,EAAOxV,GAClB,GAAc,IAAVA,EAAJ,CACA,IAAMyV,EAAQtH,EAAMnO,EAAQ,GAC5BmT,EAA2BqC,EAAOC,EAAOlB,QAIpCmB,EAAwB,SAACvH,GAElC,OAAOA,EAAMvO,KAAI,SAACwN,GACd,IAAM9C,EAAOtD,EAAUoG,GAWvB,OAVA9C,EAAK+C,cAAgBR,EACrBA,GAAgB,EAChBvC,EAAKiD,SAASN,GAAK3C,EAAKiD,SAASN,EAAI0I,IACnB,iBAAdrL,EAAKgD,KACAhD,EAAKkD,UACLlD,EAAKkD,eAAY+B,EADDjF,EAAKkD,UAAY,EAGlClD,EAAKkD,YAAc2B,IAAUsB,KAAMnG,EAAKkD,UAAY2B,IAAUqB,MACzDlG,EAAKkD,YAAc2B,IAAUqB,QAAOlG,EAAKkD,UAAY2B,IAAUsB,MAErEnG,MAGFsL,EAAyB,SAACzH,GAAiD,IAAxBlB,EAAuB,uDAAnB,EAAGC,EAAgB,uDAAZ,EAEvEiB,EAAMW,SAAQ,SAAC1B,GACXA,EAAKG,SAAW,CACZN,EAAGG,EAAKG,SAASN,EAAIA,EACrBC,EAAGE,EAAKG,SAASL,EAAIA,OAIpB2I,EAAiB,SAAC1H,GAA6D,IAApClB,EAAmC,uDAA/B,EAAGC,EAA4B,uDAAxB,EAE/D,OAAOiB,EAAMvO,KAAI,SAACwN,GACd,IAAM0I,EAAwB9O,EAAUoG,GAOxC,OANA0I,EAAMzI,cAAgBR,EACtBA,GAAgB,EAChBiJ,EAAMvI,SAAW,CACbN,EAAG6I,EAAMvI,SAASN,EAAIA,EACtBC,EAAG4I,EAAMvI,SAASL,EAAIA,GAEnB4I,MAGFC,EAAW,SACpBC,EACAC,EACAC,GAEA,MAAkB,SAAdF,EACM,GAAN,mBAAWC,GAAX,YAAyBC,IACJ,SAAdF,EACAC,EACc,UAAdD,EACAE,GAEX7N,QAAQ8N,OAAO,+BACR,KAEEtE,EAAkB,SAAC1D,GAC5BA,EAAMiI,MAAK,SAACC,EAAGC,GAEX,OAAID,EAAE9I,SAASL,EAAIoJ,EAAE/I,SAASL,GAClB,EACDmJ,EAAE9I,SAASL,EAAIoJ,EAAE/I,SAASL,GAIjCmJ,EAAE9I,SAASN,EAAIqJ,EAAE/I,SAASN,EAHnB,EAKAoJ,EAAE9I,SAASN,EAAIqJ,EAAE/I,SAASN,GACzB,EAEL,MAGFsJ,EAAmB,SAACpI,GAA6D,IAApCqI,EAAmC,uDAAxB,EACjE,GAAqB,IAAjBrI,EAAM/D,OACN,MAAO,GAEXyH,EAAgB1D,GAChB,IAAIM,EAAgC,GAChCvB,EAAIiB,EAAM,GAAGZ,SAASL,EACtBuJ,EAA6B,GAgBjC,OAfAtI,EAAMW,SAAQ,SAAC1B,GACPA,EAAKG,SAASL,IAAMA,IACpBA,EAAIE,EAAKG,SAASL,EACdsJ,EAAW,GAAK,GAChBC,EAAS1E,UAEbyE,GAAY,EACZ/H,EAAW,sBAAOA,GAAP,YAAuBgI,IAClCA,EAAW,IAEfA,EAASxM,KAAKmD,MAElBqJ,EAAS1E,UACTtD,EAAW,sBAAOA,GAAP,YAAuBgI,M,+hCCv5B1BtH,E,OAhGCwG,GAAiB,EAEjBlL,EAAa,sEAQblB,EAA+B,CACxC,kBACA,oBACA,wBACA,0BACA,WAESE,EAAgC,CAAC,kBAAmB,qBACpDlL,EAA+B,CAAC,wBAAyB,2BACzDtB,EAAa,CAAC,WAAY,UAAW,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAElF0C,EAAkC,CAAC,WAAY,gBAAiB,kBAChEE,EAAqB,CAC9BqT,SAAU,WACV,gBAAiB,gBACjB,iBAAkB,kBAET5C,EAAkB,CAC3B4C,SAAU,kBACV,gBAAiB,kBACjB,iBAAkB,mBAETvC,EAAoB,CAC7BuC,SAAU,EACV,gBAAiB,EACjB,iBAAkB,IAGTrR,EAA+B,CACxC,2BACA,wBACA,kCACA,iCACA,0BAESd,EAAyB,UARQ,CAAC,eAAgB,aAAc,eAQZc,GACpDX,EAAmC,CAC5C,2BACA,yBAESF,EAAkB,CAC3B,eAAgB,eAChB,aAAc,aACd,cAAe,cACf,2BAA4B,kBAC5B,wBAAyB,eACzB,kCAAmC,yBACnC,iCAAkC,wBAClC,yBAA0B,iBAEjBgB,EAA0B,CACnC,iBACA,sBACA,0BAESC,EAAiB,CAC1B,iBAAkB,cAClB,sBAAuB,WACvB,yBAA0B,aAEjBiQ,EAAgB,CACzB,iBAAkB,WAClB,sBAAuB,gBACvB,yBAA0B,oBAEjB9P,EAA0B,CAAC,OAAQ,QAAS,QAC5CwD,EAA0B,CAAC,QAAS,QACpCpD,EAAqB,CAAC,QAAS,OAAQ,QACvCI,EAAsC,CAC/C,OACA,OACA,aACA,cACA,gBAESE,EAAuB,CAChC4T,KAAM,OACNC,KAAM,OACN,aAAc,aACd,cAAe,cACf,eAAgB,gBAGPlQ,EAAuB,CAAC,aAAc,cACtCD,EAAY,CAAI,YAAa,eAAjB,OAAmCC,I,SAEhD0I,O,WAAAA,I,iBAAAA,I,eAAAA,I,gBAAAA,M,KAOL,IAAMzL,EAA0D,CAAC,IAAK,KAChEE,EAAiC,CAAE,IAAK,gBAAiB,IAAK,iBAK9DkB,EAA6B,CACtC,IACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,MACA,KACA,OAES4G,EAAoB,CAC7B,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAGSpE,EAAkB,CAE3BsP,YAAa,GAGbvY,YAAa,UAAIkL,GAAc,GAC/BtF,YAAa,GAGbhH,WAAYA,EAAW,GAEvBiI,+BAAgC,OAChCE,+BAAgC,MAChCD,8BAA+B,IAE/BE,+BAAgC,IAChCE,+BAAgC,IAChCD,8BAA+B,IAE/Bb,4BAA4B,EAC5BC,oBAAqB,GAGrBvH,cAAc,EACdkC,kBAAmB,IACnBC,WAAY,IACZlC,yBAAyB,EAGzBuI,kBAAmB,UAAIC,GAAW,GAClCG,qBAAqB,EACrBD,uBAAwB,IAGxBpG,aAAc,UAAIC,GAAe,GACjCtC,uBAAuB,EAEvB6C,aAAcQ,MAAM,GAAGC,KAAK,IAG5BrD,UAAW,YAAIyD,GAAY,GAE3BxD,WAAY,GAEZmE,yBAAyB,EACzBF,sBAAuBd,MAAM,IAAIC,KAAK,IACtCc,wBAAyBf,MAAM,IAAIC,KAAK,IAGxCoB,SAAU,UAAIC,GAAW,GACzBG,cAAe,UAAIC,GAAW,GAC9BG,kBAAmB,UAAIC,GAAoB,GAG3C/E,eAAe,EACfkF,eAAgB,UAAIC,GAAiB,GACrCG,iBAAkB,KAGlBrF,4BAA4B,EAC5BC,8BAA8B,EAC9BC,0BAA0B,EAC1BC,4BAA4B,EAC5BC,uBAAuB,EAGvBC,+BAA+B,EAC/B0F,yBAA0B,UAAIC,GAA2B,GACzDG,uBAAwB,OAGxBE,qBAAqB,EAGrB2C,2BAA4B,IAC5B1I,iBAAiB,EACjBuI,YAAa,UAAIE,GAAsB,K,iCC7O3C,mHAMM2E,EAAOnE,EAAQ,IAER8C,EAAkB,SAAClB,GAC5B,OAAIY,IAAcjL,SAASqK,EAAWxK,aAC3BwY,YAAoBhO,GAE3BtK,IAAaC,SAASqK,EAAWxK,aAC1ByY,YAAmBjO,GACQ,YAA3BA,EAAWxK,YACX0Y,YAAclO,GAElB,IAgCEiB,EAAwB,SAACkN,GAElC,OAvBW,SAAC7I,GACZ,IAAM6I,EAAY,CACdA,UAAW,CACPC,MAAO,CACH,CACIC,OAAQ,CACJxY,KAAM,OACN4O,KAAM,kBAEVtN,MAAO,IAGfmX,SAAUhJ,EACVf,KAAM,YACNgK,QAAS,IACTC,MAAO,cAGf,MAAO,IAAMjM,EAAKiB,YAAYC,KAAKC,UAAUyK,GAAY,CAAExK,MAAO,IAAKnD,SAAS,UAKzEiO,CAAON,M,4HCrBLH,EAAsB,SAAChO,GAChCiE,cACA,IAAIyK,EAA6B,GAC7BC,EAAmC,GAGnCC,EAAiC,GAE/BC,EAAc9G,YAAY/H,GAC1B8O,EAAajC,YAAsBgC,GACnClF,EAASuD,YAASlN,EAAW1G,cAAewV,EAAYD,GAE9D7F,YAAgB6F,GAChB7F,YAAgB8F,GACZ9O,EAAWnL,6BACX6X,YAAqBoC,EAAY,SACjCpC,YAAqBmC,EAAa,UAElC7O,EAAWlL,8BAA6D,SAA7BkL,EAAW1G,eACtDgR,YAA2BuE,EAAY,GAAIC,EAAW,GAAI,SAE1D9O,EAAWjL,2BACX2X,YAAqBoC,EAAY,OACjCpC,YAAqBmC,EAAa,QAElC7O,EAAWhL,4BAA2D,SAA7BgL,EAAW1G,eACpDgR,YAA2BuE,EAAY,GAAIC,EAAW,GAAI,OA1B2B,MA4BtCzH,YAAerH,GA5BuB,mBA4BlF+O,EA5BkF,KA4B7DC,EA5B6D,KA6BnFC,EAAqBpC,YAAsBmC,GAC7CE,EAA2C,GAC3CC,EAA0C,GAC1CnP,EAAW/K,wBACX+T,YAAgBiG,GAChBjG,YAAgBgG,GAChBhG,YAAgB8F,GAChB9F,YAAgB6F,GAEhBK,EAAyBzF,YACrBzJ,EACA,QACA6O,EACAG,GAEJG,EAAwB1F,YACpBzJ,EACA,OACA8O,EACAG,GAGJvC,YAAqBsC,EAAqB,SAC1CtC,YAAqBuC,EAAoB,UAI7C,IAAIG,EAAmC,GAEvC,IAAKpW,IAAcrD,SAASqK,EAAWvL,WAAY,CAC/C,IAAM4a,EAAelG,YAAenJ,GACpC2O,EAAc,sBAAOA,GAAP,YAA0BU,IAEpCD,EAD2B,oBAA3BpP,EAAWxK,YACG,sBAAO4Z,GAAP,YAA0BjH,YAAkBnI,KAG5C,sBAAOoP,GAAP,YAA0BhH,YAAoBpI,KAIpEoP,EAAc,sBAAOA,GAAP,YAA0BL,IAExC,IAAMO,EAAa/F,YAAWvJ,GACxBuP,EAAY1C,YAAsByC,GAClCE,EAAQtC,YAASlN,EAAW1G,cAAeiW,EAAWD,GACxDG,EAAkC5C,YAAsBuC,GAiB5D,GAdAA,EAAc,sBACPA,GADO,YAEPE,GAFO,YAGPT,GAHO,YAIPG,GAJO,YAKPE,IAEPO,EAAa,sBACNA,GADM,YAENF,GAFM,YAGNT,GAHM,YAING,GAJM,YAKNE,IAEHnP,EAAW9E,oBAAqB,CAChC,IAAMwU,EAAalG,YAAWxJ,GACxB2P,EAAY9C,YAAsB6C,GACxCN,EAAc,sBAAOA,GAAP,YAA0BM,IACxCD,EAAa,sBAAOA,GAAP,YAAyBE,IAI1Cf,EAAY,sBAAOA,GAAP,YAAwB5I,YAAiBhG,KACrD4O,EAAY,sBAAOA,GAAP,YAAwB1I,YAAalG,KACjD,IAAMyK,EAAYhE,YAAezG,GAAY,GAO7C,GANA4O,EAAY,sBAAOA,GAAP,CAAqBnE,IAC7BzK,EAAWpL,gBAEXga,EAAY,sBAAOA,GAAP,YAAwBrD,YAA8BvL,KAClE4O,EAAY,sBAAOA,GAAP,YAAwBtD,YAAuBtL,MAG3DA,EAAWpL,eACXoL,EAAW9K,+BACe,YAA1B8K,EAAW5L,WACb,CAEE,IAAMwb,EAAWvE,YAAoBrL,GAYrC,GAXA4O,EAAY,sBAAOA,GAAP,YAAwBgB,IACpC5G,YAAgBwG,GAGZxP,EAAW9K,gCACX0Z,EAAY,sBACLA,GADK,YAELrE,YAA6BvK,EAAYwP,EAAM,GAAI/E,MAIhC,YAA1BzK,EAAW5L,WAA0B,CACrC,IAAMyb,EAAchF,YAAkC7K,EAAYwP,EAAM,GAAI/E,GAC5EmE,EAAY,sBAAOA,GAAP,YAAwBiB,IAGxC,GAAI7P,EAAW9K,+BAA2D,YAA1B8K,EAAW5L,WAA0B,CAEjF4U,YAAgBW,GAChB,IAAMmG,EAAY,CAAInG,EAAO,GAAI6F,EAAM,IAArB,mBAA4BI,IAC9C5G,YAAgB8G,GAChBpD,YAAqBoD,EAAc,UAe3C,GAZI9P,EAAWzL,0BACXqa,EAAY,sBAAOA,GAAP,YAAwB1H,YAAWlH,MAInD4O,EAAY,sBACLA,GADK,YAEL1B,YAASlN,EAAW1G,cAAemW,EAAeL,KAGzDV,EAAQ,sBAAOA,GAAP,YAAoBE,IAES,SAAjC5O,EAAWtG,kBAA8B,CACzC,IAAMqW,EAAqBnH,YAAmB5I,EAAY2O,GACpDqB,EAAoBnD,YAAsBkD,GAChDrB,EAAQ,sBACDA,GADC,YAEDxB,YAASlN,EAAW1G,cAAe0W,EAAmBD,KAIjE,IAAME,EAAgBpD,YAAsB8B,GAGtCuB,GAFNxB,EAAQ,sBAAOA,GAAP,YAAoBxB,YAASlN,EAAW1G,cAAe2W,EAAetB,MAElDwB,QAAO,SAAC5L,GAChC,MAAqB,eAAdA,EAAKE,QAEV2L,EAAc1B,EAASyB,QAAO,SAAC5L,GACjC,MAAqB,gBAAdA,EAAKE,QAWhB,OATAuE,YAAgBkH,GAChBlH,YAAgBoH,GAChBF,EAAWzY,MAAM,GAAGwO,SAAQ,SAACoK,EAAM7X,GAC/B,IAAM6V,EAAS+B,EAAY5X,GAC3B8R,YAA2B+F,EAAMhC,EAAQ,YAI7CtB,YAAuB2B,GAAW,IAC3BA,I,oFCrLET,EAAqB,SAACjO,GAC/BiE,cACA,IAAIyK,EAA6B,GAG7BE,EAAiC,GAEjC0B,EAAsC/H,YAAkBvI,GACxDuQ,EAAqC1D,YAAsByD,GAC/DA,EAAoB5C,YAAiB4C,GACrCC,EAAmB7C,YAAiB6C,EAAkB,GAClDvQ,EAAWnL,6BACX6X,YAAqB6D,EAAkB,SACvC7D,YAAqB4D,EAAmB,UAExCtQ,EAAWjL,2BACX2X,YAAqB6D,EAAkB,OACvC7D,YAAqB4D,EAAmB,QAI5C,IAAIlB,EAAmC,GAEjCE,EAAa/F,YAAWvJ,GACxBuP,EAAY1C,YAAsByC,GAClCE,EAAQtC,YAASlN,EAAWlD,kBAAmByS,EAAWD,GAC5DG,EAAkC5C,YAAsBuC,GACtDoB,EAAanI,YAAWrI,GACxByQ,EAAY5D,YAAsB2D,GAClCE,EAAajI,YAAWzI,GACxB2Q,EAAY9D,YAAsB6D,GAGxC,GAAI1Q,EAAW9E,oBAAqB,CAChC,IAAMwU,EAAalG,YAAWxJ,GACxB2P,EAAY9C,YAAsB6C,GACxCN,EAAc,sBAAOA,GAAP,YAA0BM,IACxCD,EAAa,sBAAOA,GAAP,YAAyBE,IAE1CP,EAAc,sBAAOA,GAAP,YAA0BE,GAA1B,YAAyCkB,GAAzC,YAAwDE,IACtEjB,EAAa,sBAAOA,GAAP,YAAyBF,GAAzB,YAAuCkB,GAAvC,YAAqDE,IAGlE/B,EAAY,sBAAOA,GAAP,YAAwB5I,YAAiBhG,KACrD4O,EAAY,sBAAOA,GAAP,YAAwB1I,YAAalG,KACjD,IAAMyK,EAAYhE,YAAezG,GAAY,GAE7C,GADA4O,EAAY,sBAAOA,GAAP,CAAqBnE,IAC7BzK,EAAWpL,cAAe,CAC1Bga,EAAY,sBAAOA,GAAP,YAAwBrD,YAA8BvL,KAClE,IAAM4Q,EAActF,YAAuBtL,GAC3C4O,EAAY,sBAAOA,GAAP,YAAwBgC,IAExC,GACI5Q,EAAWpL,eACXoL,EAAW9K,+BACe,YAA1B8K,EAAW5L,WACb,CACE,IAAMwb,EAAWvE,YAAoBrL,GAarC,GAZA4O,EAAY,sBAAOA,GAAP,YAAwBgB,IACpC5G,YAAgBwG,GAGZxP,EAAW9K,gCACX0Z,EAAY,sBACLA,GADK,YAELrE,YAA6BvK,EAAYwP,EAAM,GAAI/E,MAKhC,YAA1BzK,EAAW5L,WAA0B,CACrC,IAAMyb,EAAchF,YAAkC7K,EAAYwP,EAAM,GAAI/E,GAC5EmE,EAAY,sBAAOA,GAAP,YAAwBiB,IAIxC,GAAI7P,EAAW9K,+BAA2D,YAA1B8K,EAAW5L,WAA0B,CAEjF,IAKM0b,EAAY,CALG5C,YACjBlN,EAAWlD,kBACXyT,EACAD,GAE+B,GAAId,EAAM,IAA3B,mBAAkCI,IACpD5G,YAAgB8G,GAChBpD,YAAqBoD,EAAc,UAGvC9P,EAAWzL,0BACXqa,EAAY,sBAAOA,GAAP,YAAwB1H,YAAWlH,MAInD4O,EAAY,sBACLA,GADK,YAEL1B,YAASlN,EAAWlD,kBAAmB2S,EAAeL,IAFjD,YAGLlC,YAASlN,EAAWlD,kBAAmByT,EAAkBD,KAKhE,IAAMJ,GAFNxB,EAAQ,sBAAOA,GAAP,YAAoBE,KAEAuB,QAAO,SAAC5L,GAChC,MAAqB,eAAdA,EAAKE,QAEV2L,EAAc1B,EAASyB,QAAO,SAAC5L,GACjC,MAAqB,gBAAdA,EAAKE,QAWhB,OATAuE,YAAgBkH,GAChBlH,YAAgBoH,GAChBF,EAAWzY,MAAM,GAAGwO,SAAQ,SAACoK,EAAM7X,GAC/B,IAAM6V,EAAS+B,EAAY5X,GAC3B8R,YAA2B+F,EAAMhC,EAAQ,YAI7CtB,YAAuB2B,GAAW,IAC3BA,I,0pxDC5IEmC,EAAgD,CACzD,CACIpM,KAAM,cACNC,SAAU,CACNN,EAAG,EACHC,EAAG,IAGX,CACII,KAAM,gBACNC,SAAU,CACNN,GAAI,EACJC,GAAI,GAERM,UAAW,GAEf,CACIF,KAAM,cACNC,SAAU,CACNN,GAAI,EACJC,GAAI,GAERM,UAAW,GAEf,CACIF,KAAM,gBACNC,SAAU,CACNN,GAAI,GACJC,GAAI,GAERM,UAAW,GAEf,CACIF,KAAM,gBACNC,SAAU,CACNN,GAAI,GACJC,GAAI,GAERM,UAAW,IAINmM,EAAiD,CAC1D,CACIrM,KAAM,cACNC,SAAU,CACNN,EAAG,EACHC,EAAG,GAEPM,UAAW,GAEf,CACIF,KAAM,gBACNC,SAAU,CACNN,EAAG,EACHC,GAAI,GAERM,UAAW,GAEf,CACIF,KAAM,cACNC,SAAU,CACNN,EAAG,EACHC,GAAI,GAERM,UAAW,GAEf,CACIF,KAAM,gBACNC,SAAU,CACNN,EAAG,GACHC,GAAI,GAERM,UAAW,GAEf,CACIF,KAAM,gBACNC,SAAU,CACNN,EAAG,GACHC,GAAI,GAERM,UAAW,IAINoM,EAA+C,CACxD,CACItM,KAAM,cACNC,SAAU,CACNN,EAAG,EACHC,EAAG,GAEPM,UAAW,GAEf,CACIF,KAAM,gBACNC,SAAU,CACNN,GAAI,EACJC,EAAG,GAEPM,UAAW,GAEf,CACIF,KAAM,cACNC,SAAU,CACNN,GAAI,EACJC,EAAG,IAEPM,UAAW,GAEf,CACIF,KAAM,gBACNC,SAAU,CACNN,GAAI,GACJC,EAAG,IAEPM,UAAW,GAEf,CACIF,KAAM,gBACNC,SAAU,CACNN,GAAI,GACJC,EAAG,IAEPM,UAAW,IAINqM,EAAgD,CACzD,CACIvM,KAAM,cACNC,SAAU,CACNN,EAAG,EACHC,EAAG,GAEPM,UAAW,GAEf,CACIF,KAAM,gBACNC,SAAU,CACNN,EAAG,EACHC,EAAG,GAEPM,UAAW,GAEf,CACIF,KAAM,cACNC,SAAU,CACNN,EAAG,EACHC,EAAG,IAEPM,UAAW,GAEf,CACIF,KAAM,gBACNC,SAAU,CACNN,EAAG,GACHC,EAAG,IAEPM,UAAW,GAEf,CACIF,KAAM,gBACNC,SAAU,CACNN,EAAG,GACHC,EAAG,IAEPM,UAAW,ICtKNsM,EAAwD,CACjE,CACIxM,KAAM,cACNC,SAAU,CACNN,EAAG,EACHC,EAAG,GAEPM,UAAW,GAEf,CACIF,KAAM,gBACNC,SAAU,CACNN,GAAI,EACJC,GAAI,GAERM,UAAW,GAEf,CACIF,KAAM,gBACNC,SAAU,CACNN,GAAI,EACJC,GAAI,GAERM,UAAW,GAEf,CACIF,KAAM,oBACNC,SAAU,CACNN,GAAI,IACJC,EAAG,KAEPM,UAAW,IAKNuM,EAAyD,CAClE,CACIzM,KAAM,gBACNC,SAAU,CACNN,GAAI,EACJC,EAAG,GAEPM,UAAW,GAEf,CACIF,KAAM,cACNC,SAAU,CACNN,EAAG,EACHC,EAAG,GAEPM,UAAW,GAEf,CACIF,KAAM,gBACNC,SAAU,CACNN,EAAG,EACHC,GAAI,GAERM,UAAW,GAEf,CACIF,KAAM,gBACNC,SAAU,CACNN,EAAG,EACHC,GAAI,GAERM,UAAW,GAEf,CACIF,KAAM,oBACNC,SAAU,CACNN,GAAI,GACJC,EAAG,KAEPM,UAAW,IAINwM,EAAuD,CAChE,CACI1M,KAAM,gBACNC,SAAU,CACNN,GAAG,GACHC,EAAG,GAEPM,UAAW,GAEf,CACIF,KAAM,gBACNC,SAAU,CACNN,GAAG,GACHC,EAAG,GAEPM,UAAW,GAEf,CACIF,KAAM,cACNC,SAAU,CACNN,GAAI,EACJC,EAAG,GAEPM,UAAW,GAEf,CACIF,KAAM,gBACNC,SAAU,CACNN,GAAI,EACJC,EAAG,GAEPM,UAAW,GAEf,CACIF,KAAM,cACNC,SAAU,CACNN,GAAG,IACHC,EAAG,KAEPM,UAAW,IAINyM,EAAwD,CACjE,CACI3M,KAAM,gBACNC,SAAU,CACNN,GAAG,EACHC,EAAG,GAEPM,UAAW,GAEf,CACIF,KAAM,gBACNC,SAAU,CACNN,GAAG,EACHC,EAAG,IAEPM,UAAW,GAEf,CACIF,KAAM,cACNC,SAAU,CACNN,GAAI,EACJC,EAAG,GAEPM,UAAW,GAEf,CACIF,KAAM,cACNC,SAAU,CACNN,GAAI,IACJC,EAAG,KAEPM,UAAW,ICnINuJ,EAAgB,SAAClO,GAE1B,OADAiE,cACIjE,EAAW7K,gBACJkc,EAAsBrR,GAEtBsR,EAAsBtR,IAIxBsR,EAAwB,SAACtR,GAClC,IAQIuR,EACAC,EACAC,EAVEC,EAAiE,EAAnDjZ,KAAKC,MAAM+M,YAAczF,GAAYuB,OAAS,GAK5DoQ,IAJqB3R,EAAW1L,aAAe,EAAI,GAEhCoO,SAAS1C,EAAWxJ,mBACzCkM,SAAS1C,EAAWvJ,aACa,IAAM,EAAI,EAAI,EAC7Cmb,EAAiBlP,SAAS1C,EAAWnC,4BAMvC0T,EAD2B,cAA3BvR,EAAWtC,aAA0D,eAA3BsC,EAAWtC,YACxC2H,YAA0BwL,GAAiB,GAAI,GAE/CxL,YAA0ByL,GAAkB,GAAI,GAGlC,cAA3B9Q,EAAWtC,aAA0D,eAA3BsC,EAAWtC,aACrD8T,EAAYnM,YAA0B0L,GAAgB,EAAGW,EAAc,EAAIC,GAC3EF,EAAsBvN,YAClB,qBACA,KACA,KAAOwN,EAAcC,EACrB,CACIhN,UAAW,MAInB6M,EAAYnM,YAA0B2L,GAAiB,EAAGU,EAAc,EAAIC,GAC5EF,EAAsBvN,YAClB,oBACA,IAAW,EAAI0N,EACf,IAAMF,EAAcC,EACpB,CAAEhN,UAAW,KAIrB,IAAIkN,EAAkB,sBACf7L,YAAiBhG,IADF,YAEfkG,YAAalG,IAFE,YAGfuR,GAHe,YAIfC,IAEHxR,EAAWzL,0BACXsd,EAAkB,sBAAOA,GAAP,YAA8B3K,YAAWlH,MAC/D+M,YAAuB8E,GAAqB,IAG5C,IADA,IAAInD,EAA6B,GACxBlW,EAAI,EAAGA,EAAIoZ,EAAgBpZ,IAChCkW,EAAQ,sBAAOA,GAAP,YAAoB1B,YAAe6E,EAAwB,EAAJrZ,KAInE,OAFAkW,EAAQ,sBAAOA,GAAP,CAAiB+C,KAKhBJ,EAAwB,SAACrR,GAClC,IAmBIuR,EACAC,EACAC,EArBEK,EAAqB9R,EAAW1L,aAAe,EAAI,EAGnDyd,EAOE,EANJtZ,KAAK6K,MACA,KACIwO,EAAqBpP,SAAS1C,EAAWxJ,mBACtCkM,SAAS1C,EAAWvJ,aACxB,GAGR,EACEmb,EAAiBlP,SAAS1C,EAAWnC,4BAErCmU,EAAa,CAAC,aAAc,cAC5BtU,EAAcsU,EAAWrc,SAASqK,EAAWtC,aAC7CsC,EAAWtC,YACXsU,EAAW,GAKG,eAAhBtU,GACA6T,EAAalM,YAA0B6L,EAAyB,GAChEM,EAAYnM,YACR8L,EACA,EAAqB,EAAjBY,EACa,EAAjBA,GAEJN,EAAsBvN,YAClB,qBACC,IAAuB,EAAjB6N,EACP,IAAuB,EAAjBA,EACN,CAAEpN,UAAW,MAGjB4M,EAAalM,YAA0B4L,EAAwB,GAC/DO,EAAYnM,YACR+L,EACA,EAAqB,EAAjBW,EACa,EAAjBA,GAEJN,EAAsBvN,YAClB,oBACA,IAAuB,EAAjB6N,EACN,IAAuB,EAAjBA,EAAqB,EAAIH,EAC/B,CAAEjN,UAAW,KAkBrB,IAdA,IAAMsN,EAA2C,CAC7C,CACIxN,KAAM,gBACNC,SAAU,CAAEN,EAAG,EAAGC,EAAG,GACrBM,UAAW,GAEf,CACIF,KAAM,gBACNC,SAAU,CAAEN,EAAG,EAAGC,EAAG,GACrBM,UAAW,IAIfkN,EAAuC,GAClCrZ,EAAI,EAAGA,EAAIuZ,EAAgBvZ,IAAK,CACrC,IAAM0Z,EAAe7M,YAA0B4M,EAAgB,GAAJzZ,EAAW,EAAJA,GAClEqZ,EAAkB,sBAAOA,GAAP,YAA8BK,IAEpDL,EAAkB,sBAAOA,GAAP,YAA8BN,GAA9B,YAA6CC,IAI/D,IAFA,IAAI9C,EAA6B,GAExBlW,EAAI,EAAGA,EAAIoZ,EAAgBpZ,IAE5BkW,EAAQ,sBAAOA,GADC,eAAhBhR,EACQ,YAAoBsP,YAAe6E,EAAwB,EAAJrZ,EAAO,IAE9D,YAAoBwU,YAAe6E,EAAoB,EAAO,EAAJrZ,KAK1E,OAFAkW,EAAQ,sBAAOA,GAAP,CAAiB+C,M","file":"static/js/main.18c6236a.chunk.js","sourcesContent":["export const CLASSES = {\n    // Title\n    title: \"self-center underline font-bold text-3xl text-gray-300 hover:text-blue-300\",\n\n    // Background\n    background: \"bg-gray-800 h-screen\",\n    background2: \"bg-gray-800 flex flex-col\",\n\n    // Sections\n    section: \"border-black p-1 my-1 w-full bg-blue-700\",\n    gridSection: \"grid grid-cols-2 gap-2\",\n    gridSection3cols: \"grid grid-cols-3 gap-2\",\n    gridSection12cols: \"grid grid-cols-12 gap-2 my-1\",\n\n    // HTML Elements\n    checkboxElement: \"h-full w-6 place-self-center bg-red-500\",\n    radioButtonElement: \"h-full w-6 h-6 place-self-center\",\n    labelElement: \"w-full text-white my-auto\",\n    inputTextElement: \"border-2 border-gray-600 w-full bg-blue-900 text-white text-center\",\n    blueprintStringTextElement:\n        \"border-2 border-gray-600 w-full my-1 bg-blue-900 text-white text-center\",\n    selectElement: \"border-2 border-gray-600 w-full bg-blue-900 text-white\",\n    buttonElement:\n        \"border-2 border-gray-600 m-auto px-4 py-1 my-1 text-white rounded hover:bg-blue-300\",\n    // Styling doesnt apply for firefox, but works in chrome\n    optionElement: \"\",\n    footerElements: \"text-center text-gray-500 hover:bg-gray-300 rounded m-auto px-2 my-1\",\n    // Error message field\n    errorMessageElement:\n        \"text-center text-red-500 text-2xl m-1 p-2 border-2 border-red-500 bg-blue-800\",\n    // Warning message field\n    warningMessageElement: \"text-center text-yellow-500 text-xl m-1 px-2 bg-blue-800\",\n}\n","const TOOLTIPS = {\n    trainLimit:\n        \"Limits the amount of trains that will be at going to this station.<br>If set to dynamic, will automatically set the max amount based on used (loading station) / free (unloading station) space in your chests.<br>For unloading stations I recommend still setting train limit to 1, if you use multiple unloading stations of the same name. Trains will go to the closest station with enough free slots instead of stations that are most empty!\",\n    trainLimitNumberInput: \"Valid: numbers, 'each', alphabetical characters (A, B, ...)\",\n    doubleHeaded: \"Does your train have locomotives at each end (facing both ways)?\",\n    includeTrainInBlueprint:\n        \"If enabled, adds the train with the expected layout to the blueprint.\",\n    enableFilterInserters:\n        \"If enabled, turns all inserters to filters inserters of equivalent level.\",\n    chestType:\n        \"If chest type is a logistic chest, it is expected that bots will deliver/grab items from the chest. No belts will be placed.\",\n    chestLimit:\n        \"Limits the amount of free slots in the chests.<br>A cargo wagon has 40 slots, so 6 chests with 7 slots have enough capacity to fill one wagon, or 12 chests with 4.\",\n    beltFlow: \"If enabled, adds belt flow to the top/bottom of the station.\",\n    refillEnabled:\n        \"If enabled, places an inserter and a requester chest next to each locomotive with the desired fuel type and amount.\",\n    connectChestsWithGreenWire:\n        \"If enabled, connects all chests on the left and all chests / storage tanks on the right together with green wire.\",\n    connectBothSideWithGreenWire:\n        \"If enabled, connects the top left and top right chest / storage tank with green wire.\",\n    connectChestsWithRedWire:\n        \"If enabled, connects all chests on the left and all chests / storage tanks on the right together with green wire.\",\n    connectBothSideWithRedWire:\n        \"If enabled, connects the top left and top right chest / storage tank with red wire.\",\n    madzuriEvenLoadUnload: \"\",\n    trainStopUsesEnabledCondition:\n        \"If enabled, adds a decider combinator.<br>Then it creates a green wire connection with trainStop-deciderCombinator-poles-topChest.<br>The train stop will be enabled if the condition (e.g. sum of items in chests > 4000) is met.\",\n    diagonalStacker: \"Diagonal stackers are more compact.\",\n}\nexport default TOOLTIPS\n","import React from \"react\"\nimport { iSectionsProps } from \"../../constants/interfaces\"\nimport { CLASSES } from \"../../css/classes\"\nimport TOOLTIPS from \"../../constants/tooltips\"\nimport { fluidStation } from \"../../constants/constants\"\n\nexport default function TrainTypeSettings(props: iSectionsProps): JSX.Element {\n    const hideIfDiagonalStacker =\n        props.userSettings.stationType === \"Stacker\" && props.userSettings.diagonalStacker\n    const cargoWagonName = fluidStation.includes(props.userSettings.stationType) ? \"fluid\" : \"cargo\"\n    return (\n        <div className={CLASSES.section}>\n            <div className={CLASSES.gridSection}>\n                <input\n                    className={CLASSES.checkboxElement}\n                    type={\"checkbox\"}\n                    min={\"0\"}\n                    id={\"doubleHeaded\"}\n                    data-tip={TOOLTIPS.doubleHeaded}\n                    checked={props.userSettings.doubleHeaded}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            doubleHeaded: e.target.checked,\n                        })\n                    }}\n                />\n                <label className={CLASSES.labelElement} htmlFor={\"doubleHeaded\"}>\n                    Double Headed\n                </label>\n                <input\n                    className={CLASSES.inputTextElement}\n                    type={\"number\"}\n                    min={\"0\"}\n                    id={\"locomotivesPerEnd\"}\n                    value={props.userSettings.locomotivesPerEnd}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            locomotivesPerEnd: e.target.value,\n                        })\n                    }}\n                />\n                <label className={CLASSES.labelElement} htmlFor={\"locomotivesPerEnd\"}>\n                    # locomotives per end\n                </label>\n                <input\n                    className={CLASSES.inputTextElement}\n                    type={\"number\"}\n                    min={\"0\"}\n                    id={\"cargoWagon\"}\n                    value={props.userSettings.cargoWagon}\n                    onChange={(e) => {\n                        props.setUserSettings({ ...props.userSettings, cargoWagon: e.target.value })\n                    }}\n                />\n                <label className={CLASSES.labelElement} htmlFor={\"cargoWagon\"}>\n                    {`# ${cargoWagonName} wagons`}\n                </label>\n                <input\n                    className={CLASSES.checkboxElement}\n                    hidden={hideIfDiagonalStacker}\n                    type={\"checkbox\"}\n                    id={\"includeTrainInBlueprint\"}\n                    data-tip={TOOLTIPS.includeTrainInBlueprint}\n                    checked={props.userSettings.includeTrainInBlueprint}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            includeTrainInBlueprint: e.target.checked,\n                        })\n                    }}\n                />\n                <label\n                    className={CLASSES.labelElement}\n                    hidden={hideIfDiagonalStacker}\n                    htmlFor={\"includeTrainInBlueprint\"}\n                >\n                    Include Train in Blueprint\n                </label>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport { inserterTypes, inserterTypesHuman } from \"../../constants/constants\"\nimport { iInserterTypes, iSectionsProps } from \"../../constants/interfaces\"\nimport { CLASSES } from \"../../css/classes\"\nimport TOOLTIPS from \"../../constants/tooltips\"\n\nexport default function InserterSettings(props: iSectionsProps): JSX.Element {\n    // All inserter types\n    const inserterSelect = (\n        <select\n            id={\"inserterType\"}\n            className={CLASSES.selectElement}\n            value={props.userSettings.inserterType}\n            onChange={(e) => {\n                props.setUserSettings({\n                    ...props.userSettings,\n                    inserterType: e.target.value as iInserterTypes,\n                })\n            }}\n        >\n            {inserterTypes.map((inserterType) => {\n                return (\n                    <option\n                        className={CLASSES.optionElement}\n                        key={inserterType}\n                        value={inserterType}\n                    >\n                        {inserterTypesHuman[inserterType]}\n                    </option>\n                )\n            })}\n        </select>\n    )\n\n    const setValueAtIndex = (oldArray: string[], newValue: string, index: number) => {\n        props.setUserSettings({\n            ...props.userSettings,\n            // Replace the value at the fieldIndex using spread operator\n            filterFields: [\n                ...props.userSettings.filterFields.slice(0, index),\n                newValue,\n                ...props.userSettings.filterFields.slice(index + 1),\n            ],\n        })\n    }\n\n    const isFilterInserter = props.userSettings.enableFilterInserters\n\n    const newFilterInputField = (index: number) => {\n        return (\n            <input\n                key={`${index}`}\n                className={CLASSES.inputTextElement}\n                hidden={!isFilterInserter}\n                list={\"itemlist\"}\n                value={props.userSettings.filterFields[index]}\n                placeholder={\n                    index === 0 ? \"Filter 1 - e.g. 'iron-ore'\" : `Filter ${index + 1} item type`\n                }\n                onChange={(e) => {\n                    setValueAtIndex(props.userSettings.filterFields, e.target.value, index)\n                }}\n            />\n        )\n    }\n\n    // let filterInserterInputFields = []\n    let previousIsEmpty = -1\n    const filterInserterInputFields = new Array(5).fill(0).map((_, index) => {\n        if (previousIsEmpty !== -1 && previousIsEmpty < index) {\n            return undefined\n        }\n        if (props.userSettings.filterFields[index] === \"\") {\n            previousIsEmpty = index\n        }\n        return newFilterInputField(index)\n    })\n\n    return (\n        <div className={CLASSES.section}>\n            <div className={CLASSES.gridSection}>\n                {inserterSelect}\n                <label className={CLASSES.labelElement} htmlFor={\"inserterType\"}>\n                    Inserter Type\n                </label>\n                <input\n                    className={CLASSES.checkboxElement}\n                    id={\"filterInserterEnabled\"}\n                    type={\"checkbox\"}\n                    data-tip={TOOLTIPS.enableFilterInserters}\n                    checked={props.userSettings.enableFilterInserters}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            enableFilterInserters: e.target.checked,\n                        })\n                    }}\n                />\n                <label className={CLASSES.labelElement} htmlFor={\"filterInserterEnabled\"}>\n                    Enabled Filter Inserters\n                </label>\n                {filterInserterInputFields}\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport { iChestTypes, iSectionsProps } from \"../../constants/interfaces\"\nimport { CLASSES } from \"../../css/classes\"\nimport { chestTypes, chestTypesHuman, requestChestTypes } from \"../../constants/constants\"\nimport TOOLTIPS from \"../../constants/tooltips\"\n\nexport default function ChestTypeSettings(props: iSectionsProps): JSX.Element {\n    const chestTypesHtml = (\n        <select\n            id={\"chestTypes\"}\n            className={CLASSES.selectElement}\n            value={props.userSettings.chestType}\n            data-tip={TOOLTIPS.chestType}\n            onChange={(e) => {\n                props.setUserSettings({\n                    ...props.userSettings,\n                    chestType: e.target.value as iChestTypes,\n                })\n            }}\n        >\n            {chestTypes.map((chestType) => {\n                return (\n                    <option className={CLASSES.optionElement} key={chestType} value={chestType}>\n                        {chestTypesHuman[chestType]}\n                    </option>\n                )\n            })}\n        </select>\n    )\n\n    const isRequesterChest = requestChestTypes.includes(props.userSettings.chestType)\n    const canRequestFromBufferChests = props.userSettings.chestType === \"logistic-chest-requester\"\n\n    let previousIsEmpty = -1\n    const chestRequests = new Array(24).fill(0).map((_, i) => {\n        const index = Math.floor(i / 2)\n        if (previousIsEmpty !== -1 && previousIsEmpty < index) {\n            return undefined\n        }\n        if (props.userSettings.chestRequestItemsType[index] === \"\") {\n            previousIsEmpty = index\n        }\n        if (i % 2 === 0) {\n            return (\n                <input\n                    className={CLASSES.inputTextElement}\n                    hidden={!isRequesterChest}\n                    list={\"itemlist\"}\n                    key={`${index} chestRequestItemsType`}\n                    type={\"text\"}\n                    value={props.userSettings.chestRequestItemsType[index]}\n                    placeholder={`Request ${index + 1} item type`}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            chestRequestItemsType: [\n                                ...props.userSettings.chestRequestItemsType.slice(0, index),\n                                e.target.value,\n                                ...props.userSettings.chestRequestItemsType.slice(index + 1),\n                            ],\n                        })\n                    }}\n                />\n            )\n        } else {\n            return (\n                <input\n                    className={CLASSES.inputTextElement}\n                    hidden={!isRequesterChest}\n                    key={`${index} chestRequestItemsAmount`}\n                    type={\"number\"}\n                    min={\"0\"}\n                    value={props.userSettings.chestRequestItemsAmount[index]}\n                    placeholder={`Request ${index + 1} amount`}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            chestRequestItemsAmount: [\n                                ...props.userSettings.chestRequestItemsAmount.slice(0, index),\n                                e.target.value,\n                                ...props.userSettings.chestRequestItemsAmount.slice(index + 1),\n                            ],\n                        })\n                    }}\n                />\n            )\n        }\n    })\n\n    return (\n        <div className={CLASSES.section}>\n            <div className={CLASSES.gridSection}>\n                {chestTypesHtml}\n                <label className={CLASSES.labelElement} htmlFor={\"chestTypes\"}>\n                    Chest Type\n                </label>\n                <input\n                    className={CLASSES.inputTextElement}\n                    type={\"number\"}\n                    min={\"0\"}\n                    value={props.userSettings.chestLimit}\n                    data-tip={TOOLTIPS.chestLimit}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            chestLimit: e.target.value,\n                        })\n                    }}\n                />\n                <label className={CLASSES.labelElement} htmlFor={\"chestTypes\"}>\n                    Chest limit\n                </label>\n                <input\n                    className={CLASSES.checkboxElement}\n                    hidden={!canRequestFromBufferChests}\n                    id={\"requestFromBuffers\"}\n                    type={\"checkbox\"}\n                    checked={props.userSettings.chestRequestFromBuffers}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            chestRequestFromBuffers: e.target.checked,\n                        })\n                    }}\n                />\n                <label\n                    className={CLASSES.labelElement}\n                    hidden={!canRequestFromBufferChests}\n                    htmlFor={\"requestFromBuffers\"}\n                >\n                    Request from Buffers\n                </label>\n                {chestRequests}\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport { iBeltSides, iBeltTypes, iSectionsProps } from \"../../constants/interfaces\"\nimport { CLASSES } from \"../../css/classes\"\nimport {\n    beltFlowDirections,\n    beltSides,\n    beltTypes,\n    beltTypesHuman,\n    botChestTypes,\n} from \"../../constants/constants\"\nimport TOOLTIPS from \"../../constants/tooltips\"\n\nexport default function BeltTypeSettings(props: iSectionsProps): JSX.Element {\n    const hideIfBotChests = botChestTypes.includes(props.userSettings.chestType)\n\n    const beltTypesHtml = (\n        <select\n            id={\"beltType\"}\n            className={CLASSES.selectElement}\n            value={props.userSettings.beltType}\n            onChange={(e) => {\n                props.setUserSettings({\n                    ...props.userSettings,\n                    beltType: e.target.value as iBeltTypes,\n                })\n            }}\n        >\n            {beltTypes.map((beltType) => {\n                return (\n                    <option className={CLASSES.optionElement} key={beltType} value={beltType}>\n                        {beltTypesHuman[beltType]}\n                    </option>\n                )\n            })}\n        </select>\n    )\n\n    const beltSideHtml = (\n        <select\n            id={\"sidesUsed\"}\n            className={CLASSES.selectElement}\n            value={props.userSettings.beltSidesUsed}\n            onChange={(e) => {\n                props.setUserSettings({\n                    ...props.userSettings,\n                    beltSidesUsed: e.target.value as iBeltSides,\n                })\n            }}\n        >\n            {beltSides.map((beltSide) => {\n                return (\n                    <option className={CLASSES.optionElement} key={beltSide} value={beltSide}>\n                        {beltSide}\n                    </option>\n                )\n            })}\n        </select>\n    )\n    const beltFlowHtml = (\n        <select\n            id={\"beltFlow\"}\n            className={CLASSES.selectElement}\n            value={props.userSettings.beltFlowDirection}\n            data-tip={TOOLTIPS.beltFlow}\n            onChange={(e) => {\n                props.setUserSettings({ ...props.userSettings, beltFlowDirection: e.target.value })\n            }}\n        >\n            {beltFlowDirections.map((beltFlow) => {\n                return (\n                    <option className={CLASSES.optionElement} key={beltFlow} value={beltFlow}>\n                        {beltFlow}\n                    </option>\n                )\n            })}\n        </select>\n    )\n\n    return (\n        <div className={CLASSES.section} hidden={hideIfBotChests}>\n            <div className={CLASSES.gridSection}>\n                {beltTypesHtml}\n                <label className={CLASSES.labelElement} htmlFor={\"beltType\"}>\n                    Belt Type\n                </label>\n                {beltSideHtml}\n                <label className={CLASSES.labelElement} htmlFor={\"sidesUsed\"}>\n                    Sides to be used\n                </label>\n                {beltFlowHtml}\n                <label className={CLASSES.labelElement} htmlFor={\"beltFlow\"}>\n                    Belt Flow\n                </label>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport { iRefillFuelTypes, iSectionsProps } from \"../../constants/interfaces\"\nimport { CLASSES } from \"../../css/classes\"\nimport { refillFuelTypes, refillFuelTypesHuman } from \"../../constants/constants\"\nimport TOOLTIPS from \"../../constants/tooltips\"\n\nexport default function RefillSettings(props: iSectionsProps): JSX.Element {\n    const fuelTypesHtml = (\n        <select\n            className={CLASSES.selectElement}\n            hidden={!props.userSettings.refillEnabled}\n            value={props.userSettings.refillFuelType}\n            onChange={(e) => {\n                props.setUserSettings({\n                    ...props.userSettings,\n                    refillFuelType: e.target.value as iRefillFuelTypes,\n                })\n            }}\n        >\n            {refillFuelTypes.map((fuelType) => {\n                return (\n                    <option className={CLASSES.optionElement} key={fuelType} value={fuelType}>\n                        {refillFuelTypesHuman[fuelType]}\n                    </option>\n                )\n            })}\n        </select>\n    )\n\n    return (\n        <div className={CLASSES.section}>\n            <div className={CLASSES.gridSection}>\n                <input\n                    className={CLASSES.checkboxElement}\n                    type={\"checkbox\"}\n                    id={\"refillEnabled\"}\n                    checked={props.userSettings.refillEnabled}\n                    data-tip={TOOLTIPS.refillEnabled}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            refillEnabled: e.target.checked,\n                        })\n                    }}\n                />\n                <label className={CLASSES.labelElement} htmlFor={\"refillEnabled\"}>\n                    Refill at this Station?\n                </label>\n                {fuelTypesHtml}\n                <label\n                    className={CLASSES.labelElement}\n                    hidden={!props.userSettings.refillEnabled}\n                    htmlFor={\"fuelTypes\"}\n                >\n                    Fuel Type\n                </label>\n                <input\n                    type={\"number\"}\n                    className={CLASSES.inputTextElement}\n                    hidden={!props.userSettings.refillEnabled}\n                    value={props.userSettings.refillFuelAmount}\n                    min={\"0\"}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            refillFuelAmount: e.target.value,\n                        })\n                    }}\n                />\n                <label\n                    className={CLASSES.labelElement}\n                    hidden={!props.userSettings.refillEnabled}\n                    htmlFor={\"fuelAmount\"}\n                >\n                    Amount\n                </label>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport { iSectionsProps } from \"../../constants/interfaces\"\nimport { CLASSES } from \"../../css/classes\"\nimport TOOLTIPS from \"../../constants/tooltips\"\n\nexport default function WireSettings(props: iSectionsProps): JSX.Element {\n    const normalTypes = [\"Loading Station\", \"Unloading Station\"]\n    const fluidTypes = [\"Fluid Loading Station\", \"Fluid Unloading Station\"]\n    const hiddenWhenNormalStation = normalTypes.includes(props.userSettings.stationType)\n    const hiddenWhenFluidStation = fluidTypes.includes(props.userSettings.stationType)\n    const hiddenWhenNotBothSides = props.userSettings.beltSidesUsed !== \"Both\"\n\n    const myCheckbox = (\n        keyName:\n            | \"connectChestsWithGreenWire\"\n            | \"connectBothSideWithGreenWire\"\n            | \"connectChestsWithRedWire\"\n            | \"connectBothSideWithRedWire\"\n            | \"madzuriEvenLoadUnload\",\n        hidden = false\n    ) => {\n        return (\n            <input\n                className={CLASSES.checkboxElement}\n                hidden={hidden}\n                key={keyName}\n                type={\"checkbox\"}\n                id={keyName}\n                checked={props.userSettings[keyName]}\n                data-tip={TOOLTIPS[keyName]}\n                onChange={(e) => {\n                    props.setUserSettings({\n                        ...props.userSettings,\n                        [keyName]: e.target.checked,\n                    })\n                }}\n            />\n        )\n    }\n\n    return (\n        <div className={CLASSES.section}>\n            <div className={CLASSES.gridSection}>\n                {myCheckbox(\"madzuriEvenLoadUnload\", hiddenWhenFluidStation)}\n                <label\n                    className={CLASSES.labelElement}\n                    hidden={hiddenWhenFluidStation}\n                    htmlFor={\"madzuriEvenLoadUnload\"}\n                >\n                    Evenly loading / unloading?\n                </label>\n                {myCheckbox(\"connectChestsWithGreenWire\")}\n                <label\n                    className={CLASSES.labelElement}\n                    hidden={hiddenWhenFluidStation}\n                    htmlFor={\"connectChestsWithGreenWire\"}\n                >\n                    Connect chests with green wire?\n                </label>\n                <label\n                    className={CLASSES.labelElement}\n                    hidden={hiddenWhenNormalStation}\n                    htmlFor={\"connectChestsWithGreenWire\"}\n                >\n                    Connect storage tanks with green wire?\n                </label>\n                {myCheckbox(\n                    \"connectBothSideWithGreenWire\",\n                    hiddenWhenFluidStation || hiddenWhenNotBothSides\n                )}\n                <label\n                    className={CLASSES.labelElement}\n                    hidden={hiddenWhenFluidStation || hiddenWhenNotBothSides}\n                    htmlFor={\"connectBothSideWithGreenWire\"}\n                >\n                    Connect both sides with green wire?\n                </label>\n                {myCheckbox(\"connectChestsWithRedWire\")}\n                <label\n                    className={CLASSES.labelElement}\n                    hidden={hiddenWhenFluidStation}\n                    htmlFor={\"connectChestsWithRedWire\"}\n                >\n                    Connect chests with red wire?\n                </label>\n                <label\n                    className={CLASSES.labelElement}\n                    hidden={hiddenWhenNormalStation}\n                    htmlFor={\"connectChestsWithGreenWire\"}\n                >\n                    Connect storage tanks with red wire?\n                </label>\n                {myCheckbox(\n                    \"connectBothSideWithRedWire\",\n                    hiddenWhenFluidStation || hiddenWhenNotBothSides\n                )}\n                <label\n                    className={CLASSES.labelElement}\n                    hidden={hiddenWhenFluidStation || hiddenWhenNotBothSides}\n                    htmlFor={\"connectBothSideWithRedWire\"}\n                >\n                    Connect both sides with red wire?\n                </label>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport { iEnabledConditionOperators, iSectionsProps } from \"../../constants/interfaces\"\nimport { CLASSES } from \"../../css/classes\"\nimport {\n    enabledConditionOperators,\n    enabledConditionOperatorsHuman,\n} from \"../../constants/constants\"\nimport TOOLTIPS from \"../../constants/tooltips\"\n\nexport default function EnabledConditionSettings(props: iSectionsProps): JSX.Element {\n    const hideIfCheckboxDisabled = !props.userSettings.trainStopUsesEnabledCondition\n\n    const enabledConditionOperatorHtml = (\n        <select\n            className={CLASSES.selectElement}\n            hidden={hideIfCheckboxDisabled}\n            value={props.userSettings.enabledConditionOperator}\n            onChange={(e) => {\n                props.setUserSettings({\n                    ...props.userSettings,\n                    enabledConditionOperator: e.target.value as iEnabledConditionOperators,\n                })\n            }}\n        >\n            {enabledConditionOperators.map((operator) => {\n                return (\n                    <option className={CLASSES.optionElement} key={operator} value={operator}>\n                        {enabledConditionOperatorsHuman[operator]}\n                    </option>\n                )\n            })}\n        </select>\n    )\n\n    return (\n        <div className={CLASSES.section}>\n            <div className={CLASSES.gridSection}>\n                <input\n                    className={CLASSES.checkboxElement}\n                    type={\"checkbox\"}\n                    id={\"trainStopUsesEnabledCondition\"}\n                    checked={props.userSettings.trainStopUsesEnabledCondition}\n                    data-tip={TOOLTIPS.trainStopUsesEnabledCondition}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            trainStopUsesEnabledCondition: e.target.checked,\n                        })\n                    }}\n                />\n                <label className={CLASSES.labelElement} htmlFor={\"trainStopUsesEnabledCondition\"}>\n                    {\"Train stop uses 'enabled-condition'?\"}\n                </label>\n                {enabledConditionOperatorHtml}\n                <input\n                    type={\"number\"}\n                    className={CLASSES.selectElement}\n                    hidden={hideIfCheckboxDisabled}\n                    placeholder={\"Amount of items\"}\n                    value={props.userSettings.enabledConditionAmount}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            enabledConditionAmount: e.target.value,\n                        })\n                    }}\n                />\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport { iSectionsProps } from \"../../constants/interfaces\"\nimport { CLASSES } from \"../../css/classes\"\n\nexport default function LampsSettings(props: iSectionsProps): JSX.Element {\n    return (\n        <div className={CLASSES.section}>\n            <div className={CLASSES.gridSection}>\n                <input\n                    className={CLASSES.checkboxElement}\n                    type={\"checkbox\"}\n                    id={\"placeLampsNearPoles\"}\n                    checked={props.userSettings.placeLampsNearPoles}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            placeLampsNearPoles: e.target.checked,\n                        })\n                    }}\n                />\n                <label className={CLASSES.labelElement} htmlFor={\"placeLampsNearPoles\"}>\n                    Place lamps near poles?\n                </label>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport { iSectionsProps } from \"../../constants/interfaces\"\nimport { CLASSES } from \"../../css/classes\"\n\nexport default function StationNameSettings(props: iSectionsProps): JSX.Element {\n    return (\n        <div>\n            <div className={CLASSES.section}>\n                <input\n                    className={CLASSES.inputTextElement}\n                    type={\"text\"}\n                    placeholder={\"Station Name\"}\n                    value={props.userSettings.stationName}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            stationName: e.target.value,\n                        })\n                    }}\n                />\n            </div>\n        </div>\n    )\n}\n","import React, { useEffect } from \"react\"\nimport { iSectionsProps } from \"../../constants/interfaces\"\nimport { CLASSES } from \"../../css/classes\"\nimport TOOLTIPS from \"../../constants/tooltips\"\nimport { fluidStation, iOperator, operatorTypes, trainLimit } from \"../../constants/constants\"\nimport { calcCombinatorSettings } from \"../../constants/helper\"\n\nexport default function StationSettings(props: iSectionsProps): JSX.Element {\n    const hideWhenTrainLimitIsNotDynamic = props.userSettings.trainLimit !== \"Dynamic\"\n    const hideWhenFluidStation = fluidStation.includes(props.userSettings.stationType)\n    const hideWhenNotUnloadingStation =\n        props.userSettings.stationType !== \"Unloading Station\" &&\n        props.userSettings.stationType !== \"Fluid Unloading Station\"\n\n    useEffect(() => {\n        applyArray(calcCombinatorSettings(props.userSettings))\n    }, [\n        props.userSettings.stationType,\n        props.userSettings.trainLimitToAtMostOneTrain,\n        props.userSettings.trainLimitStackSize,\n        props.userSettings.cargoWagon,\n        props.userSettings.chestLimit,\n        props.userSettings.chestType,\n        props.userSettings.beltSidesUsed,\n        props.userSettings.connectChestsWithGreenWire,\n        props.userSettings.connectBothSideWithGreenWire,\n    ])\n\n    const myInput = (\n        key:\n            | \"trainLimitArithmetic1Constant1\"\n            | \"trainLimitArithmetic1Constant2\"\n            | \"trainLimitArithmetic2Constant1\"\n            | \"trainLimitArithmetic2Constant2\"\n    ) => {\n        return (\n            <input\n                type={\"text\"}\n                className={`${CLASSES.inputTextElement} col-span-2`}\n                data-tip={TOOLTIPS.trainLimitNumberInput}\n                hidden={hideWhenTrainLimitIsNotDynamic}\n                value={props.userSettings[key]}\n                onChange={(e) => {\n                    props.setUserSettings({\n                        ...props.userSettings,\n                        [key]: e.target.value,\n                    })\n                }}\n            />\n        )\n    }\n\n    const mySelectOperator = (\n        key: \"trainLimitArithmetic1Operator\" | \"trainLimitArithmetic2Operator\"\n    ) => {\n        return (\n            <select\n                className={`${CLASSES.selectElement} col-span-1`}\n                hidden={hideWhenTrainLimitIsNotDynamic}\n                value={props.userSettings[key]}\n                onChange={(e) => {\n                    props.setUserSettings({\n                        ...props.userSettings,\n                        [key]: e.target.value,\n                    })\n                }}\n            >\n                {operatorTypes.map((operator) => {\n                    return (\n                        <option key={operator} value={operator}>\n                            {operator}\n                        </option>\n                    )\n                })}\n            </select>\n        )\n    }\n\n    const trainLimitHtml = (\n        <select\n            className={`${CLASSES.selectElement} col-span-5`}\n            data-tip={TOOLTIPS.trainLimit}\n            value={props.userSettings.trainLimit}\n            onChange={(e) => {\n                props.setUserSettings({\n                    ...props.userSettings,\n                    trainLimit: e.target.value,\n                })\n            }}\n        >\n            {trainLimit.map((optionStr) => {\n                return (\n                    <option key={optionStr} value={optionStr}>\n                        {optionStr}\n                    </option>\n                )\n            })}\n        </select>\n    )\n\n    const applyArray = (\n        combinatorArray: [string, iOperator, string, string, iOperator, string]\n    ) => {\n        props.setUserSettings({\n            ...props.userSettings,\n            trainLimitArithmetic1Constant1: combinatorArray[0],\n            trainLimitArithmetic1Operator: combinatorArray[1],\n            trainLimitArithmetic1Constant2: combinatorArray[2],\n            trainLimitArithmetic2Constant1: combinatorArray[3],\n            trainLimitArithmetic2Operator: combinatorArray[4],\n            trainLimitArithmetic2Constant2: combinatorArray[5],\n        })\n    }\n\n    return (\n        <div>\n            <div className={CLASSES.section}>\n                <div className={CLASSES.gridSection12cols}>\n                    {trainLimitHtml}\n                    <label className={`${CLASSES.labelElement} col-span-7`}>Train Limit</label>\n                    <input\n                        className={`${CLASSES.checkboxElement} col-span-5`}\n                        hidden={hideWhenNotUnloadingStation || hideWhenTrainLimitIsNotDynamic}\n                        type={\"checkbox\"}\n                        id={\"trainLimitToAtMostOneTrain\"}\n                        checked={props.userSettings.trainLimitToAtMostOneTrain}\n                        onChange={(e) => {\n                            props.setUserSettings({\n                                ...props.userSettings,\n                                trainLimitToAtMostOneTrain: e.target.checked,\n                            })\n                        }}\n                    />\n                    <label\n                        className={`${CLASSES.labelElement} col-span-7`}\n                        hidden={hideWhenNotUnloadingStation || hideWhenTrainLimitIsNotDynamic}\n                        htmlFor={\"trainLimitToAtMostOneTrain\"}\n                    >\n                        Limit station to at most 1 train\n                    </label>\n                    {myInput(\"trainLimitArithmetic1Constant1\")}\n                    {mySelectOperator(\"trainLimitArithmetic1Operator\")}\n                    {myInput(\"trainLimitArithmetic1Constant2\")}\n                    <label\n                        className={`${CLASSES.labelElement} col-span-7`}\n                        hidden={hideWhenTrainLimitIsNotDynamic}\n                    >\n                        First arithmetic combinator settings\n                    </label>\n\n                    {myInput(\"trainLimitArithmetic2Constant1\")}\n                    {mySelectOperator(\"trainLimitArithmetic2Operator\")}\n                    {myInput(\"trainLimitArithmetic2Constant2\")}\n                    <label\n                        className={`${CLASSES.labelElement} col-span-7`}\n                        hidden={hideWhenTrainLimitIsNotDynamic}\n                    >\n                        Second arithmetic combinator settings\n                    </label>\n                    {/*<div className={\"\"}></div>*/}\n                    <input\n                        id={\"trainLimitStackSize50\"}\n                        className={`${CLASSES.radioButtonElement} col-span-5`}\n                        hidden={hideWhenTrainLimitIsNotDynamic || hideWhenFluidStation}\n                        type={\"radio\"}\n                        value={50}\n                        checked={props.userSettings.trainLimitStackSize === 50}\n                        onChange={() => {\n                            props.setUserSettings({\n                                ...props.userSettings,\n                                trainLimitStackSize: 50,\n                            })\n                        }}\n                    />\n                    <label\n                        className={`${CLASSES.labelElement} col-span-7`}\n                        hidden={hideWhenTrainLimitIsNotDynamic || hideWhenFluidStation}\n                    >\n                        Item stack size 50\n                    </label>\n                    <input\n                        id={\"trainLimitStackSize100\"}\n                        className={`${CLASSES.radioButtonElement} col-span-5`}\n                        hidden={hideWhenTrainLimitIsNotDynamic || hideWhenFluidStation}\n                        type={\"radio\"}\n                        value={100}\n                        checked={props.userSettings.trainLimitStackSize === 100}\n                        onChange={() => {\n                            props.setUserSettings({\n                                ...props.userSettings,\n                                trainLimitStackSize: 100,\n                            })\n                        }}\n                    />\n                    <label\n                        className={`${CLASSES.labelElement} col-span-7`}\n                        hidden={hideWhenTrainLimitIsNotDynamic || hideWhenFluidStation}\n                    >\n                        Item stack size 100\n                    </label>\n                    <input\n                        id={\"trainLimitStackSize200\"}\n                        className={`${CLASSES.radioButtonElement} col-span-5`}\n                        hidden={hideWhenTrainLimitIsNotDynamic || hideWhenFluidStation}\n                        type={\"radio\"}\n                        value={200}\n                        checked={props.userSettings.trainLimitStackSize === 200}\n                        onChange={() => {\n                            props.setUserSettings({\n                                ...props.userSettings,\n                                trainLimitStackSize: 200,\n                            })\n                        }}\n                    />\n                    <label\n                        className={`${CLASSES.labelElement} col-span-7`}\n                        hidden={hideWhenTrainLimitIsNotDynamic || hideWhenFluidStation}\n                    >\n                        Item stack size 200\n                    </label>\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport TrainTypeSettings from \"../Sections/TrainTypeSettings\"\nimport { iSectionsProps } from \"../../constants/interfaces\"\nimport InserterSettings from \"../Sections/InserterSettings\"\nimport ChestTypeSettings from \"../Sections/ChestTypeSettings\"\nimport BeltTypeSettings from \"../Sections/BeltTypeSettings\"\nimport RefillSettings from \"../Sections/RefillSettings\"\nimport WireSettings from \"../Sections/WireSettings\"\nimport EnabledConditionSettings from \"../Sections/EnabledConditionSettings\"\nimport LampsSettings from \"../Sections/LampsSettings\"\nimport StationNameSettings from \"../Sections/StationNameSettings\"\nimport StationSettings from \"../Sections/StationSettings\"\n\nexport default function NormalStation(props: iSectionsProps): JSX.Element {\n    return (\n        <div className={\"flex flex-col\"}>\n            <div className={\"grid gap-x-4 grid-cols-1 lg:grid-cols-2\"}>\n                <div>\n                    <StationNameSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                    <StationSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                    <TrainTypeSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                    <BeltTypeSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                </div>\n                <div>\n                    <InserterSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                    <ChestTypeSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n\n                    <RefillSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                    <WireSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                    <EnabledConditionSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                    <LampsSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport { iPumpSides, iSectionsProps } from \"../../constants/interfaces\"\nimport { CLASSES } from \"../../css/classes\"\nimport { pumpSides } from \"../../constants/constants\"\n\nexport default function FluidSettings(props: iSectionsProps): JSX.Element {\n    const pumpSideHtml = (\n        <select\n            id={\"sidesUsed\"}\n            className={CLASSES.selectElement}\n            value={props.userSettings.pumpSidesToBeUsed}\n            onChange={(e) => {\n                props.setUserSettings({\n                    ...props.userSettings,\n                    pumpSidesToBeUsed: e.target.value as iPumpSides,\n                })\n            }}\n        >\n            {pumpSides.map((pumpSide) => {\n                return (\n                    <option className={CLASSES.optionElement} key={pumpSide} value={pumpSide}>\n                        {pumpSide}\n                    </option>\n                )\n            })}\n        </select>\n    )\n\n    return (\n        <div className={CLASSES.section}>\n            <div className={CLASSES.gridSection}>\n                {pumpSideHtml}\n                <label className={CLASSES.labelElement} htmlFor={\"sidesUsed\"}>\n                    Sides to be used\n                </label>\n                <input\n                    className={CLASSES.inputTextElement}\n                    type={\"number\"}\n                    min={\"1\"}\n                    id={\"storageTanksColumn\"}\n                    value={props.userSettings.pumpStorageTankColumns}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            pumpStorageTankColumns: e.target.value,\n                        })\n                    }}\n                />\n                <label className={CLASSES.labelElement} htmlFor={\"storageTanksColumn\"}>\n                    Amount of storage tank columns\n                </label>\n                <input\n                    className={CLASSES.checkboxElement}\n                    type={\"checkbox\"}\n                    id={\"connectTanks\"}\n                    checked={props.userSettings.pumpConnectWithPipe}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            pumpConnectWithPipe: e.target.checked,\n                        })\n                    }}\n                />\n                <label className={CLASSES.labelElement} htmlFor={\"connectTanks\"}>\n                    Connect tanks with pipe?\n                </label>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport TrainTypeSettings from \"../Sections/TrainTypeSettings\"\nimport { iSectionsProps } from \"../../constants/interfaces\"\nimport RefillSettings from \"../Sections/RefillSettings\"\nimport WireSettings from \"../Sections/WireSettings\"\nimport EnabledConditionSettings from \"../Sections/EnabledConditionSettings\"\nimport LampsSettings from \"../Sections/LampsSettings\"\nimport StationNameSettings from \"../Sections/StationNameSettings\"\nimport FluidSettings from \"../Sections/FluidSettings\"\nimport StationSettings from \"../Sections/StationSettings\"\n\nexport default function FluidStation(props: iSectionsProps): JSX.Element {\n    return (\n        <div className={\"flex flex-col\"}>\n            <div className={\"grid gap-x-4 grid-cols-1 lg:grid-cols-2\"}>\n                <div>\n                    <StationNameSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                    <StationSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                    <TrainTypeSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                    <FluidSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                </div>\n                <div>\n                    <RefillSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                    <WireSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                    <EnabledConditionSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                    <LampsSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport { CLASSES } from \"../css/classes\"\n\nexport default function Title(): JSX.Element {\n    return (\n        <a\n            className={CLASSES.title}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            href=\"https://burnysc2.github.io/Factorio-Train-Station-Blueprint-Creator/\"\n        >\n            {\"Burny's Train Station Blueprint Creator\"}\n        </a>\n    )\n}\n","import React from \"react\"\nimport { CLASSES } from \"../css/classes\"\n\nexport default function Footer(): JSX.Element {\n    return (\n        <div className={`flex flex-col my-2`}>\n            <a\n                className={CLASSES.footerElements}\n                target=\"_blank\"\n                rel=\"noreferrer\"\n                href=\"https://github.com/BurnySc2/Factorio-Train-Station-Blueprint-Creator\"\n            >\n                Contribute\n            </a>\n            <a\n                className={CLASSES.footerElements}\n                target=\"_blank\"\n                rel=\"noreferrer\"\n                href=\"https://github.com/BurnySc2/Factorio-Train-Station-Blueprint-Creator/issues/new\"\n            >\n                Suggestions / Report Bugs\n            </a>\n            <a\n                className={CLASSES.footerElements}\n                target=\"_blank\"\n                rel=\"noreferrer\"\n                href=\"https://www.reddit.com/message/compose/?to=BurnySc2\"\n            >\n                Contact (Reddit)\n            </a>\n        </div>\n    )\n}\n","import React from \"react\"\nimport { iSectionsProps } from \"../../constants/interfaces\"\nimport { CLASSES } from \"../../css/classes\"\nimport { stackerDiagonalTypes, stackerTypes } from \"../../constants/constants\"\nimport TOOLTIPS from \"../../constants/tooltips\"\n\nexport default function StackerSettings(props: iSectionsProps): JSX.Element {\n    const myCheckbox = (keyName: \"diagonalStacker\") => {\n        return (\n            <input\n                className={CLASSES.checkboxElement}\n                key={keyName}\n                type={\"checkbox\"}\n                id={keyName}\n                checked={props.userSettings[keyName]}\n                data-tip={TOOLTIPS[keyName]}\n                onChange={(e) => {\n                    props.setUserSettings({\n                        ...props.userSettings,\n                        [keyName]: e.target.checked,\n                    })\n                }}\n            />\n        )\n    }\n\n    const stackerTypesHtml = (\n        <select\n            className={CLASSES.selectElement}\n            value={props.userSettings.stackerType}\n            onChange={(e) => {\n                props.setUserSettings({\n                    ...props.userSettings,\n                    stackerType: e.target.value,\n                })\n            }}\n        >\n            {stackerTypes.map((type) => {\n                if (props.userSettings.diagonalStacker) return undefined\n                return (\n                    <option key={type} value={type}>\n                        {type}\n                    </option>\n                )\n            })}\n            {stackerDiagonalTypes.map((type) => {\n                if (!props.userSettings.diagonalStacker) return undefined\n                return (\n                    <option key={type} value={type}>\n                        {type}\n                    </option>\n                )\n            })}\n        </select>\n    )\n\n    return (\n        <div className={CLASSES.section}>\n            <div className={CLASSES.gridSection}>\n                <input\n                    className={CLASSES.inputTextElement}\n                    id={\"stackerNumberParallelLanes\"}\n                    value={props.userSettings.stackerNumberParallelLanes}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            stackerNumberParallelLanes: e.target.value,\n                        })\n                    }}\n                />\n                <label className={CLASSES.labelElement} htmlFor={\"stackerNumberParallelLanes\"}>\n                    # of parallel lanes\n                </label>\n                {myCheckbox(\"diagonalStacker\")}\n                <label className={CLASSES.labelElement} htmlFor={\"diagonalStacker\"}>\n                    Diagonal Stacker?\n                </label>\n                {stackerTypesHtml}\n                <label className={CLASSES.labelElement} htmlFor={\"leftRightStacker\"}>\n                    Stacker Type\n                </label>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport TrainTypeSettings from \"../Sections/TrainTypeSettings\"\nimport { iSectionsProps } from \"../../constants/interfaces\"\nimport StackerSettings from \"../Sections/StackerSettings\"\n\nexport default function Stacker(props: iSectionsProps): JSX.Element {\n    return (\n        <div className={\"flex flex-col\"}>\n            <TrainTypeSettings\n                userSettings={props.userSettings}\n                setUserSettings={props.setUserSettings}\n            />\n            <StackerSettings\n                userSettings={props.userSettings}\n                setUserSettings={props.setUserSettings}\n            />\n        </div>\n    )\n}\n","import React from \"react\"\nimport { CLASSES } from \"../css/classes\"\nimport { defaultSettings } from \"../constants/constants\"\n\ninterface MyProps {\n    warningMessage: string\n    userSettings: typeof defaultSettings\n}\nexport default function WarningMessage(props: MyProps): JSX.Element | null {\n    if (props.warningMessage === \"\") {\n        return null\n    }\n    return <div className={CLASSES.warningMessageElement}>Hint: {props.warningMessage}</div>\n}\n","import React from \"react\"\nimport { CLASSES } from \"../css/classes\"\n\ninterface MyProps {\n    errorMessage: string\n}\n\nexport default function ErrorMessage(props: MyProps): JSX.Element | null {\n    if (props.errorMessage === \"\") {\n        return null\n    }\n    return <div className={CLASSES.errorMessageElement}>{props.errorMessage}</div>\n}\n","import React, { useEffect, useState } from \"react\"\nimport NormalStation from \"./StationTypes/NormalStation\"\nimport FluidStation from \"./StationTypes/FluidStation\"\nimport Title from \"./Title\"\nimport {\n    defaultSettings,\n    normalStation,\n    stationTypes,\n    fluidStation,\n    websiteUrl,\n} from \"../constants/constants\"\nimport { CLASSES } from \"../css/classes\"\nimport Footer from \"./Footer\"\nimport Stacker from \"./StationTypes/Stacker\"\nimport copy from \"copy-to-clipboard\"\nimport { createBlueprint, createBlueprintString } from \"../BlueprintCreation/CreateBlueprint\"\nimport WarningMessage from \"./WarningMessage\"\nimport ErrorMessage from \"./ErrorMessage\"\nimport {\n    checkForHintsBlueprintSettings,\n    decodeSettings,\n    encodeSettings,\n    validateBlueprintSettings,\n} from \"../constants/helper\"\nimport ReactTooltip from \"react-tooltip\"\nimport itemlist from \"../constants/itemlist.json\"\nimport { useLocation, useHistory } from \"react-router-dom\"\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst cloneDeep = require(\"clone-deep\")\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst isEqual = require(\"lodash.isequal\")\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst pick = require(\"lodash.pick\")\n\nexport default function Website(): JSX.Element {\n    const [userSettings, setUserSettings] = useState(cloneDeep(defaultSettings))\n    const [blueprintString, setBlueprintString] = useState(\"\")\n    const [warningMessage, setWarningMessage] = useState(\"\")\n    const [errorMessage, setErrorMessage] = useState(\"\")\n\n    const history = useHistory()\n    const params = new URLSearchParams(useLocation().search)\n\n    // Only run once on site load: parse params and set settings from url params, if given\n    useEffect(() => {\n        // Use params.get(\"key\") to get the value\n        const settingsFromUrl = params.get(\"settings\")\n        // Read url params and set settings\n        if (settingsFromUrl) {\n            let decodedSettings\n            try {\n                decodedSettings = decodeSettings(settingsFromUrl)\n            } catch {\n                console.log(\"Could not decode settings from url\")\n                return\n            }\n            const currentSettings = cloneDeep(userSettings)\n\n            // Current settings differ from the ones in the url\n            if (!isEqual(decodedSettings, currentSettings)) {\n                setUserSettings({\n                    ...defaultSettings,\n                    ...decodedSettings,\n                })\n            }\n        }\n    }, [])\n\n    useEffect(() => {\n        const newWarningMessage = checkForHintsBlueprintSettings(userSettings)\n        setWarningMessage(newWarningMessage)\n        const newErrorMessage = validateBlueprintSettings(userSettings)\n        setErrorMessage(newErrorMessage)\n    }, [userSettings])\n\n    const getUrlParams = (bpSettings: typeof defaultSettings) => {\n        const keysToKeep = Object.keys(defaultSettings)\n        const bpSettingsPick = pick(bpSettings, keysToKeep)\n        const urlString = encodeSettings(bpSettingsPick)\n        const params = new URLSearchParams({ settings: urlString })\n        return \"?\" + params.toString()\n    }\n    const assignSettingsToUrlParams = (bpSettings: typeof defaultSettings) => {\n        const newUrl = getUrlParams(bpSettings)\n        // Add history entry\n        history.push(newUrl)\n        // Change current url\n        history.replace(newUrl)\n    }\n\n    const stationTypeSelect = (\n        <select\n            className={CLASSES.selectElement}\n            value={userSettings.stationType}\n            onChange={(e) => {\n                setUserSettings({ ...userSettings, stationType: e.target.value })\n            }}\n        >\n            {stationTypes.map((stationType) => {\n                return (\n                    <option className={CLASSES.optionElement} key={stationType} value={stationType}>\n                        {stationType}\n                    </option>\n                )\n            })}\n        </select>\n    )\n\n    // Select which sub-station settings are available\n    let stationTypeHtml: JSX.Element = <div>ERROR LOADING CORRECT STATION TYPE</div>\n    if (normalStation.includes(userSettings.stationType)) {\n        stationTypeHtml = (\n            <NormalStation userSettings={userSettings} setUserSettings={setUserSettings} />\n        )\n    } else if (fluidStation.includes(userSettings.stationType)) {\n        stationTypeHtml = (\n            <FluidStation userSettings={userSettings} setUserSettings={setUserSettings} />\n        )\n    } else if (userSettings.stationType === \"Stacker\") {\n        stationTypeHtml = <Stacker userSettings={userSettings} setUserSettings={setUserSettings} />\n    }\n\n    // Creates the datalist item names to make it easier for autocomplete\n    // Source: https://github.com/kevinta893/factorio-recipes-json recipes.json\n    const itemdatalist = (\n        <datalist id={\"itemlist\"}>\n            {itemlist.map((itemInfo) => {\n                return <option key={itemInfo.id} value={itemInfo.id} />\n            })}\n        </datalist>\n    )\n\n    return (\n        <div className={CLASSES.background}>\n            <div className={CLASSES.background2}>\n                <Title />\n                <div className={\"grid grid-cols-1 justify-items-center m-auto bg-blue-800\"}>\n                    <div className={CLASSES.section}>{stationTypeSelect}</div>\n                    {stationTypeHtml}\n                    {/*Blueprint generation will not work with the current settings, give the user hints how to fix the configuration*/}\n                    <ErrorMessage errorMessage={errorMessage} />\n                    {/*Figure out if some combinations do not work properly and give the user hints how to fix it*/}\n                    <WarningMessage warningMessage={warningMessage} userSettings={userSettings} />\n                    <button\n                        className={CLASSES.buttonElement}\n                        onClick={() => {\n                            if (errorMessage === \"\") {\n                                setBlueprintString(\n                                    createBlueprintString(createBlueprint(userSettings))\n                                )\n                                assignSettingsToUrlParams(userSettings)\n                            }\n                        }}\n                    >\n                        Generate Blueprint\n                    </button>\n                    <input\n                        className={`${CLASSES.blueprintStringTextElement}`}\n                        hidden={blueprintString === \"\"}\n                        value={`Blueprint length: ${blueprintString.length}`}\n                        readOnly\n                    />\n                    <input\n                        className={`${CLASSES.blueprintStringTextElement}`}\n                        placeholder={\"Blueprint string will be generated here.\"}\n                        value={blueprintString}\n                        readOnly\n                    />\n                    <button\n                        className={CLASSES.buttonElement}\n                        hidden={blueprintString === \"\"}\n                        onClick={() => {\n                            // Copy to clipboard\n                            copy(blueprintString, {\n                                debug: true,\n                                message: \"asd\",\n                            })\n                        }}\n                    >\n                        Copy to Clipboard\n                    </button>\n                    <button\n                        className={CLASSES.buttonElement}\n                        hidden={blueprintString === \"\"}\n                        onClick={() => {\n                            // Copy to website url to clipboard\n                            copy(websiteUrl + getUrlParams(userSettings), {\n                                debug: true,\n                                message: \"asd\",\n                            })\n                        }}\n                    >\n                        Copy shareable link\n                    </button>\n                    <Footer />\n                    <ReactTooltip place={\"bottom\"} multiline />\n                    {itemdatalist}\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport Website from \"./Website\"\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\"\n\nexport default function MyRouter(): JSX.Element {\n    return (\n        // TODO use path (params) to be able to link a setting to a friend\n        <Router>\n            <Switch>\n                <Route path=\"/\">\n                    <Website />\n                </Route>\n            </Switch>\n        </Router>\n    )\n}\n","import React from \"react\"\nimport MyRouter from \"./components/MyRouter\"\n\nfunction App(): JSX.Element {\n    return <MyRouter />\n}\n\nexport default App\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport \"./css/style.css\"\nimport App from \"./App\"\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n","import {\n    allowedCharacters,\n    defaultSettings,\n    fluidStation,\n    iOperator,\n    normalStation,\n} from \"./constants\"\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst zlib = require(\"zlib\")\n\nconst verifyNumberInput = (myInput: string) => {\n    // Return true if it is a parseable number\n    return !isNaN(parseInt(myInput))\n}\n\nexport const checkForHintsBlueprintSettings = (bpSettings: typeof defaultSettings): string => {\n    if (parseInt(bpSettings.locomotivesPerEnd) + parseInt(bpSettings.cargoWagon) > 200) {\n        return \"Your amount of locomotives and cargo wagons is extremely high and might crash your browser!\"\n    }\n    if (bpSettings.stationType === \"Stacker\") {\n        if (parseInt(bpSettings.stackerNumberParallelLanes) > 100) {\n            return \"Your amount of parallel stacker lanes is extremely high and may crash your browser!\"\n        }\n    }\n    if (normalStation.includes(bpSettings.stationType)) {\n        if (bpSettings.madzuriEvenLoadUnload && !bpSettings.connectChestsWithGreenWire) {\n            return `Evenly loading/unloading only works properly when all chests are connected with green wire.`\n        }\n    }\n    if (fluidStation.includes(bpSettings.stationType)) {\n        if (parseInt(bpSettings.pumpStorageTankColumns) > 500) {\n            return \"Your amount of storage tanks is extremely high and might crash your browser!\"\n        }\n    }\n    if (bpSettings.stationType !== \"Stacker\") {\n        if (bpSettings.trainStopUsesEnabledCondition && !bpSettings.connectChestsWithGreenWire) {\n            return \"If 'train stop uses-enabled condition' is enabled, you should also enable 'connect chests/storage tanks with green wire'.\"\n        }\n    }\n    // No hint could be found\n    return \"\"\n}\n\nexport const validateBlueprintSettings = (bpSettings: typeof defaultSettings): string => {\n    if (!verifyNumberInput(bpSettings.locomotivesPerEnd)) {\n        return \"The given locomotive count is not a number.\"\n    }\n    if (!verifyNumberInput(bpSettings.cargoWagon)) {\n        return \"The given cargo count is not a number.\"\n    }\n    if (normalStation.includes(bpSettings.stationType)) {\n        for (let i = 0; i < 12; i++) {\n            const itemType = bpSettings.chestRequestItemsType[i]\n            const numberAsString = bpSettings.chestRequestItemsAmount[i]\n\n            if (itemType !== \"\" && !verifyNumberInput(numberAsString)) {\n                return `Chest request at position ${i + 1} is not a number.`\n            }\n        }\n    }\n    if (parseInt(bpSettings.locomotivesPerEnd) < 0) {\n        return \"The given locomotives amount is invalid.\"\n    }\n    if (parseInt(bpSettings.cargoWagon) < 0) {\n        return \"The given cargo wagon amount is invalid.\"\n    }\n    if (bpSettings.stationType === \"Stacker\") {\n        if (parseInt(bpSettings.stackerNumberParallelLanes) < 0) {\n            return \"Invalid number of parallel stacker lanes.\"\n        }\n    }\n    if (normalStation.includes(bpSettings.stationType) && bpSettings.trainLimit === \"Dynamic\") {\n        if (\n            !verifyNumberInput(bpSettings.trainLimitArithmetic1Constant1) &&\n            !allowedCharacters.includes(bpSettings.trainLimitArithmetic1Constant1) &&\n            bpSettings.trainLimitArithmetic1Constant1 !== \"each\"\n        ) {\n            return \"First input in the first arithmetic combinator is invalid.\"\n        }\n        if (\n            !verifyNumberInput(bpSettings.trainLimitArithmetic1Constant2) &&\n            !allowedCharacters.includes(bpSettings.trainLimitArithmetic1Constant2) &&\n            bpSettings.trainLimitArithmetic1Constant2 !== \"each\"\n        ) {\n            return \"Last input in the first arithmetic combinator is invalid.\"\n        }\n        if (\n            !verifyNumberInput(bpSettings.trainLimitArithmetic2Constant1) &&\n            !allowedCharacters.includes(bpSettings.trainLimitArithmetic2Constant1) &&\n            bpSettings.trainLimitArithmetic2Constant1 !== \"each\"\n        ) {\n            return \"First input in the second arithmetic combinator is invalid.\"\n        }\n        if (\n            !verifyNumberInput(bpSettings.trainLimitArithmetic2Constant2) &&\n            !allowedCharacters.includes(bpSettings.trainLimitArithmetic2Constant2) &&\n            bpSettings.trainLimitArithmetic2Constant2 !== \"each\"\n        ) {\n            return \"Last input in the second arithmetic combinator is invalid.\"\n        }\n    }\n    if (fluidStation.includes(bpSettings.stationType)) {\n        if (!verifyNumberInput(bpSettings.pumpStorageTankColumns)) {\n            return \"Input for amount of storage tank columns is invalid.\"\n        }\n        if (parseInt(bpSettings.pumpStorageTankColumns) < 1) {\n            return \"Amount of storage tank columns has to be at least 1.\"\n        }\n    }\n    if (bpSettings.stationType !== \"Stacker\") {\n        if (parseInt(bpSettings.chestLimit) < 0) {\n            return \"The given chest limit is invalid.\"\n        }\n        if (bpSettings.refillEnabled && parseInt(bpSettings.refillFuelAmount) < 0) {\n            return \"The given fuel amount is invalid.\"\n        }\n        if (bpSettings.chestLimit != \"\" && !verifyNumberInput(bpSettings.chestLimit)) {\n            return \"The given chest limit is not a number.\"\n        }\n        if (bpSettings.refillEnabled && !verifyNumberInput(bpSettings.refillFuelAmount)) {\n            return \"The given refill amount is not a number.\"\n        }\n        if (\n            bpSettings.trainStopUsesEnabledCondition &&\n            !verifyNumberInput(bpSettings.enabledConditionAmount)\n        ) {\n            return \"The given 'enabled-condition' amount is not a number.\"\n        }\n    }\n    // No error was found\n    return \"\"\n}\n\nexport const calcCombinatorSettings = (\n    bpSettings: typeof defaultSettings\n): [string, iOperator, string, string, iOperator, string] => {\n    const cargoCount = parseInt(bpSettings.cargoWagon)\n\n    // Calculate total number of chests\n    const sidesFactor = bpSettings.beltSidesUsed === \"Both\" ? 2 : 1\n    let totalChestCount = 0\n    if (normalStation.includes(bpSettings.stationType)) {\n        totalChestCount = sidesFactor * 6 * cargoCount\n    } else {\n        // Fluid stations only use one side, and there is 2 tanks per cargo wagon\n        totalChestCount = 2 * cargoCount\n    }\n\n    // Calculate how many items the green-wire connected chests can contain\n    let connectedChestCount = 1\n    if (bpSettings.connectChestsWithGreenWire) {\n        if (normalStation.includes(bpSettings.stationType)) {\n            // For normal stations, there is 6 chests per cargo wagon per side\n            connectedChestCount = 6 * cargoCount\n        } else {\n            // For fluid stations, there is 2 storage tanks per cargo wagon\n            connectedChestCount = 2 * cargoCount\n        }\n    }\n    if (\n        bpSettings.connectBothSideWithGreenWire &&\n        bpSettings.beltSidesUsed === \"Both\" &&\n        normalStation.includes(bpSettings.stationType)\n    ) {\n        // If both sides are used, double the amount of chests (only one side is used for fluid stations\n        connectedChestCount *= 2\n    }\n    const chestType = bpSettings.chestType\n    let chestSlotsCount = chestType === \"wooden-chest\" ? 16 : chestType === \"iron-chest\" ? 32 : 48\n    const chestLimit = bpSettings.chestLimit === \"\" ? 999999 : parseInt(bpSettings.chestLimit)\n    chestSlotsCount = Math.min(chestLimit, chestSlotsCount)\n    let chestTotalItemCount = 0\n    // Calculate how many items the cargo wagons can contain\n    const trainSlotsCount = 40\n    let trainTotalItemCount = 0\n    let stackSize = bpSettings.trainLimitStackSize\n    if (normalStation.includes(bpSettings.stationType)) {\n        chestTotalItemCount = stackSize * chestSlotsCount * connectedChestCount\n        trainTotalItemCount =\n            cargoCount * trainSlotsCount * stackSize * (connectedChestCount / totalChestCount)\n    } else {\n        // All fluid wagons have room for 25k fluids\n        stackSize = 25000\n        chestTotalItemCount =\n            stackSize * connectedChestCount * parseInt(bpSettings.pumpStorageTankColumns)\n        trainTotalItemCount = cargoCount * stackSize * (connectedChestCount / totalChestCount)\n    }\n\n    if (\n        bpSettings.stationType === \"Loading Station\" ||\n        bpSettings.stationType === \"Fluid Loading Station\"\n    ) {\n        return [\"each\", \"/\", Math.round(trainTotalItemCount).toString(), \"L\", \"+\", \"0\"]\n    }\n\n    if (\n        bpSettings.stationType === \"Unloading Station\" ||\n        bpSettings.stationType === \"Fluid Unloading Station\"\n    ) {\n        // Limiting station to at most 1 train even if there is space in chests or storage tanks is good, in case there are multiple unloading stations - trains will pick the closest station available instead of the least busy one\n        let minuend = \"1\"\n        if (!bpSettings.trainLimitToAtMostOneTrain) {\n            minuend = Math.floor(chestTotalItemCount / trainTotalItemCount).toString()\n        }\n        return [\"each\", \"/\", Math.round(trainTotalItemCount).toString(), minuend, \"-\", \"L\"]\n    }\n\n    return [\"0\", \"+\", \"0\", \"0\", \"+\", \"0\"]\n}\n\nexport const encodeSettings = (settings: typeof defaultSettings): string => {\n    return \"0\" + zlib.deflateSync(JSON.stringify(settings), { level: 9 }).toString(\"base64\")\n}\n\nexport const decodeSettings = (blueprintString: string): typeof defaultSettings => {\n    return JSON.parse(\n        zlib.inflateSync(Buffer.from(blueprintString.slice(1), \"base64\")).toString(\"utf8\")\n    )\n}\n","import {\n    iArithmeticCondition,\n    iBlueprintItem,\n    iBlueprintItemWithoutNumber,\n    iCircuitConnection,\n    iOptions,\n    iTrainStopControlBehavior,\n    iWireColor,\n} from \"../constants/interfaces\"\nimport {\n    allowedCharacters,\n    botChestTypes,\n    defaultSettings,\n    DIRECTION,\n    filterInserters,\n    fluidStation,\n    inserterStackSize,\n    mirrorXOffset,\n    normalStation,\n    requestChestTypes,\n    splitterTypes,\n} from \"../constants/constants\"\n\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst cloneDeep = require(\"clone-deep\")\n\nexport let entityNumber = 1\nexport let circuitNumber = 1\nexport const resetEntityNumber = (): void => {\n    entityNumber = 1\n    circuitNumber = 1\n}\n\nexport const newItem = (\n    itemName: string,\n    x: number,\n    y: number,\n    options: iOptions = {}\n): iBlueprintItem => {\n    const item: iBlueprintItem = {\n        entity_number: entityNumber,\n        name: itemName,\n        position: {\n            x: x,\n            y: y,\n        },\n    }\n    if (options.direction) {\n        item.direction = options.direction\n    }\n    if (options.orientation) {\n        item.orientation = options.orientation\n    }\n    if (options.bar) {\n        item.bar = options.bar\n    }\n    if (options.filters) {\n        item.filters = options.filters\n    }\n    if (options.request_filters) {\n        item.request_filters = options.request_filters\n    }\n    if (options.request_from_buffers) {\n        item.request_from_buffers = options.request_from_buffers\n    }\n    if (options.control_behavior) {\n        item.control_behavior = options.control_behavior\n    }\n    if (options.station) {\n        item.station = options.station\n    }\n    if (options.manual_trains_limit) {\n        item.manual_trains_limit = options.manual_trains_limit\n    }\n    if (options.trains_limit_signal) {\n        item.trains_limit_signal = options.trains_limit_signal\n    }\n    entityNumber += 1\n    return item\n}\nexport const assignEntityNumberToItems = (\n    items: iBlueprintItemWithoutNumber[],\n    xOffset = 0,\n    yOffset = 0\n): iBlueprintItem[] => {\n    return items.map((item) => {\n        return newItem(item.name, item.position.x + xOffset, item.position.y + yOffset, {\n            direction: item.direction,\n        })\n    })\n}\n// Get total train length but as array so I can loop over it\nexport const getTrainArray = (\n    bpSettings: typeof defaultSettings,\n    startOffset = 0,\n    bottomOffset = 0\n): number[] => {\n    const returnArray: number[] = []\n    const doubleHeaded = bpSettings.doubleHeaded ? 2 : 1\n    for (\n        let i = startOffset;\n        i <\n        (doubleHeaded * parseInt(bpSettings.locomotivesPerEnd) + parseInt(bpSettings.cargoWagon)) *\n            7 +\n            bottomOffset;\n        i++\n    ) {\n        returnArray.push(i)\n    }\n    return returnArray\n}\n// Only front locomotives as array\nexport const getFrontLocomotivesArray = (\n    bpSettings: typeof defaultSettings,\n    startOffset = -3,\n    bottomOffset = -3\n): number[] => {\n    const returnArray: number[] = []\n    for (let i = startOffset; i < parseInt(bpSettings.locomotivesPerEnd) * 7 + bottomOffset; i++) {\n        returnArray.push(i)\n    }\n    return returnArray\n}\n// Only back locomotives as array (or empty array if single headed)\nexport const getBackLocomotivesArray = (\n    bpSettings: typeof defaultSettings,\n    startOffset = -3,\n    bottomOffset = -3\n): number[] => {\n    if (!bpSettings.doubleHeaded) return []\n    const returnArray: number[] = []\n    for (\n        let i =\n            (parseInt(bpSettings.locomotivesPerEnd) + parseInt(bpSettings.cargoWagon)) * 7 +\n            startOffset;\n        i <\n        (2 * parseInt(bpSettings.locomotivesPerEnd) + parseInt(bpSettings.cargoWagon)) * 7 +\n            bottomOffset;\n        i++\n    ) {\n        returnArray.push(i)\n    }\n    return returnArray\n}\n// Returns an array of y-offsets where the cargo is\nexport const getCargoArray = (bpSettings: typeof defaultSettings, startOffset = -3): number[] => {\n    const returnArray: number[] = []\n    const bottomOffset = 1\n    for (\n        let i = parseInt(bpSettings.locomotivesPerEnd) * 7 + startOffset;\n        i <\n        (parseInt(bpSettings.locomotivesPerEnd) + parseInt(bpSettings.cargoWagon)) * 7 +\n            startOffset +\n            bottomOffset;\n        i++\n    ) {\n        returnArray.push(i)\n    }\n    return returnArray\n}\n\nexport const placeTrainTracks = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    const returnArray: iBlueprintItem[] = []\n    getTrainArray(bpSettings, -4).forEach((i, index) => {\n        // Dont place first track when double headed train\n        if (index === 0 && bpSettings.doubleHeaded && bpSettings.stationType !== \"Stacker\") {\n            return\n        }\n        // Train tracks are 2x2, so only place it every 2nd time\n        if (i % 2 === 0) {\n            returnArray.push(newItem(\"straight-rail\", -1.5, i))\n        }\n    })\n    return returnArray\n}\n\nexport const placeSignals = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    // Size is 1x1, so coordinate ends in 0.5\n    const returnArray: iBlueprintItem[] = []\n    const start = 0\n    const doubleHeaded = bpSettings.doubleHeaded ? 2 : 1\n    const singleHeadedOffset = bpSettings.doubleHeaded ? 0 : 1\n    const end =\n        (doubleHeaded * parseInt(bpSettings.locomotivesPerEnd) + parseInt(bpSettings.cargoWagon)) *\n            7 +\n        singleHeadedOffset\n    // Stacker\n    if (bpSettings.stationType === \"Stacker\") {\n        returnArray.push(\n            newItem(\"rail-chain-signal\", 0, start - 3.5, { direction: DIRECTION.DOWN })\n        )\n        returnArray.push(newItem(\"rail-signal\", 0, end - 2.5, { direction: DIRECTION.DOWN }))\n    }\n    // Normal station\n    else {\n        if (bpSettings.doubleHeaded) {\n            // Chain signal at the back if double headed, because I assume double headed trains exit the same way they went in\n            returnArray.push(\n                newItem(\"rail-chain-signal\", -3, end - 2.5, { direction: DIRECTION.UP })\n            )\n        } else {\n            // Chain signal at the front if not double headed\n            returnArray.push(\n                newItem(\"rail-chain-signal\", 0, start - 3.5, { direction: DIRECTION.DOWN })\n            )\n        }\n        // Rail signal at the back\n        returnArray.push(newItem(\"rail-signal\", 0, end - 2.5, { direction: DIRECTION.DOWN }))\n    }\n\n    return returnArray\n}\n\nexport const placeTrainStop = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    // Size is 2x2, so coordinate ends in .0\n    const returnArray: iBlueprintItem[] = []\n    const options: iOptions = {\n        station: bpSettings.stationName !== \"\" ? bpSettings.stationName : undefined,\n    }\n    const controlBehavior: iTrainStopControlBehavior = {}\n    if (bpSettings.trainStopUsesEnabledCondition) {\n        controlBehavior.circuit_enable_disable = true\n        controlBehavior.circuit_condition = {\n            first_signal: {\n                type: \"virtual\",\n                name: \"signal-red\",\n            },\n            constant: 0,\n            comparator: \">\",\n        }\n    }\n    if (bpSettings.trainLimit === \"Dynamic\") {\n        controlBehavior.set_trains_limit = bpSettings.trainLimit === \"Dynamic\"\n        controlBehavior.trains_limit_signal = {\n            type: \"virtual\",\n            name: \"signal-L\",\n        }\n    } else {\n        options.manual_trains_limit = parseInt(bpSettings.trainLimit)\n    }\n    options.control_behavior = controlBehavior\n    returnArray.push(newItem(\"train-stop\", 0.5, -2, options))\n    return returnArray\n}\n\nexport const placeTrain = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    const returnArray: iBlueprintItem[] = []\n    let count = 0\n    const doubleHeaded = bpSettings.doubleHeaded ? 2 : 1\n    const locoCount = parseInt(bpSettings.locomotivesPerEnd)\n    const cargoCount = parseInt(bpSettings.cargoWagon)\n    parseInt(bpSettings.cargoWagon)\n    getTrainArray(bpSettings).forEach((y, i) => {\n        if (i % 7 !== 0) return\n        if (count < locoCount) {\n            returnArray.push(newItem(\"locomotive\", -1.5, y + 1))\n        } else if (count < locoCount + cargoCount) {\n            if (!fluidStation.includes(bpSettings.stationType))\n                returnArray.push(newItem(\"cargo-wagon\", -1.5, y + 1))\n            else returnArray.push(newItem(\"fluid-wagon\", -1.5, y + 1))\n        } else if (count < locoCount * doubleHeaded + cargoCount) {\n            returnArray.push(newItem(\"locomotive\", -1.5, y + 1, { orientation: 0.5 }))\n        }\n        count += 1\n    })\n    return returnArray\n}\n\nexport const placeInserters = (\n    bpSettings: typeof defaultSettings\n): [iBlueprintItem[], iBlueprintItem[]] => {\n    // Size is 1x1, so coordinate ends in 0.5\n    // Inserter direction = direction it grabs from\n    const innerInserters: iBlueprintItem[] = []\n    const outerInserters: iBlueprintItem[] = []\n    const inserterType = bpSettings.enableFilterInserters\n        ? filterInserters[bpSettings.inserterType]\n        : bpSettings.inserterType\n    const inserterDirection =\n        bpSettings.stationType === \"Loading Station\" ? DIRECTION.RIGHT : DIRECTION.LEFT\n    let filterArray:\n        | undefined\n        | Array<{\n              index: number\n              name: string\n          }>\n    if (bpSettings.enableFilterInserters) {\n        filterArray = []\n        for (let i = 0; i < 5; i++) {\n            if (bpSettings.filterFields[i] === \"\") break\n            filterArray.push({\n                index: i + 1,\n                name: bpSettings.filterFields[i],\n            })\n        }\n    }\n    getCargoArray(bpSettings).forEach((y, i) => {\n        if (i % 7 === 0) return\n        innerInserters.push(\n            newItem(inserterType, 0, y + 0.5, {\n                direction: inserterDirection,\n                filters: filterArray,\n            })\n        )\n\n        if (!botChestTypes.includes(bpSettings.chestType)) {\n            let newInserter\n            if (\n                normalStation.includes(bpSettings.stationType) &&\n                bpSettings.madzuriEvenLoadUnload\n            ) {\n                newInserter = newItem(inserterType, 2, y + 0.5, {\n                    direction: inserterDirection,\n                    filters: filterArray,\n                    control_behavior: {\n                        circuit_condition: {\n                            first_signal: {\n                                type: \"virtual\",\n                                name: \"signal-everything\",\n                            },\n                            constant:\n                                bpSettings.stationType === \"Loading Station\"\n                                    ? inserterStackSize[bpSettings.inserterType]\n                                    : 0,\n                            comparator: bpSettings.stationType === \"Loading Station\" ? \"<\" : \">\",\n                        },\n                    },\n                })\n            } else {\n                newInserter = newItem(inserterType, 2, y + 0.5, {\n                    direction: inserterDirection,\n                    filters: filterArray,\n                })\n            }\n            outerInserters.push(newInserter)\n        }\n    })\n    return [innerInserters, outerInserters]\n}\nexport const placeChests = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    // Size is 1x1, so coordinate ends in 0.5\n    const returnArray: iBlueprintItem[] = []\n\n    // For requester and buffer chests, add the requests\n    const isRequesterChest = requestChestTypes.includes(bpSettings.chestType)\n    const requests: Array<{\n        index: number\n        name: string\n        count: number\n    }> = []\n    if (isRequesterChest) {\n        for (let i = 0; i < 12; i++) {\n            const itemType = bpSettings.chestRequestItemsType[i]\n            if (itemType === \"\") break\n            const itemAmount = bpSettings.chestRequestItemsAmount[i]\n            requests.push({\n                index: i + 1,\n                name: itemType,\n                count: parseInt(itemAmount),\n            })\n        }\n    }\n\n    const requestFromBuffers =\n        bpSettings.chestRequestFromBuffers && bpSettings.chestType === \"logistic-chest-requester\"\n            ? true\n            : undefined\n    getCargoArray(bpSettings).forEach((y, i) => {\n        if (i % 7 === 0) return\n        returnArray.push(\n            newItem(bpSettings.chestType, 1, y + 0.5, {\n                bar: parseInt(bpSettings.chestLimit),\n                request_filters: requests.length === 0 ? undefined : requests,\n                request_from_buffers: requestFromBuffers,\n            })\n        )\n    })\n    return returnArray\n}\n// Belts between inserter and splitter\nexport const placeLoadingBelts = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    // Size is 1x1, so coordinate ends in 0.5\n    const returnArray: iBlueprintItem[] = []\n    getCargoArray(bpSettings).forEach((y, i) => {\n        if (i % 7 === 1) {\n            returnArray.push(\n                newItem(bpSettings.beltType, 3, y + 0.5, { direction: DIRECTION.LEFT })\n            )\n        } else if (i % 7 === 2) {\n            returnArray.push(newItem(bpSettings.beltType, 3, y + 0.5, { direction: DIRECTION.UP }))\n        } else if (i % 7 === 3) {\n            returnArray.push(newItem(bpSettings.beltType, 3, y + 0.5, { direction: DIRECTION.UP }))\n        } else if (i % 7 === 4) {\n            returnArray.push(\n                newItem(bpSettings.beltType, 3, y + 0.5, { direction: DIRECTION.DOWN })\n            )\n        } else if (i % 7 === 5) {\n            returnArray.push(\n                newItem(bpSettings.beltType, 3, y + 0.5, { direction: DIRECTION.DOWN })\n            )\n        } else if (i % 7 === 6) {\n            returnArray.push(\n                newItem(bpSettings.beltType, 3, y + 0.5, { direction: DIRECTION.LEFT })\n            )\n        }\n    })\n    return returnArray\n}\nexport const placeUnloadingBelts = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    // Size is 1x1, so coordinate ends in 0.5\n    const returnArray: iBlueprintItem[] = []\n    getCargoArray(bpSettings).forEach((y, i) => {\n        if (i % 7 === 1) {\n            returnArray.push(\n                newItem(bpSettings.beltType, 3, y + 0.5, { direction: DIRECTION.DOWN })\n            )\n        } else if (i % 7 === 2) {\n            returnArray.push(\n                newItem(bpSettings.beltType, 3, y + 0.5, { direction: DIRECTION.DOWN })\n            )\n        } else if (i % 7 === 3) {\n            returnArray.push(\n                newItem(bpSettings.beltType, 3, y + 0.5, { direction: DIRECTION.RIGHT })\n            )\n        } else if (i % 7 === 4) {\n            returnArray.push(\n                newItem(bpSettings.beltType, 3, y + 0.5, { direction: DIRECTION.RIGHT })\n            )\n        } else if (i % 7 === 5) {\n            returnArray.push(newItem(bpSettings.beltType, 3, y + 0.5, { direction: DIRECTION.UP }))\n        } else if (i % 7 === 6) {\n            returnArray.push(newItem(bpSettings.beltType, 3, y + 0.5, { direction: DIRECTION.UP }))\n        }\n    })\n    return returnArray\n}\nexport const placePumps = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    const returnArray: iBlueprintItem[] = []\n    const pumpDirection =\n        bpSettings.stationType === \"Fluid Loading Station\" ? DIRECTION.LEFT : DIRECTION.RIGHT\n    getCargoArray(bpSettings).forEach((y, i) => {\n        if (i % 7 === 1) {\n            returnArray.push(newItem(\"pump\", 0.5, y + 0.5, { direction: pumpDirection }))\n        }\n        if (i % 7 === 6) {\n            returnArray.push(newItem(\"pump\", 0.5, y + 0.5, { direction: pumpDirection }))\n        }\n    })\n    return returnArray\n}\nexport const placeStorageTanks = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    // Size is 3x3, so coordinate ends in 0.5\n    // Storage tank facing UP has connection topleft and bottomright\n    // Storage tank facing RIGHT has connection topright and bottomleft\n    const returnArray: iBlueprintItem[] = []\n    getCargoArray(bpSettings).forEach((y, i) => {\n        if (i % 7 === 2) {\n            for (\n                let xOffset = 0;\n                xOffset < parseInt(bpSettings.pumpStorageTankColumns);\n                xOffset++\n            ) {\n                const tankDirection = xOffset % 2 === 0 ? DIRECTION.UP : DIRECTION.RIGHT\n                returnArray.push(\n                    newItem(\"storage-tank\", (1 + xOffset) * 3, y + 0.5, {\n                        direction: tankDirection,\n                    })\n                )\n            }\n        }\n        if (i % 7 === 5) {\n            for (\n                let xOffset = 0;\n                xOffset < parseInt(bpSettings.pumpStorageTankColumns);\n                xOffset++\n            ) {\n                const tankDirection = xOffset % 2 === 0 ? DIRECTION.RIGHT : DIRECTION.UP\n                returnArray.push(\n                    newItem(\"storage-tank\", (1 + xOffset) * 3, y + 0.5, {\n                        direction: tankDirection,\n                    })\n                )\n            }\n        }\n    })\n    return returnArray\n}\nexport const placePipes = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    // Size is 1x1, so coordinate ends in 0.5\n    const returnArray: iBlueprintItem[] = []\n    getCargoArray(bpSettings).forEach((y, i, array) => {\n        if (i !== 0 && i !== array.length - 1 && i % 7 === 0) {\n            for (let j = 0; j < parseInt(bpSettings.pumpStorageTankColumns); j++) {\n                const xOffset = j % 2 === 0 ? Math.floor(j / 2) * 6 : Math.floor(j / 2) * 6 + 5\n                returnArray.push(newItem(\"pipe\", 2 + xOffset, y + 0.5))\n            }\n        }\n    })\n    return returnArray\n}\n// Belts that go from splitter to front/back\nexport const placeVerticalBelts = (\n    bpSettings: typeof defaultSettings,\n    splitters: Array<iBlueprintItem>\n): iBlueprintItem[] => {\n    const returnArray: iBlueprintItem[] = []\n    const mode = bpSettings.stationType === \"Loading Station\" ? \"load\" : \"unload\"\n    const beltEnd = bpSettings.beltFlowDirection\n    sortByYPosition(splitters)\n    let x = 5\n    // Unloading to front, splitters[0] is the front splitter\n    if (mode === \"unload\" && beltEnd === \"Front\") {\n        splitters.forEach((splitter) => {\n            for (let y = splitters[0].position.y; y <= splitter.position.y; y++) {\n                returnArray.push(\n                    newItem(bpSettings.beltType, x, y - 0.5, { direction: DIRECTION.UP })\n                )\n            }\n            for (let i = splitter.position.x + 1; i < x; i++) {\n                returnArray.push(\n                    newItem(bpSettings.beltType, i, splitter.position.y - 0.5, {\n                        direction: DIRECTION.RIGHT,\n                    })\n                )\n            }\n            x += 1\n        })\n    }\n    // Unloading to back, splitters[0] is the back splitter\n    if (mode === \"unload\" && beltEnd === \"Back\") {\n        splitters.reverse()\n        splitters.forEach((splitter) => {\n            for (let y = splitters[0].position.y; y >= splitter.position.y; y--) {\n                returnArray.push(\n                    newItem(bpSettings.beltType, x, y + 0.5, { direction: DIRECTION.DOWN })\n                )\n            }\n            for (let i = splitter.position.x + 1; i < x; i++) {\n                returnArray.push(\n                    newItem(bpSettings.beltType, i, splitter.position.y + 0.5, {\n                        direction: DIRECTION.RIGHT,\n                    })\n                )\n            }\n            x += 1\n        })\n    }\n    // Loading from front, splitters[0] is the front splitter\n    if (mode === \"load\" && beltEnd === \"Front\") {\n        splitters.forEach((splitter) => {\n            for (let y = splitters[0].position.y; y < splitter.position.y; y++) {\n                returnArray.push(\n                    newItem(bpSettings.beltType, x, y - 0.5, { direction: DIRECTION.DOWN })\n                )\n            }\n            for (let i = splitter.position.x + 1; i <= x; i++) {\n                returnArray.push(\n                    newItem(bpSettings.beltType, i, splitter.position.y - 0.5, {\n                        direction: DIRECTION.LEFT,\n                    })\n                )\n            }\n            x += 1\n        })\n    }\n    // Loading from back, splitters[0] is the back splitter\n    if (mode === \"load\" && beltEnd === \"Back\") {\n        splitters.reverse()\n        splitters.forEach((splitter) => {\n            for (let y = splitters[0].position.y; y > splitter.position.y; y--) {\n                returnArray.push(\n                    newItem(bpSettings.beltType, x, y + 0.5, { direction: DIRECTION.UP })\n                )\n            }\n            for (let i = splitter.position.x + 1; i <= x; i++) {\n                returnArray.push(\n                    newItem(bpSettings.beltType, i, splitter.position.y + 0.5, {\n                        direction: DIRECTION.LEFT,\n                    })\n                )\n            }\n            x += 1\n        })\n    }\n    return returnArray\n}\nexport const placeSplitters = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    const returnArray: iBlueprintItem[] = []\n    const splitterType = splitterTypes[bpSettings.beltType]\n    const splitterDirection =\n        bpSettings.stationType === \"Loading Station\" ? DIRECTION.LEFT : DIRECTION.RIGHT\n    getCargoArray(bpSettings).forEach((y, i) => {\n        if (i % 7 !== 4) return\n        returnArray.push(newItem(splitterType, 4, y, { direction: splitterDirection }))\n    })\n    return returnArray\n}\nexport const placePoles = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    // Size is 1x1, so coordinate ends in 0.5\n    const returnArray: iBlueprintItem[] = []\n    getCargoArray(bpSettings).forEach((y, i) => {\n        if (i % 7 !== 0) return\n        returnArray.push(newItem(\"medium-electric-pole\", 0, y + 0.5))\n    })\n    return returnArray\n}\nexport const placeLamps = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    // Size is 1x1, so coordinate ends in 0.5\n    const returnArray: iBlueprintItem[] = []\n    getCargoArray(bpSettings).forEach((y, i) => {\n        if (i % 7 !== 0) return\n        returnArray.push(newItem(\"small-lamp\", 1, y + 0.5))\n    })\n    // TODO Fix lamps for refill inserters/chests?\n    // if (\n    //     bpSettings.refillEnabled ||\n    //     bpSettings.trainStopUsesEnabledCondition ||\n    //     (bpSettings.trainLimit === \"Dynamic\" && normalStation.includes(bpSettings.stationType))\n    // ) {\n    //     getFrontLocomotivesArray(bpSettings).forEach((y, i, array) => {\n    //         if (i % 7 !== 0 || array.length === i - 1 || i === 0) return\n    //         returnArray.push(newItem(\"small-lamp\", 1, y + 0.5))\n    //     })\n    // }\n    // if (bpSettings.refillEnabled) {\n    //     getBackLocomotivesArray(bpSettings).forEach((y, i, array) => {\n    //         if (i % 7 !== 0 || array.length === i - 1 || i === 0) return\n    //         returnArray.push(newItem(\"small-lamp\", 1, y + 0.5))\n    //     })\n    // }\n    return returnArray\n}\n// Arithmetic combinator for madzuri-loading\nexport const placeMadzuriArithmeticCombinator = (\n    bpSettings: typeof defaultSettings,\n    side: \"Left\" | \"Right\",\n    chests: iBlueprintItem[],\n    inserters: iBlueprintItem[]\n): iBlueprintItem[] => {\n    // Places an arithmetic combinator\n    if (parseInt(bpSettings.cargoWagon) <= 0) {\n        return []\n    }\n    const direction = side === \"Right\" ? DIRECTION.RIGHT : DIRECTION.LEFT\n    const lampOffset = bpSettings.placeLampsNearPoles ? 1 : 0\n    const xOffset = side === \"Right\" ? 1 + lampOffset : -5 - lampOffset\n    const connectBothSidesFactor =\n        bpSettings.beltSidesUsed === \"Both\" && bpSettings.connectBothSideWithGreenWire ? 2 : 1\n    const arithmetic = newItem(\"arithmetic-combinator\", xOffset, 11, {\n        direction: direction,\n        control_behavior: {\n            arithmetic_conditions: {\n                first_signal: {\n                    type: \"virtual\",\n                    name: \"signal-each\",\n                },\n                second_constant: -6 * parseInt(bpSettings.cargoWagon) * connectBothSidesFactor,\n                operation: \"/\",\n                output_signal: {\n                    type: \"virtual\",\n                    name: \"signal-each\",\n                },\n            },\n        },\n    })\n    chests.forEach((chest, index) => {\n        const inserter = inserters[index]\n        if (index === 5) {\n            // Connect chest with arithmetic input\n            connectTwoEntitiesWithWire(chest, arithmetic, \"green\")\n            // Connect arithmetic output with inserter\n            connectTwoEntitiesWithWire(arithmetic, inserter, \"green\", \"2\")\n        }\n        connectTwoEntitiesWithWire(chest, inserter, \"red\")\n    })\n    return [arithmetic]\n}\n// Decider for enabled-condition\nexport const placeEnabledConditionDecider = (\n    bpSettings: typeof defaultSettings,\n    topPole: iBlueprintItem,\n    trainStop: iBlueprintItem\n): iBlueprintItem[] => {\n    const decider = newItem(\"decider-combinator\", 0, 1, {\n        control_behavior: {\n            decider_conditions: {\n                first_signal: {\n                    type: \"virtual\",\n                    name: \"signal-anything\",\n                },\n                constant: parseInt(bpSettings.enabledConditionAmount),\n                comparator: bpSettings.enabledConditionOperator,\n                output_signal: {\n                    type: \"virtual\",\n                    name: \"signal-red\",\n                },\n                copy_count_from_input: false,\n            },\n        },\n    })\n    // Combine decider output with trainstop with green wire\n    connectTwoEntitiesWithWire(decider, trainStop, \"green\", \"2\", \"1\")\n    // Combine decider input with pole with green wire\n    connectTwoEntitiesWithWire(decider, topPole, \"green\")\n    return [decider]\n}\n// Combinators for set train limit dynamically\nexport const placeDynamicTrainLimitCombinators = (\n    bpSettings: typeof defaultSettings,\n    topPole: iBlueprintItem,\n    trainStop: iBlueprintItem\n): iBlueprintItem[] => {\n    let arithmetic1Xvalue = 2\n    let arithmetic2Xvalue = 1\n    let arithmeticXOffset = bpSettings.placeLampsNearPoles ? 1 : 0\n    if (\n        (normalStation.includes(bpSettings.stationType) && bpSettings.beltSidesUsed === \"Left\") ||\n        (fluidStation.includes(bpSettings.stationType) && bpSettings.pumpSidesToBeUsed === \"Left\")\n    ) {\n        arithmetic1Xvalue *= -1\n        arithmetic2Xvalue *= -1\n        const mirrorOffset = -3\n        arithmeticXOffset = -1 * arithmeticXOffset + mirrorOffset\n    }\n    // Set settings of the first arithmetic combinator\n    const arithmetic1Condition: iArithmeticCondition = {\n        operation: bpSettings.trainLimitArithmetic1Operator,\n        output_signal: {\n            type: \"virtual\",\n            name: \"signal-L\",\n        },\n    }\n    if (\n        bpSettings.trainLimitArithmetic1Constant1 === \"each\" ||\n        allowedCharacters.includes(bpSettings.trainLimitArithmetic1Constant1)\n    )\n        arithmetic1Condition[\"first_signal\"] = {\n            type: \"virtual\",\n            name:\n                bpSettings.trainLimitArithmetic1Constant1 === \"each\"\n                    ? \"signal-each\"\n                    : `signal-${bpSettings.trainLimitArithmetic1Constant1}`,\n        }\n    else\n        arithmetic1Condition[\"first_constant\"] = parseInt(bpSettings.trainLimitArithmetic1Constant1)\n    if (\n        bpSettings.trainLimitArithmetic1Constant2 === \"each\" ||\n        allowedCharacters.includes(bpSettings.trainLimitArithmetic1Constant2)\n    )\n        arithmetic1Condition[\"second_signal\"] = {\n            type: \"virtual\",\n            name:\n                bpSettings.trainLimitArithmetic1Constant2 === \"each\"\n                    ? \"signal-each\"\n                    : `signal-${bpSettings.trainLimitArithmetic1Constant2}`,\n        }\n    else\n        arithmetic1Condition[\"second_constant\"] = parseInt(\n            bpSettings.trainLimitArithmetic1Constant2\n        )\n    const arithmetic1 = newItem(\"arithmetic-combinator\", arithmetic1Xvalue + arithmeticXOffset, 4, {\n        control_behavior: {\n            arithmetic_conditions: arithmetic1Condition,\n        },\n    })\n    ////////////////////////////////////////////////////////\n    // Set settings of the second arithmetic combinator\n    const arithmetic2Condition: iArithmeticCondition = {\n        operation: bpSettings.trainLimitArithmetic2Operator,\n        output_signal: {\n            type: \"virtual\",\n            name: \"signal-L\",\n        },\n    }\n    if (\n        bpSettings.trainLimitArithmetic2Constant1 === \"each\" ||\n        allowedCharacters.includes(bpSettings.trainLimitArithmetic2Constant1)\n    )\n        arithmetic2Condition[\"first_signal\"] = {\n            type: \"virtual\",\n            name:\n                bpSettings.trainLimitArithmetic2Constant1 === \"each\"\n                    ? \"signal-each\"\n                    : `signal-${bpSettings.trainLimitArithmetic2Constant1}`,\n        }\n    else\n        arithmetic2Condition[\"first_constant\"] = parseInt(bpSettings.trainLimitArithmetic2Constant1)\n    if (\n        bpSettings.trainLimitArithmetic2Constant2 === \"each\" ||\n        allowedCharacters.includes(bpSettings.trainLimitArithmetic2Constant2)\n    )\n        arithmetic2Condition[\"second_signal\"] = {\n            type: \"virtual\",\n            name:\n                bpSettings.trainLimitArithmetic2Constant2 === \"each\"\n                    ? \"signal-each\"\n                    : `signal-${bpSettings.trainLimitArithmetic2Constant2}`,\n        }\n    else\n        arithmetic2Condition[\"second_constant\"] = parseInt(\n            bpSettings.trainLimitArithmetic2Constant2\n        )\n    const arithmetic2 = newItem(\"arithmetic-combinator\", arithmetic2Xvalue + arithmeticXOffset, 4, {\n        control_behavior: {\n            arithmetic_conditions: arithmetic2Condition,\n        },\n    })\n    // arithmentic gets: \"2\"(output) green connection with circuit number 1 to decider which gets \"1\"(input) green connection with circuit number 2\n    connectTwoEntitiesWithWire(arithmetic2, trainStop, \"green\", \"2\", \"1\", 1, 2)\n    connectTwoEntitiesWithWire(arithmetic1, arithmetic2, \"green\", \"2\", \"1\", 1, 2)\n    // Combine decider input with pole with green wire\n    connectTwoEntitiesWithWire(arithmetic1, topPole, \"green\")\n    return [arithmetic1, arithmetic2]\n}\n// Refuel\nexport const placeTopRefuelPoles = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    const returnArray: iBlueprintItem[] = []\n    getFrontLocomotivesArray(bpSettings).forEach((y, i, array) => {\n        if (i % 7 !== 0 || array.length === i - 1 || i === 0) return\n        returnArray.push(newItem(\"medium-electric-pole\", 0, y + 0.5))\n    })\n    return returnArray\n}\nexport const placeBottomRefuelPoles = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    const returnArray: iBlueprintItem[] = []\n    getBackLocomotivesArray(bpSettings).forEach((y, i, array) => {\n        if (i % 7 !== 0 || array.length === i - 1 || i === 0) return\n        returnArray.push(newItem(\"medium-electric-pole\", 0, y + 0.5))\n    })\n    return returnArray\n}\nexport const placeRefuelChestsAndInserters = (\n    bpSettings: typeof defaultSettings\n): iBlueprintItem[] => {\n    // Size is 1x1, so coordinate ends in 0.5\n    const returnArray: iBlueprintItem[] = []\n    getFrontLocomotivesArray(bpSettings).forEach((y, i) => {\n        if (i % 7 !== 5) return\n        returnArray.push(newItem(\"inserter\", 0, y + 0.5, { direction: DIRECTION.RIGHT }))\n        returnArray.push(\n            newItem(\"logistic-chest-requester\", 1, y + 0.5, {\n                request_filters: [\n                    {\n                        index: 1,\n                        name: bpSettings.refillFuelType,\n                        count: parseInt(bpSettings.refillFuelAmount),\n                    },\n                ],\n            })\n        )\n    })\n    getBackLocomotivesArray(bpSettings).forEach((y, i) => {\n        if (i % 7 !== 2) return\n        returnArray.push(newItem(\"inserter\", 0, y + 0.5, { direction: DIRECTION.RIGHT }))\n        returnArray.push(\n            newItem(\"logistic-chest-requester\", 1, y + 0.5, {\n                request_filters: [\n                    {\n                        index: 1,\n                        name: bpSettings.refillFuelType,\n                        count: parseInt(bpSettings.refillFuelAmount),\n                    },\n                ],\n            })\n        )\n    })\n    return returnArray\n}\n// Wire functions\nexport const connectTwoEntitiesWithWire = (\n    entity1: iBlueprintItem,\n    entity2: iBlueprintItem,\n    color: iWireColor,\n    entity1ConNumber: \"1\" | \"2\" = \"1\",\n    entity2ConNumber: \"1\" | \"2\" = \"1\",\n    circuit1Number: 1 | 2 | undefined = undefined,\n    circuit2Number: 1 | 2 | undefined = undefined\n): void => {\n    const entity1Number = entity1.entity_number\n    const entity2Number = entity2.entity_number\n\n    const createWirePath = (entity: iBlueprintItem, conNumber: \"1\" | \"2\") => {\n        if (!entity.connections) {\n            entity.connections = {}\n        }\n        if (!entity.connections[conNumber]) {\n            entity.connections[conNumber] = {}\n        }\n        const entityColor = entity.connections[conNumber] as {\n            red?: iCircuitConnection[]\n            green?: iCircuitConnection[]\n        }\n        if (!entityColor[color]) {\n            entityColor[color] = []\n        }\n        // Or in short but typescript doesnt let me:\n        // if (!entity.connections[conNumber][color]) {\n        //     entity.connections[conNumber][color] = []\n        // }\n    }\n\n    createWirePath(entity1, entity1ConNumber)\n    createWirePath(entity2, entity2ConNumber)\n\n    const conn1: iCircuitConnection = {\n        entity_id: entity2Number,\n    }\n    const conn2: iCircuitConnection = {\n        entity_id: entity1Number,\n    }\n    // Add circuit_id if both items are of type combinator (decider, arithmetic etc)\n    if (circuit1Number) {\n        conn1.circuit_id = circuit1Number\n    }\n    if (circuit2Number) {\n        conn2.circuit_id = circuit2Number\n    }\n    // Let me know if you come up with a readable solution for this:\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    entity1.connections[entity1ConNumber][color].push(conn1)\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    entity2.connections[entity2ConNumber][color].push(conn2)\n}\nexport const connectItemsWithWire = (items: iBlueprintItem[], color: iWireColor): void => {\n    items.forEach((item1, index) => {\n        if (index === 0) return\n        const item2 = items[index - 1]\n        connectTwoEntitiesWithWire(item1, item2, color)\n    })\n}\n// Helper functions\nexport const mirrorItemsHorizontal = (items: iBlueprintItem[]): iBlueprintItem[] => {\n    // Returns a new array with clones of items\n    return items.map((item) => {\n        const copy = cloneDeep(item) as iBlueprintItem\n        copy.entity_number = entityNumber\n        entityNumber += 1\n        copy.position.x = -copy.position.x + mirrorXOffset\n        if (copy.name === \"storage-tank\") {\n            if (!copy.direction) copy.direction = 2\n            else copy.direction = undefined\n        } else {\n            if (copy.direction === DIRECTION.LEFT) copy.direction = DIRECTION.RIGHT\n            else if (copy.direction === DIRECTION.RIGHT) copy.direction = DIRECTION.LEFT\n        }\n        return copy\n    })\n}\nexport const changeItemsCoordinates = (items: iBlueprintItem[], x = 0, y = 0): void => {\n    // Changes the items directly\n    items.forEach((item) => {\n        item.position = {\n            x: item.position.x + x,\n            y: item.position.y + y,\n        }\n    })\n}\nexport const copyPasteItems = (items: iBlueprintItem[], x = 0, y = 0): iBlueprintItem[] => {\n    // Changes the items directly\n    return items.map((item) => {\n        const clone: iBlueprintItem = cloneDeep(item)\n        clone.entity_number = entityNumber\n        entityNumber += 1\n        clone.position = {\n            x: clone.position.x + x,\n            y: clone.position.y + y,\n        }\n        return clone\n    })\n}\nexport const mixSides = (\n    sidesUsed: \"Both\" | \"Right\" | \"Left\",\n    leftArray: iBlueprintItem[],\n    rightArray: iBlueprintItem[]\n): iBlueprintItem[] => {\n    if (sidesUsed === \"Both\") {\n        return [...leftArray, ...rightArray]\n    } else if (sidesUsed === \"Left\") {\n        return leftArray\n    } else if (sidesUsed === \"Right\") {\n        return rightArray\n    }\n    console.assert(\"Error returning empty array\")\n    return []\n}\nexport const sortByYPosition = (items: iBlueprintItem[]): void => {\n    items.sort((a, b) => {\n        // Smaller y first\n        if (a.position.y < b.position.y) {\n            return -1\n        } else if (a.position.y > b.position.y) {\n            return 1\n        }\n        // If equal, sort by x (right side first)\n        if (a.position.x < b.position.x) {\n            return 1\n        } else if (a.position.x > b.position.x) {\n            return -1\n        }\n        return 0\n    })\n}\nexport const sortStorageTanks = (items: iBlueprintItem[], rowCount = 0): iBlueprintItem[] => {\n    if (items.length === 0) {\n        return []\n    }\n    sortByYPosition(items)\n    let returnArray: iBlueprintItem[] = []\n    let y = items[0].position.y\n    let rowItems: iBlueprintItem[] = []\n    items.forEach((item) => {\n        if (item.position.y !== y) {\n            y = item.position.y\n            if (rowCount % 2 == 0) {\n                rowItems.reverse()\n            }\n            rowCount += 1\n            returnArray = [...returnArray, ...rowItems]\n            rowItems = []\n        }\n        rowItems.push(item)\n    })\n    rowItems.reverse()\n    returnArray = [...returnArray, ...rowItems]\n\n    return returnArray\n}\n","import {\n    iBeltSides,\n    iBeltTypes,\n    iChestTypes,\n    iEnabledConditionOperators,\n    iInserterTypes,\n    iPumpSides,\n    iRefillFuelTypes,\n} from \"./interfaces\"\n\nexport const mirrorXOffset = -3\n\nexport const websiteUrl = \"https://burnysc2.github.io/Factorio-Train-Station-Blueprint-Creator\"\n\nexport type iStationType =\n    | \"Loading Station\"\n    | \"Unloading Station\"\n    | \"Fluid Loading Station\"\n    | \"Fluid Unloading Station\"\n    | \"Stacker\"\nexport const stationTypes: iStationType[] = [\n    \"Loading Station\",\n    \"Unloading Station\",\n    \"Fluid Loading Station\",\n    \"Fluid Unloading Station\",\n    \"Stacker\",\n]\nexport const normalStation: iStationType[] = [\"Loading Station\", \"Unloading Station\"]\nexport const fluidStation: iStationType[] = [\"Fluid Loading Station\", \"Fluid Unloading Station\"]\nexport const trainLimit = [\"Disabled\", \"Dynamic\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]\n\nexport const inserterTypes: iInserterTypes[] = [\"inserter\", \"fast-inserter\", \"stack-inserter\"]\nexport const inserterTypesHuman = {\n    inserter: \"Inserter\",\n    \"fast-inserter\": \"Fast Inserter\",\n    \"stack-inserter\": \"Stack Inserter\",\n}\nexport const filterInserters = {\n    inserter: \"filter-inserter\",\n    \"fast-inserter\": \"filter-inserter\",\n    \"stack-inserter\": \"filter-inserter\",\n}\nexport const inserterStackSize = {\n    inserter: 3,\n    \"fast-inserter\": 3,\n    \"stack-inserter\": 12,\n}\nexport const basicChestTypes: iChestTypes[] = [\"wooden-chest\", \"iron-chest\", \"steel-chest\"]\nexport const botChestTypes: iChestTypes[] = [\n    \"logistic-chest-requester\",\n    \"logistic-chest-buffer\",\n    \"logistic-chest-passive-provider\",\n    \"logistic-chest-active-provider\",\n    \"logistic-chest-storage\",\n]\nexport const chestTypes: iChestTypes[] = [...basicChestTypes, ...botChestTypes]\nexport const requestChestTypes: iChestTypes[] = [\n    \"logistic-chest-requester\",\n    \"logistic-chest-buffer\",\n]\nexport const chestTypesHuman = {\n    \"wooden-chest\": \"Wooden Chest\",\n    \"iron-chest\": \"Iron Chest\",\n    \"steel-chest\": \"Steel Chest\",\n    \"logistic-chest-requester\": \"Requester Chest\",\n    \"logistic-chest-buffer\": \"Buffer Chest\",\n    \"logistic-chest-passive-provider\": \"Passive Provider Chest\",\n    \"logistic-chest-active-provider\": \"Active Provider Chest\",\n    \"logistic-chest-storage\": \"Storage Chest\",\n}\nexport const beltTypes: iBeltTypes[] = [\n    \"transport-belt\",\n    \"fast-transport-belt\",\n    \"express-transport-belt\",\n]\nexport const beltTypesHuman = {\n    \"transport-belt\": \"Yellow Belt\",\n    \"fast-transport-belt\": \"Red Belt\",\n    \"express-transport-belt\": \"Blue Belt\",\n}\nexport const splitterTypes = {\n    \"transport-belt\": \"splitter\",\n    \"fast-transport-belt\": \"fast-splitter\",\n    \"express-transport-belt\": \"express-splitter\",\n}\nexport const beltSides: iBeltSides[] = [\"Both\", \"Right\", \"Left\"]\nexport const pumpSides: iPumpSides[] = [\"Right\", \"Left\"]\nexport const beltFlowDirections = [\"Front\", \"Back\", \"None\"]\nexport const refillFuelTypes: iRefillFuelTypes[] = [\n    \"wood\",\n    \"coal\",\n    \"solid-fuel\",\n    \"rocket-fuel\",\n    \"nuclear-fuel\",\n]\nexport const refillFuelTypesHuman = {\n    wood: \"Wood\",\n    coal: \"Coal\",\n    \"solid-fuel\": \"Solid Fuel\",\n    \"rocket-fuel\": \"Rocket Fuel\",\n    \"nuclear-fuel\": \"Nuclear Fuel\",\n}\n\nexport const stackerDiagonalTypes = [\"Left-Right\", \"Right-Left\"]\nexport const stackerTypes = [\"Left-Left\", \"Right-Right\", ...stackerDiagonalTypes]\n\nexport enum DIRECTION {\n    UP = 0,\n    RIGHT = 2,\n    DOWN = 4,\n    LEFT = 6,\n}\n\nexport const enabledConditionOperators: iEnabledConditionOperators[] = [\">\", \"<\"]\nexport const enabledConditionOperatorsHuman = { \">\": \"> (more than)\", \"<\": \"< (less than)\" }\n\nexport type iCombinator = \"arithmetic-combinator\" | \"decider-combinator\"\nexport const combinatorTypes: iCombinator[] = [\"arithmetic-combinator\", \"decider-combinator\"]\nexport type iOperator = \"+\" | \"-\" | \"*\" | \"/\" | \"^\" | \"%\" | \"<<\" | \">>\" | \"AND\" | \"OR\" | \"XOR\"\nexport const operatorTypes: iOperator[] = [\n    \"+\",\n    \"-\",\n    \"*\",\n    \"/\",\n    \"^\",\n    \"%\",\n    \"<<\",\n    \">>\",\n    \"AND\",\n    \"OR\",\n    \"XOR\",\n]\nexport const allowedCharacters = [\n    \"A\",\n    \"B\",\n    \"C\",\n    \"D\",\n    \"E\",\n    \"F\",\n    \"G\",\n    \"H\",\n    \"I\",\n    \"J\",\n    \"K\",\n    \"L\",\n    \"M\",\n    \"N\",\n    \"O\",\n    \"P\",\n    \"Q\",\n    \"R\",\n    \"S\",\n    \"T\",\n    \"U\",\n    \"V\",\n    \"W\",\n    \"X\",\n    \"Y\",\n    \"Z\",\n]\n\nexport const defaultSettings = {\n    // Global tooltip text\n    tooltipText: \"\",\n\n    // Station type\n    stationType: [...stationTypes][0],\n    stationName: \"\",\n\n    // Train limit and combinator settings\n    trainLimit: trainLimit[1],\n\n    trainLimitArithmetic1Constant1: \"each\",\n    trainLimitArithmetic1Constant2: \"333\",\n    trainLimitArithmetic1Operator: \"/\",\n\n    trainLimitArithmetic2Constant1: \"L\",\n    trainLimitArithmetic2Constant2: \"0\",\n    trainLimitArithmetic2Operator: \"+\",\n\n    trainLimitToAtMostOneTrain: true,\n    trainLimitStackSize: 50,\n\n    // Train type\n    doubleHeaded: true,\n    locomotivesPerEnd: \"1\",\n    cargoWagon: \"2\",\n    includeTrainInBlueprint: true,\n\n    // Pump Settings\n    pumpSidesToBeUsed: [...pumpSides][0],\n    pumpConnectWithPipe: true,\n    pumpStorageTankColumns: \"1\",\n\n    // Inserter types\n    inserterType: [...inserterTypes][1],\n    enableFilterInserters: false,\n    // Items that need to be filtered, max array length: 5\n    filterFields: Array(5).fill(\"\"),\n\n    // Chest types and settings\n    chestType: [...chestTypes][1],\n    // How many slots in the chest are enabled\n    chestLimit: \"\",\n    // For requester and buffer chests\n    chestRequestFromBuffers: true,\n    chestRequestItemsType: Array(12).fill(\"\"),\n    chestRequestItemsAmount: Array(12).fill(\"\"),\n\n    // Belt settings\n    beltType: [...beltTypes][1],\n    beltSidesUsed: [...beltSides][0],\n    beltFlowDirection: [...beltFlowDirections][0],\n\n    // Refill at station?\n    refillEnabled: true,\n    refillFuelType: [...refillFuelTypes][2],\n    refillFuelAmount: \"20\",\n\n    // Wire settings\n    connectChestsWithGreenWire: true,\n    connectBothSideWithGreenWire: true,\n    connectChestsWithRedWire: false,\n    connectBothSideWithRedWire: false,\n    madzuriEvenLoadUnload: true,\n\n    // Enabled condition:\n    trainStopUsesEnabledCondition: false,\n    enabledConditionOperator: [...enabledConditionOperators][0],\n    enabledConditionAmount: \"4000\",\n\n    // Lights\n    placeLampsNearPoles: false,\n\n    // Stacker settings\n    stackerNumberParallelLanes: \"3\",\n    diagonalStacker: true,\n    stackerType: [...stackerDiagonalTypes][0],\n}\n","import { defaultSettings, normalStation, fluidStation } from \"../constants/constants\"\nimport { iBlueprint, iBlueprintItem } from \"../constants/interfaces\"\nimport { createNormalStation } from \"./CreateNormalStation\"\nimport { createFluidStation } from \"./CreateFluidStation\"\nimport { createStacker } from \"./CreateStacker\"\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst zlib = require(\"zlib\")\n\nexport const createBlueprint = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    if (normalStation.includes(bpSettings.stationType)) {\n        return createNormalStation(bpSettings)\n    }\n    if (fluidStation.includes(bpSettings.stationType)) {\n        return createFluidStation(bpSettings)\n    } else if (bpSettings.stationType === \"Stacker\") {\n        return createStacker(bpSettings)\n    }\n    return []\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst decode = (blueprintString: string) => {\n    // UNTESTED stolen from https://github.com/demipixel/factorio-blueprint/blob/c21309e9023ee3740a5c3c647d87cb828ab3ecc4/src/util.ts#L20\n    return JSON.parse(\n        zlib.inflateSync(Buffer.from(blueprintString.slice(1), \"base64\")).toString(\"utf8\")\n    )\n}\n\nconst encode = (items: iBlueprintItem[]) => {\n    const blueprint = {\n        blueprint: {\n            icons: [\n                {\n                    signal: {\n                        type: \"item\",\n                        name: \"transport-belt\",\n                    },\n                    index: 1,\n                },\n            ],\n            entities: items,\n            item: \"blueprint\",\n            version: \"0\",\n            label: \"Blueprint\",\n        },\n    }\n    return \"0\" + zlib.deflateSync(JSON.stringify(blueprint), { level: 9 }).toString(\"base64\")\n}\n\nexport const createBlueprintString = (blueprint: iBlueprint): string => {\n    // Stolen from https://github.com/demipixel/factorio-blueprint/blob/c21309e9023ee3740a5c3c647d87cb828ab3ecc4/src/util.ts#L41\n    return encode(blueprint)\n}\n","import { botChestTypes, defaultSettings } from \"../constants/constants\"\nimport { iBlueprintItem } from \"../constants/interfaces\"\nimport {\n    placeChests,\n    mirrorItemsHorizontal,\n    mixSides,\n    sortByYPosition,\n    connectItemsWithWire,\n    connectTwoEntitiesWithWire,\n    placeInserters,\n    placeLoadingBelts,\n    placeUnloadingBelts,\n    placePoles,\n    placeTrainTracks,\n    placeSignals,\n    placeTrainStop,\n    placeRefuelChestsAndInserters,\n    placeTopRefuelPoles,\n    placeBottomRefuelPoles,\n    placeEnabledConditionDecider,\n    placeLamps,\n    placeSplitters,\n    changeItemsCoordinates,\n    placeTrain,\n    placeVerticalBelts,\n    resetEntityNumber,\n    placeDynamicTrainLimitCombinators,\n    placeMadzuriArithmeticCombinator,\n} from \"./CreateItems\"\n\nexport const createNormalStation = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    resetEntityNumber()\n    let allItems: iBlueprintItem[] = []\n    let rightSplitters: iBlueprintItem[] = []\n\n    // For each station, create all items, then shift them down\n    let stationItems: iBlueprintItem[] = []\n    // Create chests and connect them with wire\n    const rightChests = placeChests(bpSettings)\n    const leftChests = mirrorItemsHorizontal(rightChests)\n    const chests = mixSides(bpSettings.beltSidesUsed, leftChests, rightChests)\n    // Sorting not required?\n    sortByYPosition(rightChests)\n    sortByYPosition(leftChests)\n    if (bpSettings.connectChestsWithGreenWire) {\n        connectItemsWithWire(leftChests, \"green\")\n        connectItemsWithWire(rightChests, \"green\")\n    }\n    if (bpSettings.connectBothSideWithGreenWire && bpSettings.beltSidesUsed === \"Both\") {\n        connectTwoEntitiesWithWire(rightChests[0], leftChests[0], \"green\")\n    }\n    if (bpSettings.connectChestsWithRedWire) {\n        connectItemsWithWire(leftChests, \"red\")\n        connectItemsWithWire(rightChests, \"red\")\n    }\n    if (bpSettings.connectBothSideWithRedWire && bpSettings.beltSidesUsed === \"Both\") {\n        connectTwoEntitiesWithWire(rightChests[0], leftChests[0], \"red\")\n    }\n    const [rightInnerInserters, rightOuterInserters] = placeInserters(bpSettings)\n    const leftOuterInserters = mirrorItemsHorizontal(rightOuterInserters)\n    let madzuriRightArithmetic: iBlueprintItem[] = []\n    let madzuriLeftArithmetic: iBlueprintItem[] = []\n    if (bpSettings.madzuriEvenLoadUnload) {\n        sortByYPosition(leftOuterInserters)\n        sortByYPosition(rightOuterInserters)\n        sortByYPosition(leftChests)\n        sortByYPosition(rightChests)\n        // Place arithmetic combinator and connect input with chests, output with inserters\n        madzuriRightArithmetic = placeMadzuriArithmeticCombinator(\n            bpSettings,\n            \"Right\",\n            rightChests,\n            rightOuterInserters\n        )\n        madzuriLeftArithmetic = placeMadzuriArithmeticCombinator(\n            bpSettings,\n            \"Left\",\n            leftChests,\n            leftOuterInserters\n        )\n        // Connect all outer inserters with green\n        connectItemsWithWire(rightOuterInserters, \"green\")\n        connectItemsWithWire(leftOuterInserters, \"green\")\n    }\n\n    // Mirrorable items\n    let rightSideItems: iBlueprintItem[] = []\n    // Exclude belts and splitters (and without splitters: no vertical belts) if chest type uses bots\n    if (!botChestTypes.includes(bpSettings.chestType)) {\n        const newSplitters = placeSplitters(bpSettings)\n        rightSplitters = [...rightSplitters, ...newSplitters]\n        if (bpSettings.stationType === \"Loading Station\") {\n            rightSideItems = [...rightSideItems, ...placeLoadingBelts(bpSettings)]\n        } else {\n            // Unloading station\n            rightSideItems = [...rightSideItems, ...placeUnloadingBelts(bpSettings)]\n        }\n    }\n\n    rightSideItems = [...rightSideItems, ...rightInnerInserters]\n\n    const rightPoles = placePoles(bpSettings)\n    const leftPoles = mirrorItemsHorizontal(rightPoles)\n    const poles = mixSides(bpSettings.beltSidesUsed, leftPoles, rightPoles)\n    let leftSideItems: iBlueprintItem[] = mirrorItemsHorizontal(rightSideItems)\n\n    // Combine remaining items which were already mirrored and offset-ed\n    rightSideItems = [\n        ...rightSideItems,\n        ...rightPoles,\n        ...rightChests,\n        ...rightOuterInserters,\n        ...madzuriRightArithmetic,\n    ]\n    leftSideItems = [\n        ...leftSideItems,\n        ...leftPoles,\n        ...leftChests,\n        ...leftOuterInserters,\n        ...madzuriLeftArithmetic,\n    ]\n    if (bpSettings.placeLampsNearPoles) {\n        const rightLamps = placeLamps(bpSettings)\n        const leftLamps = mirrorItemsHorizontal(rightLamps)\n        rightSideItems = [...rightSideItems, ...rightLamps]\n        leftSideItems = [...leftSideItems, ...leftLamps]\n    }\n\n    // All items that need no mirroring (tracks, signals, train stops, refuel chests and inserter, poles for those, decider combinator)\n    stationItems = [...stationItems, ...placeTrainTracks(bpSettings)]\n    stationItems = [...stationItems, ...placeSignals(bpSettings)]\n    const trainStop = placeTrainStop(bpSettings)[0]\n    stationItems = [...stationItems, trainStop]\n    if (bpSettings.refillEnabled) {\n        // Place inserters, chests, and bottom poles\n        stationItems = [...stationItems, ...placeRefuelChestsAndInserters(bpSettings)]\n        stationItems = [...stationItems, ...placeBottomRefuelPoles(bpSettings)]\n    }\n    if (\n        bpSettings.refillEnabled ||\n        bpSettings.trainStopUsesEnabledCondition ||\n        bpSettings.trainLimit === \"Dynamic\"\n    ) {\n        // Place top poles if refil enabled\n        const topPoles = placeTopRefuelPoles(bpSettings)\n        stationItems = [...stationItems, ...topPoles]\n        sortByYPosition(poles)\n\n        // In enabled-condition: place decider\n        if (bpSettings.trainStopUsesEnabledCondition) {\n            stationItems = [\n                ...stationItems,\n                ...placeEnabledConditionDecider(bpSettings, poles[0], trainStop),\n            ]\n        }\n        // If dynamic train limit: place decider and arithmetic (2 arithmetic for unloading)\n        if (bpSettings.trainLimit === \"Dynamic\") {\n            const combinators = placeDynamicTrainLimitCombinators(bpSettings, poles[0], trainStop)\n            stationItems = [...stationItems, ...combinators]\n        }\n        // Connect top refill poles if enabled-condition or trainLimit=dynamic\n        if (bpSettings.trainStopUsesEnabledCondition || bpSettings.trainLimit === \"Dynamic\") {\n            // Connect top chest with top pole, and top pole with the top-refill-poles\n            sortByYPosition(chests)\n            const combineArray = [chests[0], poles[0], ...topPoles]\n            sortByYPosition(combineArray)\n            connectItemsWithWire(combineArray, \"green\")\n        }\n    }\n    if (bpSettings.includeTrainInBlueprint) {\n        stationItems = [...stationItems, ...placeTrain(bpSettings)]\n    }\n\n    // Combine left and right side items\n    stationItems = [\n        ...stationItems,\n        ...mixSides(bpSettings.beltSidesUsed, leftSideItems, rightSideItems),\n    ]\n\n    allItems = [...allItems, ...stationItems]\n\n    if (bpSettings.beltFlowDirection !== \"None\") {\n        const rightVerticalBelts = placeVerticalBelts(bpSettings, rightSplitters)\n        const leftVerticalBelts = mirrorItemsHorizontal(rightVerticalBelts)\n        allItems = [\n            ...allItems,\n            ...mixSides(bpSettings.beltSidesUsed, leftVerticalBelts, rightVerticalBelts),\n        ]\n    }\n    // Add splitters which were previously globally collected to create vertical belts\n    const leftSplitters = mirrorItemsHorizontal(rightSplitters)\n    allItems = [...allItems, ...mixSides(bpSettings.beltSidesUsed, leftSplitters, rightSplitters)]\n\n    const trainStops = allItems.filter((item) => {\n        return item.name === \"train-stop\"\n    })\n    const railSignals = allItems.filter((item) => {\n        return item.name === \"rail-signal\"\n    })\n    sortByYPosition(trainStops)\n    sortByYPosition(railSignals)\n    trainStops.slice(1).forEach((stop, i) => {\n        const signal = railSignals[i]\n        connectTwoEntitiesWithWire(stop, signal, \"green\")\n    })\n\n    // All items are off by 0.5, fix here\n    changeItemsCoordinates(allItems, -0.5)\n    return allItems\n}\n","import { defaultSettings } from \"../constants/constants\"\nimport { iBlueprintItem } from \"../constants/interfaces\"\nimport {\n    mirrorItemsHorizontal,\n    mixSides,\n    sortByYPosition,\n    connectItemsWithWire,\n    connectTwoEntitiesWithWire,\n    placePoles,\n    placeTrainTracks,\n    placeSignals,\n    placeTrainStop,\n    placeRefuelChestsAndInserters,\n    placeTopRefuelPoles,\n    placeBottomRefuelPoles,\n    placeEnabledConditionDecider,\n    placeLamps,\n    changeItemsCoordinates,\n    placeTrain,\n    resetEntityNumber,\n    placeStorageTanks,\n    placePumps,\n    placePipes,\n    placeDynamicTrainLimitCombinators,\n    sortStorageTanks,\n} from \"./CreateItems\"\n\nexport const createFluidStation = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    resetEntityNumber()\n    let allItems: iBlueprintItem[] = []\n\n    // For each station, create all items, then shift them down\n    let stationItems: iBlueprintItem[] = []\n    // Sorting not required?\n    let rightStorageTanks: iBlueprintItem[] = placeStorageTanks(bpSettings)\n    let leftStorageTanks: iBlueprintItem[] = mirrorItemsHorizontal(rightStorageTanks)\n    rightStorageTanks = sortStorageTanks(rightStorageTanks)\n    leftStorageTanks = sortStorageTanks(leftStorageTanks, 1)\n    if (bpSettings.connectChestsWithGreenWire) {\n        connectItemsWithWire(leftStorageTanks, \"green\")\n        connectItemsWithWire(rightStorageTanks, \"green\")\n    }\n    if (bpSettings.connectChestsWithRedWire) {\n        connectItemsWithWire(leftStorageTanks, \"red\")\n        connectItemsWithWire(rightStorageTanks, \"red\")\n    }\n\n    // Mirrorable items\n    let rightSideItems: iBlueprintItem[] = []\n\n    const rightPoles = placePoles(bpSettings)\n    const leftPoles = mirrorItemsHorizontal(rightPoles)\n    const poles = mixSides(bpSettings.pumpSidesToBeUsed, leftPoles, rightPoles)\n    let leftSideItems: iBlueprintItem[] = mirrorItemsHorizontal(rightSideItems)\n    const rightPumps = placePumps(bpSettings)\n    const leftPumps = mirrorItemsHorizontal(rightPumps)\n    const rightPipes = placePipes(bpSettings)\n    const leftPipes = mirrorItemsHorizontal(rightPipes)\n\n    // Combine remaining items which were already mirrored and offset-ed\n    if (bpSettings.placeLampsNearPoles) {\n        const rightLamps = placeLamps(bpSettings)\n        const leftLamps = mirrorItemsHorizontal(rightLamps)\n        rightSideItems = [...rightSideItems, ...rightLamps]\n        leftSideItems = [...leftSideItems, ...leftLamps]\n    }\n    rightSideItems = [...rightSideItems, ...rightPoles, ...rightPumps, ...rightPipes]\n    leftSideItems = [...leftSideItems, ...leftPoles, ...leftPumps, ...leftPipes]\n\n    // All items that need no mirroring (tracks, signals, train stops, refuel chests and inserter, poles for those, decider combinator)\n    stationItems = [...stationItems, ...placeTrainTracks(bpSettings)]\n    stationItems = [...stationItems, ...placeSignals(bpSettings)]\n    const trainStop = placeTrainStop(bpSettings)[0]\n    stationItems = [...stationItems, trainStop]\n    if (bpSettings.refillEnabled) {\n        stationItems = [...stationItems, ...placeRefuelChestsAndInserters(bpSettings)]\n        const bottomPoles = placeBottomRefuelPoles(bpSettings)\n        stationItems = [...stationItems, ...bottomPoles]\n    }\n    if (\n        bpSettings.refillEnabled ||\n        bpSettings.trainStopUsesEnabledCondition ||\n        bpSettings.trainLimit === \"Dynamic\"\n    ) {\n        const topPoles = placeTopRefuelPoles(bpSettings)\n        stationItems = [...stationItems, ...topPoles]\n        sortByYPosition(poles)\n\n        // In enabled-condition: place decider\n        if (bpSettings.trainStopUsesEnabledCondition) {\n            stationItems = [\n                ...stationItems,\n                ...placeEnabledConditionDecider(bpSettings, poles[0], trainStop),\n            ]\n        }\n\n        // If dynamic train limit: place decider and arithmetic (2 arithmetic for unloading)\n        if (bpSettings.trainLimit === \"Dynamic\") {\n            const combinators = placeDynamicTrainLimitCombinators(bpSettings, poles[0], trainStop)\n            stationItems = [...stationItems, ...combinators]\n        }\n\n        // Connect top refill poles if enabled-condition or trainLimit=dynamic\n        if (bpSettings.trainStopUsesEnabledCondition || bpSettings.trainLimit === \"Dynamic\") {\n            // Connect top chest with top pole, and top pole with the top-refill-poles\n            const storageTanks = mixSides(\n                bpSettings.pumpSidesToBeUsed,\n                leftStorageTanks,\n                rightStorageTanks\n            )\n            const combineArray = [storageTanks[0], poles[0], ...topPoles]\n            sortByYPosition(combineArray)\n            connectItemsWithWire(combineArray, \"green\")\n        }\n    }\n    if (bpSettings.includeTrainInBlueprint) {\n        stationItems = [...stationItems, ...placeTrain(bpSettings)]\n    }\n\n    // Combine left and right side items\n    stationItems = [\n        ...stationItems,\n        ...mixSides(bpSettings.pumpSidesToBeUsed, leftSideItems, rightSideItems),\n        ...mixSides(bpSettings.pumpSidesToBeUsed, leftStorageTanks, rightStorageTanks),\n    ]\n\n    allItems = [...allItems, ...stationItems]\n\n    const trainStops = allItems.filter((item) => {\n        return item.name === \"train-stop\"\n    })\n    const railSignals = allItems.filter((item) => {\n        return item.name === \"rail-signal\"\n    })\n    sortByYPosition(trainStops)\n    sortByYPosition(railSignals)\n    trainStops.slice(1).forEach((stop, i) => {\n        const signal = railSignals[i]\n        connectTwoEntitiesWithWire(stop, signal, \"green\")\n    })\n\n    // All items are off by 0.5, fix here\n    changeItemsCoordinates(allItems, -0.5)\n    return allItems\n}\n","import { iBlueprintItemWithoutNumber } from \"./interfaces\"\n\n// (0, 0) bending left 90 degrees to (-1, 1) curve\nexport const frontLeftCurve: iBlueprintItemWithoutNumber[] = [\n    {\n        name: \"curved-rail\",\n        position: {\n            x: 0,\n            y: 0,\n        },\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -4,\n            y: -4,\n        },\n        direction: 1,\n    },\n    {\n        name: \"curved-rail\",\n        position: {\n            x: -6,\n            y: -6,\n        },\n        direction: 3,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -11,\n            y: -8,\n        },\n        direction: 2,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -13,\n            y: -8,\n        },\n        direction: 2,\n    },\n]\n// (0, 0) bending right 90 degrees to (1, 1) curve\nexport const frontRightCurve: iBlueprintItemWithoutNumber[] = [\n    {\n        name: \"curved-rail\",\n        position: {\n            x: 2,\n            y: 0,\n        },\n        direction: 1,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: 5,\n            y: -5,\n        },\n        direction: 7,\n    },\n    {\n        name: \"curved-rail\",\n        position: {\n            x: 8,\n            y: -6,\n        },\n        direction: 6,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: 13,\n            y: -9,\n        },\n        direction: 2,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: 15,\n            y: -9,\n        },\n        direction: 2,\n    },\n]\n// (-1, -1) bending left 90 degreses to (0, 0)  curve\nexport const backLeftCurve: iBlueprintItemWithoutNumber[] = [\n    {\n        name: \"curved-rail\",\n        position: {\n            x: 0,\n            y: 6,\n        },\n        direction: 5,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -3,\n            y: 7,\n        },\n        direction: 3,\n    },\n    {\n        name: \"curved-rail\",\n        position: {\n            x: -6,\n            y: 12,\n        },\n        direction: 2,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -11,\n            y: 11,\n        },\n        direction: 2,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -13,\n            y: 11,\n        },\n        direction: 2,\n    },\n]\n// (1, -1) bending right 90 degreses to (0, 0)  curve\nexport const backRightCurve: iBlueprintItemWithoutNumber[] = [\n    {\n        name: \"curved-rail\",\n        position: {\n            x: 2,\n            y: 5,\n        },\n        direction: 4,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: 5,\n            y: 7,\n        },\n        direction: 5,\n    },\n    {\n        name: \"curved-rail\",\n        position: {\n            x: 8,\n            y: 11,\n        },\n        direction: 7,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: 13,\n            y: 11,\n        },\n        direction: 2,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: 15,\n            y: 11,\n        },\n        direction: 2,\n    },\n]\n","import { iBlueprintItemWithoutNumber } from \"./interfaces\"\n\n// (0, 0) bending left 45 degrees to (-1, 2) curve\n// The diagonal should be a bottomright-to-topright diagonal with the ending rail piece being the topleft piece\nexport const diagonalFrontLeftCurve: iBlueprintItemWithoutNumber[] = [\n    {\n        name: \"curved-rail\",\n        position: {\n            x: 0,\n            y: 0,\n        },\n        direction: 5,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -1,\n            y: -7,\n        },\n        direction: 0,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -1,\n            y: -9,\n        },\n        direction: 0,\n    },\n    {\n        name: \"rail-chain-signal\",\n        position: {\n            x: -3.5,\n            y: 4.5,\n        },\n        direction: 5,\n    },\n]\n// (0, 0) bending right 45 degrees to (2, 1) curve\n// The diagonal should be a bottomright-to-topright diagonal with the ending rail piece being the topleft piece\nexport const diagonalFrontRightCurve: iBlueprintItemWithoutNumber[] = [\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -3,\n            y: 2,\n        },\n        direction: 7,\n    },\n    {\n        name: \"curved-rail\",\n        position: {\n            x: 2,\n            y: 0,\n        },\n        direction: 6,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: 5,\n            y: -3,\n        },\n        direction: 2,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: 7,\n            y: -3,\n        },\n        direction: 2,\n    },\n    {\n        name: \"rail-chain-signal\",\n        position: {\n            x: -0.5,\n            y: 1.5,\n        },\n        direction: 5,\n    },\n]\n// (-2, -1) bending left 45 degreses to (0, 0) curve\nexport const diagonalBackLeftCurve: iBlueprintItemWithoutNumber[] = [\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -9 - 6,\n            y: 9 - 4,\n        },\n        direction: 2,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -7 - 6,\n            y: 9 - 4,\n        },\n        direction: 2,\n    },\n    {\n        name: \"curved-rail\",\n        position: {\n            x: -6,\n            y: 6,\n        },\n        direction: 2,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -5,\n            y: 1,\n        },\n        direction: 3,\n    },\n    {\n        name: \"rail-signal\",\n        position: {\n            x: -3.5 + 2,\n            y: 4.5 - 2,\n        },\n        direction: 5,\n    },\n]\n// (1, -2) bending right 45 degreses to (0, 0) curve\nexport const diagonalBackRightCurve: iBlueprintItemWithoutNumber[] = [\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -1 - 6,\n            y: 9,\n        },\n        direction: 0,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -1 - 6,\n            y: 11,\n        },\n        direction: 0,\n    },\n    {\n        name: \"curved-rail\",\n        position: {\n            x: -4,\n            y: 6,\n        },\n        direction: 1,\n    },\n    {\n        name: \"rail-signal\",\n        position: {\n            x: -2.5,\n            y: 3.5,\n        },\n        direction: 5,\n    },\n]\n","import { defaultSettings } from \"../constants/constants\"\nimport { iBlueprintItem, iBlueprintItemWithoutNumber } from \"../constants/interfaces\"\nimport {\n    getTrainArray,\n    placeTrainTracks,\n    placeSignals,\n    changeItemsCoordinates,\n    placeTrain,\n    resetEntityNumber,\n    assignEntityNumberToItems,\n    copyPasteItems,\n    newItem,\n} from \"./CreateItems\"\nimport {\n    backLeftCurve,\n    backRightCurve,\n    frontLeftCurve,\n    frontRightCurve,\n} from \"../constants/verticalStackerCurves\"\nimport {\n    diagonalBackLeftCurve,\n    diagonalBackRightCurve,\n    diagonalFrontLeftCurve,\n    diagonalFrontRightCurve,\n} from \"../constants/diagonalStackerCurves\"\n\nexport const createStacker = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    resetEntityNumber()\n    if (bpSettings.diagonalStacker) {\n        return createDiagonalStacker(bpSettings)\n    } else {\n        return createVerticalStacker(bpSettings)\n    }\n}\n\nexport const createVerticalStacker = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    const trainLength = Math.floor(getTrainArray(bpSettings).length / 2) * 2\n    const doubleHeadedFactor = bpSettings.doubleHeaded ? 2 : 1\n    const trainAmount =\n        doubleHeadedFactor * parseInt(bpSettings.locomotivesPerEnd) +\n        parseInt(bpSettings.cargoWagon)\n    const backEndYOffset = trainAmount % 2 === 1 ? 2 : 0\n    const parallelTracks = parseInt(bpSettings.stackerNumberParallelLanes)\n\n    let frontCurve: iBlueprintItem[]\n    let backCurve: iBlueprintItem[]\n    let entranceChainSignal: iBlueprintItem\n    if (bpSettings.stackerType === \"Left-Left\" || bpSettings.stackerType === \"Right-Left\") {\n        frontCurve = assignEntityNumberToItems(frontLeftCurve, -2, -8)\n    } else {\n        frontCurve = assignEntityNumberToItems(frontRightCurve, -2, -8)\n    }\n\n    if (bpSettings.stackerType === \"Left-Left\" || bpSettings.stackerType === \"Left-Right\") {\n        backCurve = assignEntityNumberToItems(backLeftCurve, -2, trainLength - 2 + backEndYOffset)\n        entranceChainSignal = newItem(\n            \"rail-chain-signal\",\n            15.5 - 28,\n            11.5 + trainLength + backEndYOffset,\n            {\n                direction: 6,\n            }\n        )\n    } else {\n        backCurve = assignEntityNumberToItems(backRightCurve, -2, trainLength - 2 + backEndYOffset)\n        entranceChainSignal = newItem(\n            \"rail-chain-signal\",\n            13.5 - 9 + 4 * parallelTracks,\n            8.5 + trainLength + backEndYOffset,\n            { direction: 2 }\n        )\n    }\n\n    let copyPasteBlueprint = [\n        ...placeTrainTracks(bpSettings),\n        ...placeSignals(bpSettings),\n        ...frontCurve,\n        ...backCurve,\n    ]\n    if (bpSettings.includeTrainInBlueprint)\n        copyPasteBlueprint = [...copyPasteBlueprint, ...placeTrain(bpSettings)]\n    changeItemsCoordinates(copyPasteBlueprint, -0.5)\n\n    let allItems: iBlueprintItem[] = []\n    for (let i = 0; i < parallelTracks; i++) {\n        allItems = [...allItems, ...copyPasteItems(copyPasteBlueprint, i * 4)]\n    }\n    allItems = [...allItems, entranceChainSignal]\n\n    return allItems\n}\n\nexport const createDiagonalStacker = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    const doubleHeadedFactor = bpSettings.doubleHeaded ? 2 : 1\n    // const trainAmount = doubleHeadedFactor * parseInt(bpSettings.locomotivesPerEnd) + parseInt(bpSettings.cargoWagon)\n    // const backEndYOffset = (trainAmount % 2 === 0)? -2 : 0\n    const diagonalLength =\n        Math.round(\n            (2.5 *\n                (doubleHeadedFactor * parseInt(bpSettings.locomotivesPerEnd) +\n                    parseInt(bpSettings.cargoWagon))) /\n                2\n        ) *\n            2 +\n        1\n    const parallelTracks = parseInt(bpSettings.stackerNumberParallelLanes)\n\n    const validTypes = [\"Left-Right\", \"Right-Left\"]\n    const stackerType = validTypes.includes(bpSettings.stackerType)\n        ? bpSettings.stackerType\n        : validTypes[0]\n\n    let frontCurve: iBlueprintItem[]\n    let backCurve: iBlueprintItem[]\n    let entranceChainSignal: iBlueprintItem\n    if (stackerType === \"Left-Right\") {\n        frontCurve = assignEntityNumberToItems(diagonalFrontRightCurve, 8)\n        backCurve = assignEntityNumberToItems(\n            diagonalBackLeftCurve,\n            8 - diagonalLength * 2,\n            diagonalLength * 2\n        )\n        entranceChainSignal = newItem(\n            \"rail-chain-signal\",\n            -2.5 - diagonalLength * 2,\n            7.5 + diagonalLength * 2,\n            { direction: 6 }\n        )\n    } else {\n        frontCurve = assignEntityNumberToItems(diagonalFrontLeftCurve, 8)\n        backCurve = assignEntityNumberToItems(\n            diagonalBackRightCurve,\n            8 - diagonalLength * 2,\n            diagonalLength * 2\n        )\n        entranceChainSignal = newItem(\n            \"rail-chain-signal\",\n            3.5 - diagonalLength * 2,\n            4.5 + diagonalLength * 2 + 4 * parallelTracks,\n            { direction: 4 }\n        )\n    }\n\n    const diagonals: iBlueprintItemWithoutNumber[] = [\n        {\n            name: \"straight-rail\",\n            position: { x: 3, y: 3 },\n            direction: 7,\n        },\n        {\n            name: \"straight-rail\",\n            position: { x: 3, y: 1 },\n            direction: 3,\n        },\n    ]\n\n    let copyPasteBlueprint: iBlueprintItem[] = []\n    for (let i = 0; i < diagonalLength; i++) {\n        const newDiagonals = assignEntityNumberToItems(diagonals, -i * 2, i * 2)\n        copyPasteBlueprint = [...copyPasteBlueprint, ...newDiagonals]\n    }\n    copyPasteBlueprint = [...copyPasteBlueprint, ...frontCurve, ...backCurve]\n\n    let allItems: iBlueprintItem[] = []\n\n    for (let i = 0; i < parallelTracks; i++) {\n        if (stackerType === \"Left-Right\") {\n            allItems = [...allItems, ...copyPasteItems(copyPasteBlueprint, i * 4, 0)]\n        } else {\n            allItems = [...allItems, ...copyPasteItems(copyPasteBlueprint, 0, i * 4)]\n        }\n    }\n    allItems = [...allItems, entranceChainSignal]\n\n    return allItems\n}\n"],"sourceRoot":""}