{"version":3,"sources":["constants/constants.ts","BlueprintCreation/CreateItems.ts","BlueprintCreation/CreateBlueprint.ts","BlueprintCreation/CreateNormalStation.ts","BlueprintCreation/CreateFluidStation.ts","constants/verticalStackerCurves.ts","constants/diagonalStackerCurves.ts","BlueprintCreation/CreateStacker.ts","css/classes.ts","constants/tooltips.tsx","components/Sections/TrainTypeSettings.tsx","components/Sections/InserterSettings.tsx","components/Sections/ChestTypeSettings.tsx","components/Sections/BeltTypeSettings.tsx","components/Sections/RefillSettings.tsx","components/Sections/WireSettings.tsx","components/Sections/EnabledConditionSettings.tsx","components/Sections/LampsSettings.tsx","components/Sections/StationNameSettings.tsx","constants/helper.ts","components/Sections/StationSettings.tsx","components/StationTypes/NormalStation.tsx","components/Sections/FluidSettings.tsx","components/StationTypes/FluidStation.tsx","components/Title.tsx","components/Footer.tsx","components/Sections/StackerSettings.tsx","components/StationTypes/Stacker.tsx","components/WarningMessage.tsx","components/ErrorMessage.tsx","components/Website.tsx","components/MyRouter.tsx","App.tsx","index.tsx"],"names":["DIRECTION","mirrorXOffset","stationTypes","normalStation","fluidStation","trainLimit","inserterTypes","inserterTypesHuman","inserter","filterInserters","botChestTypes","chestTypes","requestChestTypes","chestTypesHuman","beltTypes","beltTypesHuman","splitterTypes","beltSides","pumpSides","beltFlowDirections","refillFuelTypes","refillFuelTypesHuman","wood","coal","stackerDiagonalTypes","stackerTypes","enabledConditionOperators","enabledConditionOperatorsHuman","operatorTypes","allowedCharacters","defaultSettings","tooltipText","stationType","stationName","trainLimitArithmetic1Constant1","trainLimitArithmetic1Constant2","trainLimitArithmetic1Operator","trainLimitArithmetic2Constant1","trainLimitArithmetic2Constant2","trainLimitArithmetic2Operator","doubleHeaded","locomotivesPerEnd","cargoWagon","includeTrainInBlueprint","pumpSidesToBeUsed","pumpConnectWithPipe","pumpStorageTankColumns","inserterType","enableFilterInserters","filterFields","Array","fill","chestType","chestLimit","chestRequestFromBuffers","chestRequestItemsType","chestRequestItemsAmount","beltType","beltSidesUsed","beltFlowDirection","refillEnabled","refillFuelType","refillFuelAmount","connectChestsWithGreenWire","connectBothSideWithGreenWire","connectChestsWithRedWire","connectBothSideWithRedWire","trainStopUsesEnabledCondition","enabledConditionOperator","enabledConditionAmount","placeLampsNearPoles","stackerNumberParallelLanes","diagonalStacker","stackerType","cloneDeep","require","entityNumber","resetEntityNumber","newItem","itemName","x","y","options","item","entity_number","name","position","direction","orientation","bar","filters","request_filters","request_from_buffers","control_behavior","station","manual_trains_limit","trains_limit_signal","assignEntityNumberToItems","items","xOffset","yOffset","map","getTrainArray","bpSettings","startOffset","bottomOffset","returnArray","i","parseInt","push","getFrontLocomotivesArray","getBackLocomotivesArray","getCargoArray","placeTrainTracks","forEach","placeSignals","singleHeadedOffset","end","start","DOWN","UP","placeTrainStop","undefined","controlBehavior","circuit_enable_disable","circuit_condition","first_signal","type","constant","comparator","set_trains_limit","placeTrain","count","locoCount","cargoCount","includes","placeInserters","filterArray","inserterDirection","RIGHT","LEFT","index","placeChests","isRequesterChest","requests","itemType","itemAmount","requestFromBuffers","length","placeLoadingBelts","placeUnloadingBelts","placePumps","pumpDirection","placeStorageTanks","tankDirection","placePipes","array","j","Math","floor","placeVerticalBelts","splitters","mode","beltEnd","sortByYPosition","splitter","reverse","placeSplitters","splitterType","splitterDirection","placePoles","placeLamps","placeEnabledConditionDecider","topPole","trainStop","decider","decider_conditions","output_signal","copy_count_from_input","connectTwoEntitiesWithWire","placeDynamicTrainLimitCombinators","arithmetic1Xvalue","arithmetic2Xvalue","arithmeticXOffset","arithmetic1Condition","operation","arithmetic1","arithmetic_conditions","arithmetic2Condition","arithmetic2","placeTopRefuelPoles","placeBottomRefuelPoles","placeRefuelChestsAndInserters","entity1","entity2","color","entity1ConNumber","entity2ConNumber","circuit1Number","circuit2Number","entity1Number","entity2Number","createWirePath","entity","conNumber","connections","entityColor","conn1","entity_id","conn2","circuit_id","connectItemsWithWire","item1","item2","mirrorItemsHorizontal","copy","changeItemsCoordinates","copyPasteItems","clone","mixSides","sidesUsed","leftArray","rightArray","console","assert","sort","a","b","sortStorageTanks","rowCount","rowItems","zlib","createBlueprint","createNormalStation","createFluidStation","createStacker","createBlueprintString","blueprint","icons","signal","entities","version","label","deflateSync","JSON","stringify","level","toString","encode","allItems","rightSplitters","stationItems","rightChests","leftChests","chests","rightSideItems","newSplitters","rightPoles","leftPoles","poles","leftSideItems","rightLamps","leftLamps","topPoles","combinators","combineArray","rightVerticalBelts","leftVerticalBelts","leftSplitters","trainStops","filter","railSignals","slice","stop","rightStorageTanks","leftStorageTanks","rightPumps","leftPumps","rightPipes","leftPipes","bottomPoles","frontLeftCurve","frontRightCurve","backLeftCurve","backRightCurve","diagonalFrontLeftCurve","diagonalFrontRightCurve","diagonalBackLeftCurve","diagonalBackRightCurve","createDiagonalStacker","createVerticalStacker","frontCurve","backCurve","trainLength","copyPasteBlueprint","doubleHeadedFactor","diagonalLength","round","diagonals","newDiagonals","CLASSES","TOOLTIPS","trainLimitNumberInput","beltFlow","TrainTypeSettings","props","hideIfDiagonalStacker","userSettings","cargoWagonName","className","min","id","data-tip","checked","onChange","e","setUserSettings","target","htmlFor","value","hidden","InserterSettings","inserterSelect","isFilterInserter","newFilterInputField","list","placeholder","oldArray","newValue","setValueAtIndex","previousIsEmpty","filterInserterInputFields","_","ChestTypeSettings","chestTypesHtml","canRequestFromBufferChests","chestRequests","BeltTypeSettings","hideIfBotChests","beltTypesHtml","beltSideHtml","beltSide","beltFlowHtml","RefillSettings","fuelTypesHtml","fuelType","WireSettings","hiddenWhenNormalStation","hiddenWhenFluidStation","hiddenWhenNotBothSides","myCheckbox","keyName","EnabledConditionSettings","hideIfCheckboxDisabled","enabledConditionOperatorHtml","operator","LampsSettings","StationNameSettings","verifyNumberInput","myInput","isNaN","calcCombinatorSettings","stackSize","sidesFactor","totalChestCount","connectedChestCount","chestSlotsCount","chestTotalItemCount","trainSlotsCount","trainTotalItemCount","StationSettings","hideWhenTrainLimitIsNotDynamic","hideWhenNormalStation","hideWhenFluidStation","key","mySelectOperator","trainLimitHtml","optionStr","applyArray","combinatorArray","onClick","NormalStation","FluidSettings","pumpSideHtml","pumpSide","FluidStation","Title","Footer","rel","href","StackerSettings","stackerTypesHtml","Stacker","WarningMessage","warningMessage","ErrorMessage","errorMessage","Website","useState","blueprintString","setBlueprintString","setWarningMessage","setErrorMessage","useEffect","newWarningMessage","newErrorMessage","numberAsString","validateBlueprintSettings","stationTypeSelect","stationTypeHtml","itemdatalist","itemlist","itemInfo","readOnly","debug","message","place","multiline","MyRouter","path","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6eb764a4.chunk.js","sourcesContent":["import {\n    iBeltSides,\n    iBeltTypes,\n    iChestTypes,\n    iEnabledConditionOperators,\n    iInserterTypes,\n    iPumpSides,\n    iRefillFuelTypes,\n} from \"./interfaces\"\n\nexport const mirrorXOffset = -3\n\nexport type iStationType =\n    | \"Loading Station\"\n    | \"Unloading Station\"\n    | \"Fluid Loading Station\"\n    | \"Fluid Unloading Station\"\n    | \"Stacker\"\nexport const stationTypes: iStationType[] = [\n    \"Loading Station\",\n    \"Unloading Station\",\n    \"Fluid Loading Station\",\n    \"Fluid Unloading Station\",\n    \"Stacker\",\n]\nexport const normalStation: iStationType[] = [\"Loading Station\", \"Unloading Station\"]\nexport const fluidStation: iStationType[] = [\"Fluid Loading Station\", \"Fluid Unloading Station\"]\nexport const trainLimit = [\"Disabled\", \"Dynamic\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]\n\nexport const inserterTypes: iInserterTypes[] = [\"inserter\", \"fast-inserter\", \"stack-inserter\"]\nexport const inserterTypesHuman = {\n    inserter: \"Inserter\",\n    \"fast-inserter\": \"Fast Inserter\",\n    \"stack-inserter\": \"Stack Inserter\",\n}\nexport const filterInserters = {\n    inserter: \"filter-inserter\",\n    \"fast-inserter\": \"filter-inserter\",\n    \"stack-inserter\": \"filter-inserter\",\n}\nexport const basicChestTypes: iChestTypes[] = [\"wooden-chest\", \"iron-chest\", \"steel-chest\"]\nexport const botChestTypes: iChestTypes[] = [\n    \"logistic-chest-requester\",\n    \"logistic-chest-buffer\",\n    \"logistic-chest-passive-provider\",\n    \"logistic-chest-active-provider\",\n    \"logistic-chest-storage\",\n]\nexport const chestTypes: iChestTypes[] = [...basicChestTypes, ...botChestTypes]\nexport const requestChestTypes: iChestTypes[] = [\n    \"logistic-chest-requester\",\n    \"logistic-chest-buffer\",\n]\nexport const chestTypesHuman = {\n    \"wooden-chest\": \"Wooden Chest\",\n    \"iron-chest\": \"Iron Chest\",\n    \"steel-chest\": \"Steel Chest\",\n    \"logistic-chest-requester\": \"Requester Chest\",\n    \"logistic-chest-buffer\": \"Buffer Chest\",\n    \"logistic-chest-passive-provider\": \"Passive Provider Chest\",\n    \"logistic-chest-active-provider\": \"Active Provider Chest\",\n    \"logistic-chest-storage\": \"Storage Chest\",\n}\nexport const beltTypes: iBeltTypes[] = [\n    \"transport-belt\",\n    \"fast-transport-belt\",\n    \"express-transport-belt\",\n]\nexport const beltTypesHuman = {\n    \"transport-belt\": \"Yellow Belt\",\n    \"fast-transport-belt\": \"Red Belt\",\n    \"express-transport-belt\": \"Blue Belt\",\n}\nexport const splitterTypes = {\n    \"transport-belt\": \"splitter\",\n    \"fast-transport-belt\": \"fast-splitter\",\n    \"express-transport-belt\": \"express-splitter\",\n}\nexport const beltSides: iBeltSides[] = [\"Both\", \"Right\", \"Left\"]\nexport const pumpSides: iPumpSides[] = [\"Right\", \"Left\"]\nexport const beltFlowDirections = [\"Front\", \"Back\", \"None\"]\nexport const refillFuelTypes: iRefillFuelTypes[] = [\n    \"wood\",\n    \"coal\",\n    \"solid-fuel\",\n    \"rocket-fuel\",\n    \"nuclear-fuel\",\n]\nexport const refillFuelTypesHuman = {\n    wood: \"Wood\",\n    coal: \"Coal\",\n    \"solid-fuel\": \"Solid Fuel\",\n    \"rocket-fuel\": \"Rocket Fuel\",\n    \"nuclear-fuel\": \"Nuclear Fuel\",\n}\n\nexport const stackerDiagonalTypes = [\"Left-Right\", \"Right-Left\"]\nexport const stackerTypes = [\"Left-Left\", \"Right-Right\", ...stackerDiagonalTypes]\n\nexport enum DIRECTION {\n    UP = 0,\n    RIGHT = 2,\n    DOWN = 4,\n    LEFT = 6,\n}\n\nexport const enabledConditionOperators: iEnabledConditionOperators[] = [\">\", \"<\"]\nexport const enabledConditionOperatorsHuman = { \">\": \"> (more than)\", \"<\": \"< (less than)\" }\n\nexport type iCombinator = \"arithmetic-combinator\" | \"decider-combinator\"\nexport const combinatorTypes: iCombinator[] = [\"arithmetic-combinator\", \"decider-combinator\"]\nexport type iOperator = \"+\" | \"-\" | \"*\" | \"/\" | \"^\" | \"%\" | \"<<\" | \">>\" | \"AND\" | \"OR\" | \"XOR\"\nexport const operatorTypes: iOperator[] = [\n    \"+\",\n    \"-\",\n    \"*\",\n    \"/\",\n    \"^\",\n    \"%\",\n    \"<<\",\n    \">>\",\n    \"AND\",\n    \"OR\",\n    \"XOR\",\n]\nexport const allowedCharacters = [\n    \"A\",\n    \"B\",\n    \"C\",\n    \"D\",\n    \"E\",\n    \"F\",\n    \"G\",\n    \"H\",\n    \"I\",\n    \"J\",\n    \"K\",\n    \"L\",\n    \"M\",\n    \"N\",\n    \"O\",\n    \"P\",\n    \"Q\",\n    \"R\",\n    \"S\",\n    \"T\",\n    \"U\",\n    \"V\",\n    \"W\",\n    \"X\",\n    \"Y\",\n    \"Z\",\n]\n\nexport const defaultSettings = {\n    // Global tooltip text\n    tooltipText: \"\",\n\n    // Station type\n    stationType: [...stationTypes][0],\n    stationName: \"\",\n\n    // Train limit and combinator settings\n    trainLimit: trainLimit[0],\n\n    trainLimitArithmetic1Constant1: \"each\",\n    trainLimitArithmetic1Constant2: \"333\",\n    trainLimitArithmetic1Operator: \"/\",\n\n    trainLimitArithmetic2Constant1: \"L\",\n    trainLimitArithmetic2Constant2: \"0\",\n    trainLimitArithmetic2Operator: \"+\",\n\n    // Train type\n    doubleHeaded: true,\n    locomotivesPerEnd: \"1\",\n    cargoWagon: \"2\",\n    includeTrainInBlueprint: true,\n\n    // Pump Settings\n    pumpSidesToBeUsed: [...pumpSides][0],\n    pumpConnectWithPipe: true,\n    pumpStorageTankColumns: \"1\",\n\n    // Inserter types\n    inserterType: [...inserterTypes][1],\n    enableFilterInserters: false,\n    // Items that need to be filtered, max array length: 5\n    filterFields: Array(5).fill(\"\"),\n\n    // Chest types and settings\n    chestType: [...chestTypes][1],\n    // How many slots in the chest are enabled\n    chestLimit: \"7\",\n    // For requester and buffer chests\n    chestRequestFromBuffers: true,\n    chestRequestItemsType: Array(12).fill(\"\"),\n    chestRequestItemsAmount: Array(12).fill(\"\"),\n\n    // Belt settings\n    beltType: [...beltTypes][1],\n    beltSidesUsed: [...beltSides][0],\n    beltFlowDirection: [...beltFlowDirections][0],\n\n    // Refill at station?\n    refillEnabled: true,\n    refillFuelType: [...refillFuelTypes][2],\n    refillFuelAmount: \"20\",\n\n    // Wire settings\n    connectChestsWithGreenWire: true,\n    connectBothSideWithGreenWire: true,\n    connectChestsWithRedWire: false,\n    connectBothSideWithRedWire: false,\n\n    // Enabled condition:\n    trainStopUsesEnabledCondition: false,\n    enabledConditionOperator: [...enabledConditionOperators][0],\n    enabledConditionAmount: \"4000\",\n\n    // Lights\n    placeLampsNearPoles: false,\n\n    // Stacker settings\n    stackerNumberParallelLanes: \"3\",\n    diagonalStacker: true,\n    stackerType: [...stackerTypes][0],\n}\n","import {\n    iArithmeticCondition,\n    iBlueprintItem,\n    iBlueprintItemWithoutNumber,\n    iCircuitConnection,\n    iOptions,\n    iTrainStopControlBehavior,\n    iWireColor,\n} from \"../constants/interfaces\"\nimport {\n    allowedCharacters,\n    botChestTypes,\n    defaultSettings,\n    DIRECTION,\n    filterInserters,\n    fluidStation,\n    mirrorXOffset,\n    normalStation,\n    requestChestTypes,\n    splitterTypes,\n} from \"../constants/constants\"\n\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst cloneDeep = require(\"clone-deep\")\n\nexport let entityNumber = 1\nexport let circuitNumber = 1\nexport const resetEntityNumber = (): void => {\n    entityNumber = 1\n    circuitNumber = 1\n}\n\nexport const newItem = (\n    itemName: string,\n    x: number,\n    y: number,\n    options: iOptions = {}\n): iBlueprintItem => {\n    const item: iBlueprintItem = {\n        entity_number: entityNumber,\n        name: itemName,\n        position: {\n            x: x,\n            y: y,\n        },\n    }\n    if (options.direction) {\n        item.direction = options.direction\n    }\n    if (options.orientation) {\n        item.orientation = options.orientation\n    }\n    if (options.bar) {\n        item.bar = options.bar\n    }\n    if (options.filters) {\n        item.filters = options.filters\n    }\n    if (options.request_filters) {\n        item.request_filters = options.request_filters\n    }\n    if (options.request_from_buffers) {\n        item.request_from_buffers = options.request_from_buffers\n    }\n    if (options.control_behavior) {\n        item.control_behavior = options.control_behavior\n    }\n    if (options.station) {\n        item.station = options.station\n    }\n    if (options.manual_trains_limit) {\n        item.manual_trains_limit = options.manual_trains_limit\n    }\n    if (options.trains_limit_signal) {\n        item.trains_limit_signal = options.trains_limit_signal\n    }\n    entityNumber += 1\n    return item\n}\nexport const assignEntityNumberToItems = (\n    items: iBlueprintItemWithoutNumber[],\n    xOffset = 0,\n    yOffset = 0\n): iBlueprintItem[] => {\n    return items.map((item) => {\n        return newItem(item.name, item.position.x + xOffset, item.position.y + yOffset, {\n            direction: item.direction,\n        })\n    })\n}\n// Get total train length but as array so I can loop over it\nexport const getTrainArray = (\n    bpSettings: typeof defaultSettings,\n    startOffset = 0,\n    bottomOffset = 0\n): number[] => {\n    const returnArray: number[] = []\n    const doubleHeaded = bpSettings.doubleHeaded ? 2 : 1\n    for (\n        let i = startOffset;\n        i <\n        (doubleHeaded * parseInt(bpSettings.locomotivesPerEnd) + parseInt(bpSettings.cargoWagon)) *\n            7 +\n            bottomOffset;\n        i++\n    ) {\n        returnArray.push(i)\n    }\n    return returnArray\n}\n// Only front locomotives as array\nexport const getFrontLocomotivesArray = (\n    bpSettings: typeof defaultSettings,\n    startOffset = -3,\n    bottomOffset = -3\n): number[] => {\n    const returnArray: number[] = []\n    for (let i = startOffset; i < parseInt(bpSettings.locomotivesPerEnd) * 7 + bottomOffset; i++) {\n        returnArray.push(i)\n    }\n    return returnArray\n}\n// Only back locomotives as array (or empty array if single headed)\nexport const getBackLocomotivesArray = (\n    bpSettings: typeof defaultSettings,\n    startOffset = -3,\n    bottomOffset = -3\n): number[] => {\n    if (!bpSettings.doubleHeaded) return []\n    const returnArray: number[] = []\n    for (\n        let i =\n            (parseInt(bpSettings.locomotivesPerEnd) + parseInt(bpSettings.cargoWagon)) * 7 +\n            startOffset;\n        i <\n        (2 * parseInt(bpSettings.locomotivesPerEnd) + parseInt(bpSettings.cargoWagon)) * 7 +\n            bottomOffset;\n        i++\n    ) {\n        returnArray.push(i)\n    }\n    return returnArray\n}\n// Returns an array of y-offsets where the cargo is\nexport const getCargoArray = (bpSettings: typeof defaultSettings, startOffset = -3): number[] => {\n    const returnArray: number[] = []\n    const bottomOffset = 1\n    for (\n        let i = parseInt(bpSettings.locomotivesPerEnd) * 7 + startOffset;\n        i <\n        (parseInt(bpSettings.locomotivesPerEnd) + parseInt(bpSettings.cargoWagon)) * 7 +\n            startOffset +\n            bottomOffset;\n        i++\n    ) {\n        returnArray.push(i)\n    }\n    return returnArray\n}\n\nexport const placeTrainTracks = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    const returnArray: iBlueprintItem[] = []\n    getTrainArray(bpSettings, -4).forEach((i) => {\n        if (i % 2 === 1) return\n        returnArray.push(newItem(\"straight-rail\", -1.5, i))\n    })\n    return returnArray\n}\n\nexport const placeSignals = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    // Size is 1x1, so coordinate ends in 0.5\n    const returnArray: iBlueprintItem[] = []\n    const start = 0\n    const doubleHeaded = bpSettings.doubleHeaded ? 2 : 1\n    const singleHeadedOffset = bpSettings.doubleHeaded ? 0 : 1\n    const end =\n        (doubleHeaded * parseInt(bpSettings.locomotivesPerEnd) + parseInt(bpSettings.cargoWagon)) *\n            7 +\n        singleHeadedOffset\n    // Stacker\n    if (bpSettings.stationType === \"Stacker\") {\n        returnArray.push(\n            newItem(\"rail-chain-signal\", 0, start - 3.5, { direction: DIRECTION.DOWN })\n        )\n        returnArray.push(newItem(\"rail-signal\", 0, end - 2.5, { direction: DIRECTION.DOWN }))\n    }\n    // Normal station\n    else {\n        if (bpSettings.doubleHeaded) {\n            // Chain signal at the back if double headed, because I assume double headed trains exit the same way they went in\n            returnArray.push(\n                newItem(\"rail-chain-signal\", -3, end - 2.5, { direction: DIRECTION.UP })\n            )\n        } else {\n            // Chain signal at the front if not double headed\n            returnArray.push(\n                newItem(\"rail-chain-signal\", 0, start - 3.5, { direction: DIRECTION.DOWN })\n            )\n        }\n        // Rail signal at the back\n        returnArray.push(newItem(\"rail-signal\", 0, end - 2.5, { direction: DIRECTION.DOWN }))\n    }\n\n    return returnArray\n}\n\nexport const placeTrainStop = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    // Size is 2x2, so coordinate ends in .0\n    const returnArray: iBlueprintItem[] = []\n    const options: iOptions = {\n        station: bpSettings.stationName !== \"\" ? bpSettings.stationName : undefined,\n    }\n    const controlBehavior: iTrainStopControlBehavior = {}\n    if (bpSettings.trainStopUsesEnabledCondition) {\n        controlBehavior.circuit_enable_disable = true\n        controlBehavior.circuit_condition = {\n            first_signal: {\n                type: \"virtual\",\n                name: \"signal-red\",\n            },\n            constant: 0,\n            comparator: \">\",\n        }\n    }\n    if (bpSettings.trainLimit === \"Dynamic\") {\n        controlBehavior.set_trains_limit = bpSettings.trainLimit === \"Dynamic\"\n        controlBehavior.trains_limit_signal = {\n            type: \"virtual\",\n            name: \"signal-L\",\n        }\n    } else {\n        options.manual_trains_limit = parseInt(bpSettings.trainLimit)\n    }\n    options.control_behavior = controlBehavior\n    returnArray.push(newItem(\"train-stop\", 0.5, -2, options))\n    return returnArray\n}\n\nexport const placeTrain = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    const returnArray: iBlueprintItem[] = []\n    let count = 0\n    const doubleHeaded = bpSettings.doubleHeaded ? 2 : 1\n    const locoCount = parseInt(bpSettings.locomotivesPerEnd)\n    const cargoCount = parseInt(bpSettings.cargoWagon)\n    parseInt(bpSettings.cargoWagon)\n    getTrainArray(bpSettings).forEach((y, i) => {\n        if (i % 7 !== 0) return\n        if (count < locoCount) {\n            returnArray.push(newItem(\"locomotive\", -1.5, y + 1))\n        } else if (count < locoCount + cargoCount) {\n            if (!fluidStation.includes(bpSettings.stationType))\n                returnArray.push(newItem(\"cargo-wagon\", -1.5, y + 1))\n            else returnArray.push(newItem(\"fluid-wagon\", -1.5, y + 1))\n        } else if (count < locoCount * doubleHeaded + cargoCount) {\n            returnArray.push(newItem(\"locomotive\", -1.5, y + 1, { orientation: 0.5 }))\n        }\n        count += 1\n    })\n    return returnArray\n}\n\nexport const placeInserters = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    // Size is 1x1, so coordinate ends in 0.5\n    // Inserter direction = direction it grabs from\n    const returnArray: iBlueprintItem[] = []\n    const inserterType = bpSettings.enableFilterInserters\n        ? filterInserters[bpSettings.inserterType]\n        : bpSettings.inserterType\n    const inserterDirection =\n        bpSettings.stationType === \"Loading Station\" ? DIRECTION.RIGHT : DIRECTION.LEFT\n    let filterArray:\n        | undefined\n        | Array<{\n              index: number\n              name: string\n          }>\n    if (bpSettings.enableFilterInserters) {\n        filterArray = []\n        for (let i = 0; i < 5; i++) {\n            if (bpSettings.filterFields[i] === \"\") break\n            filterArray.push({\n                index: i + 1,\n                name: bpSettings.filterFields[i],\n            })\n        }\n    }\n    getCargoArray(bpSettings).forEach((y, i) => {\n        if (i % 7 === 0) return\n        returnArray.push(\n            newItem(inserterType, 0, y + 0.5, {\n                direction: inserterDirection,\n                filters: filterArray,\n            })\n        )\n\n        if (!botChestTypes.includes(bpSettings.chestType)) {\n            returnArray.push(\n                newItem(inserterType, 2, y + 0.5, {\n                    direction: inserterDirection,\n                    filters: filterArray,\n                })\n            )\n        }\n    })\n    return returnArray\n}\nexport const placeChests = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    // Size is 1x1, so coordinate ends in 0.5\n    const returnArray: iBlueprintItem[] = []\n\n    // For requester and buffer chests, add the requests\n    const isRequesterChest = requestChestTypes.includes(bpSettings.chestType)\n    const requests: Array<{\n        index: number\n        name: string\n        count: number\n    }> = []\n    if (isRequesterChest) {\n        for (let i = 0; i < 12; i++) {\n            const itemType = bpSettings.chestRequestItemsType[i]\n            if (itemType === \"\") break\n            const itemAmount = bpSettings.chestRequestItemsAmount[i]\n            requests.push({\n                index: i + 1,\n                name: itemType,\n                count: parseInt(itemAmount),\n            })\n        }\n    }\n\n    const requestFromBuffers =\n        bpSettings.chestRequestFromBuffers && bpSettings.chestType === \"logistic-chest-requester\"\n            ? true\n            : undefined\n    getCargoArray(bpSettings).forEach((y, i) => {\n        if (i % 7 === 0) return\n        returnArray.push(\n            newItem(bpSettings.chestType, 1, y + 0.5, {\n                bar: parseInt(bpSettings.chestLimit),\n                request_filters: requests.length === 0 ? undefined : requests,\n                request_from_buffers: requestFromBuffers,\n            })\n        )\n    })\n    return returnArray\n}\n// Belts between inserter and splitter\nexport const placeLoadingBelts = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    // Size is 1x1, so coordinate ends in 0.5\n    const returnArray: iBlueprintItem[] = []\n    getCargoArray(bpSettings).forEach((y, i) => {\n        if (i % 7 === 1) {\n            returnArray.push(\n                newItem(bpSettings.beltType, 3, y + 0.5, { direction: DIRECTION.LEFT })\n            )\n        } else if (i % 7 === 2) {\n            returnArray.push(newItem(bpSettings.beltType, 3, y + 0.5, { direction: DIRECTION.UP }))\n        } else if (i % 7 === 3) {\n            returnArray.push(newItem(bpSettings.beltType, 3, y + 0.5, { direction: DIRECTION.UP }))\n        } else if (i % 7 === 4) {\n            returnArray.push(\n                newItem(bpSettings.beltType, 3, y + 0.5, { direction: DIRECTION.DOWN })\n            )\n        } else if (i % 7 === 5) {\n            returnArray.push(\n                newItem(bpSettings.beltType, 3, y + 0.5, { direction: DIRECTION.DOWN })\n            )\n        } else if (i % 7 === 6) {\n            returnArray.push(\n                newItem(bpSettings.beltType, 3, y + 0.5, { direction: DIRECTION.LEFT })\n            )\n        }\n    })\n    return returnArray\n}\nexport const placeUnloadingBelts = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    // Size is 1x1, so coordinate ends in 0.5\n    const returnArray: iBlueprintItem[] = []\n    getCargoArray(bpSettings).forEach((y, i) => {\n        if (i % 7 === 1) {\n            returnArray.push(\n                newItem(bpSettings.beltType, 3, y + 0.5, { direction: DIRECTION.DOWN })\n            )\n        } else if (i % 7 === 2) {\n            returnArray.push(\n                newItem(bpSettings.beltType, 3, y + 0.5, { direction: DIRECTION.DOWN })\n            )\n        } else if (i % 7 === 3) {\n            returnArray.push(\n                newItem(bpSettings.beltType, 3, y + 0.5, { direction: DIRECTION.RIGHT })\n            )\n        } else if (i % 7 === 4) {\n            returnArray.push(\n                newItem(bpSettings.beltType, 3, y + 0.5, { direction: DIRECTION.RIGHT })\n            )\n        } else if (i % 7 === 5) {\n            returnArray.push(newItem(bpSettings.beltType, 3, y + 0.5, { direction: DIRECTION.UP }))\n        } else if (i % 7 === 6) {\n            returnArray.push(newItem(bpSettings.beltType, 3, y + 0.5, { direction: DIRECTION.UP }))\n        }\n    })\n    return returnArray\n}\nexport const placePumps = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    const returnArray: iBlueprintItem[] = []\n    const pumpDirection =\n        bpSettings.stationType === \"Fluid Loading Station\" ? DIRECTION.LEFT : DIRECTION.RIGHT\n    getCargoArray(bpSettings).forEach((y, i) => {\n        if (i % 7 === 1) {\n            returnArray.push(newItem(\"pump\", 0.5, y + 0.5, { direction: pumpDirection }))\n        }\n        if (i % 7 === 6) {\n            returnArray.push(newItem(\"pump\", 0.5, y + 0.5, { direction: pumpDirection }))\n        }\n    })\n    return returnArray\n}\nexport const placeStorageTanks = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    // Size is 3x3, so coordinate ends in 0.5\n    // Storage tank facing UP has connection topleft and bottomright\n    // Storage tank facing RIGHT has connection topright and bottomleft\n    const returnArray: iBlueprintItem[] = []\n    getCargoArray(bpSettings).forEach((y, i) => {\n        if (i % 7 === 2) {\n            for (\n                let xOffset = 0;\n                xOffset < parseInt(bpSettings.pumpStorageTankColumns);\n                xOffset++\n            ) {\n                const tankDirection = xOffset % 2 === 0 ? DIRECTION.UP : DIRECTION.RIGHT\n                returnArray.push(\n                    newItem(\"storage-tank\", (1 + xOffset) * 3, y + 0.5, {\n                        direction: tankDirection,\n                    })\n                )\n            }\n        }\n        if (i % 7 === 5) {\n            for (\n                let xOffset = 0;\n                xOffset < parseInt(bpSettings.pumpStorageTankColumns);\n                xOffset++\n            ) {\n                const tankDirection = xOffset % 2 === 0 ? DIRECTION.RIGHT : DIRECTION.UP\n                returnArray.push(\n                    newItem(\"storage-tank\", (1 + xOffset) * 3, y + 0.5, {\n                        direction: tankDirection,\n                    })\n                )\n            }\n        }\n    })\n    return returnArray\n}\nexport const placePipes = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    // Size is 1x1, so coordinate ends in 0.5\n    const returnArray: iBlueprintItem[] = []\n    getCargoArray(bpSettings).forEach((y, i, array) => {\n        if (i !== 0 && i !== array.length - 1 && i % 7 === 0) {\n            for (let j = 0; j < parseInt(bpSettings.pumpStorageTankColumns); j++) {\n                const xOffset = j % 2 === 0 ? Math.floor(j / 2) * 6 : Math.floor(j / 2) * 6 + 5\n                returnArray.push(newItem(\"pipe\", 2 + xOffset, y + 0.5))\n            }\n        }\n    })\n    return returnArray\n}\n// Belts that go from splitter to front/back\nexport const placeVerticalBelts = (\n    bpSettings: typeof defaultSettings,\n    splitters: Array<iBlueprintItem>\n): iBlueprintItem[] => {\n    const returnArray: iBlueprintItem[] = []\n    const mode = bpSettings.stationType === \"Loading Station\" ? \"load\" : \"unload\"\n    const beltEnd = bpSettings.beltFlowDirection\n    sortByYPosition(splitters)\n    let x = 5\n    // Unloading to front, splitters[0] is the front splitter\n    if (mode === \"unload\" && beltEnd === \"Front\") {\n        splitters.forEach((splitter) => {\n            for (let y = splitters[0].position.y; y <= splitter.position.y; y++) {\n                returnArray.push(\n                    newItem(bpSettings.beltType, x, y - 0.5, { direction: DIRECTION.UP })\n                )\n            }\n            for (let i = splitter.position.x + 1; i < x; i++) {\n                returnArray.push(\n                    newItem(bpSettings.beltType, i, splitter.position.y - 0.5, {\n                        direction: DIRECTION.RIGHT,\n                    })\n                )\n            }\n            x += 1\n        })\n    }\n    // Unloading to back, splitters[0] is the back splitter\n    if (mode === \"unload\" && beltEnd === \"Back\") {\n        splitters.reverse()\n        splitters.forEach((splitter) => {\n            for (let y = splitters[0].position.y; y >= splitter.position.y; y--) {\n                returnArray.push(\n                    newItem(bpSettings.beltType, x, y + 0.5, { direction: DIRECTION.DOWN })\n                )\n            }\n            for (let i = splitter.position.x + 1; i < x; i++) {\n                returnArray.push(\n                    newItem(bpSettings.beltType, i, splitter.position.y + 0.5, {\n                        direction: DIRECTION.RIGHT,\n                    })\n                )\n            }\n            x += 1\n        })\n    }\n    // Loading from front, splitters[0] is the front splitter\n    if (mode === \"load\" && beltEnd === \"Front\") {\n        splitters.forEach((splitter) => {\n            for (let y = splitters[0].position.y; y < splitter.position.y; y++) {\n                returnArray.push(\n                    newItem(bpSettings.beltType, x, y - 0.5, { direction: DIRECTION.DOWN })\n                )\n            }\n            for (let i = splitter.position.x + 1; i <= x; i++) {\n                returnArray.push(\n                    newItem(bpSettings.beltType, i, splitter.position.y - 0.5, {\n                        direction: DIRECTION.LEFT,\n                    })\n                )\n            }\n            x += 1\n        })\n    }\n    // Loading from back, splitters[0] is the back splitter\n    if (mode === \"load\" && beltEnd === \"Back\") {\n        splitters.reverse()\n        splitters.forEach((splitter) => {\n            for (let y = splitters[0].position.y; y > splitter.position.y; y--) {\n                returnArray.push(\n                    newItem(bpSettings.beltType, x, y + 0.5, { direction: DIRECTION.UP })\n                )\n            }\n            for (let i = splitter.position.x + 1; i <= x; i++) {\n                returnArray.push(\n                    newItem(bpSettings.beltType, i, splitter.position.y + 0.5, {\n                        direction: DIRECTION.LEFT,\n                    })\n                )\n            }\n            x += 1\n        })\n    }\n    return returnArray\n}\nexport const placeSplitters = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    const returnArray: iBlueprintItem[] = []\n    const splitterType = splitterTypes[bpSettings.beltType]\n    const splitterDirection =\n        bpSettings.stationType === \"Loading Station\" ? DIRECTION.LEFT : DIRECTION.RIGHT\n    getCargoArray(bpSettings).forEach((y, i) => {\n        if (i % 7 !== 4) return\n        returnArray.push(newItem(splitterType, 4, y, { direction: splitterDirection }))\n    })\n    return returnArray\n}\nexport const placePoles = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    // Size is 1x1, so coordinate ends in 0.5\n    const returnArray: iBlueprintItem[] = []\n    getCargoArray(bpSettings).forEach((y, i) => {\n        if (i % 7 !== 0) return\n        returnArray.push(newItem(\"medium-electric-pole\", 0, y + 0.5))\n    })\n    return returnArray\n}\nexport const placeLamps = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    // Size is 1x1, so coordinate ends in 0.5\n    const returnArray: iBlueprintItem[] = []\n    getCargoArray(bpSettings).forEach((y, i) => {\n        if (i % 7 !== 0) return\n        returnArray.push(newItem(\"small-lamp\", 1, y + 0.5))\n    })\n    // TODO Fix lamps for refill inserters/chests?\n    // if (\n    //     bpSettings.refillEnabled ||\n    //     bpSettings.trainStopUsesEnabledCondition ||\n    //     (bpSettings.trainLimit === \"Dynamic\" && normalStation.includes(bpSettings.stationType))\n    // ) {\n    //     getFrontLocomotivesArray(bpSettings).forEach((y, i, array) => {\n    //         if (i % 7 !== 0 || array.length === i - 1 || i === 0) return\n    //         returnArray.push(newItem(\"small-lamp\", 1, y + 0.5))\n    //     })\n    // }\n    // if (bpSettings.refillEnabled) {\n    //     getBackLocomotivesArray(bpSettings).forEach((y, i, array) => {\n    //         if (i % 7 !== 0 || array.length === i - 1 || i === 0) return\n    //         returnArray.push(newItem(\"small-lamp\", 1, y + 0.5))\n    //     })\n    // }\n    return returnArray\n}\n// Decider for enabled-condition\nexport const placeEnabledConditionDecider = (\n    bpSettings: typeof defaultSettings,\n    topPole: iBlueprintItem,\n    trainStop: iBlueprintItem\n): iBlueprintItem[] => {\n    const decider = newItem(\"decider-combinator\", 0, 1, {\n        control_behavior: {\n            decider_conditions: {\n                first_signal: {\n                    type: \"virtual\",\n                    name: \"signal-anything\",\n                },\n                constant: parseInt(bpSettings.enabledConditionAmount),\n                comparator: bpSettings.enabledConditionOperator,\n                output_signal: {\n                    type: \"virtual\",\n                    name: \"signal-red\",\n                },\n                copy_count_from_input: false,\n            },\n        },\n    })\n    // Combine decider output with trainstop with green wire\n    connectTwoEntitiesWithWire(decider, trainStop, \"green\", \"2\", \"1\")\n    // Combine decider input with pole with green wire\n    connectTwoEntitiesWithWire(decider, topPole, \"green\")\n    return [decider]\n}\n// Combinators for set train limit dynamically\nexport const placeDynamicTrainLimitCombinators = (\n    bpSettings: typeof defaultSettings,\n    topPole: iBlueprintItem,\n    trainStop: iBlueprintItem\n): iBlueprintItem[] => {\n    let arithmetic1Xvalue = 2\n    let arithmetic2Xvalue = 1\n    let arithmeticXOffset = bpSettings.placeLampsNearPoles ? 1 : 0\n    if (\n        (normalStation.includes(bpSettings.stationType) && bpSettings.beltSidesUsed === \"Left\") ||\n        (fluidStation.includes(bpSettings.stationType) && bpSettings.pumpSidesToBeUsed === \"Left\")\n    ) {\n        arithmetic1Xvalue *= -1\n        arithmetic2Xvalue *= -1\n        const mirrorOffset = -3\n        arithmeticXOffset = -1 * arithmeticXOffset + mirrorOffset\n    }\n    // Set settings of the first arithmetic combinator\n    const arithmetic1Condition: iArithmeticCondition = {\n        operation: bpSettings.trainLimitArithmetic1Operator,\n        output_signal: {\n            type: \"virtual\",\n            name: \"signal-L\",\n        },\n    }\n    if (\n        bpSettings.trainLimitArithmetic1Constant1 === \"each\" ||\n        allowedCharacters.includes(bpSettings.trainLimitArithmetic1Constant1)\n    )\n        arithmetic1Condition[\"first_signal\"] = {\n            type: \"virtual\",\n            name:\n                bpSettings.trainLimitArithmetic1Constant1 === \"each\"\n                    ? \"signal-each\"\n                    : `signal-${bpSettings.trainLimitArithmetic1Constant1}`,\n        }\n    else\n        arithmetic1Condition[\"first_constant\"] = parseInt(bpSettings.trainLimitArithmetic1Constant1)\n    if (\n        bpSettings.trainLimitArithmetic1Constant2 === \"each\" ||\n        allowedCharacters.includes(bpSettings.trainLimitArithmetic1Constant2)\n    )\n        arithmetic1Condition[\"second_signal\"] = {\n            type: \"virtual\",\n            name:\n                bpSettings.trainLimitArithmetic1Constant2 === \"each\"\n                    ? \"signal-each\"\n                    : `signal-${bpSettings.trainLimitArithmetic1Constant2}`,\n        }\n    else\n        arithmetic1Condition[\"second_constant\"] = parseInt(\n            bpSettings.trainLimitArithmetic1Constant2\n        )\n    const arithmetic1 = newItem(\"arithmetic-combinator\", arithmetic1Xvalue + arithmeticXOffset, 4, {\n        control_behavior: {\n            arithmetic_conditions: arithmetic1Condition,\n        },\n    })\n    ////////////////////////////////////////////////////////\n    // Set settings of the second arithmetic combinator\n    const arithmetic2Condition: iArithmeticCondition = {\n        operation: bpSettings.trainLimitArithmetic2Operator,\n        output_signal: {\n            type: \"virtual\",\n            name: \"signal-L\",\n        },\n    }\n    if (\n        bpSettings.trainLimitArithmetic2Constant1 === \"each\" ||\n        allowedCharacters.includes(bpSettings.trainLimitArithmetic2Constant1)\n    )\n        arithmetic2Condition[\"first_signal\"] = {\n            type: \"virtual\",\n            name:\n                bpSettings.trainLimitArithmetic2Constant1 === \"each\"\n                    ? \"signal-each\"\n                    : `signal-${bpSettings.trainLimitArithmetic2Constant1}`,\n        }\n    else\n        arithmetic2Condition[\"first_constant\"] = parseInt(bpSettings.trainLimitArithmetic2Constant1)\n    if (\n        bpSettings.trainLimitArithmetic2Constant2 === \"each\" ||\n        allowedCharacters.includes(bpSettings.trainLimitArithmetic2Constant2)\n    )\n        arithmetic2Condition[\"second_signal\"] = {\n            type: \"virtual\",\n            name:\n                bpSettings.trainLimitArithmetic2Constant2 === \"each\"\n                    ? \"signal-each\"\n                    : `signal-${bpSettings.trainLimitArithmetic2Constant2}`,\n        }\n    else\n        arithmetic2Condition[\"second_constant\"] = parseInt(\n            bpSettings.trainLimitArithmetic2Constant2\n        )\n    const arithmetic2 = newItem(\"arithmetic-combinator\", arithmetic2Xvalue + arithmeticXOffset, 4, {\n        control_behavior: {\n            arithmetic_conditions: arithmetic2Condition,\n        },\n    })\n    // arithmentic gets: \"2\"(output) green connection with circuit number 1 to decider which gets \"1\"(input) green connection with circuit number 2\n    connectTwoEntitiesWithWire(arithmetic2, trainStop, \"green\", \"2\", \"1\", 1, 2)\n    connectTwoEntitiesWithWire(arithmetic1, arithmetic2, \"green\", \"2\", \"1\", 1, 2)\n    // Combine decider input with pole with green wire\n    connectTwoEntitiesWithWire(arithmetic1, topPole, \"green\")\n    return [arithmetic1, arithmetic2]\n}\n// Refuel\nexport const placeTopRefuelPoles = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    const returnArray: iBlueprintItem[] = []\n    getFrontLocomotivesArray(bpSettings).forEach((y, i, array) => {\n        if (i % 7 !== 0 || array.length === i - 1 || i === 0) return\n        returnArray.push(newItem(\"medium-electric-pole\", 0, y + 0.5))\n    })\n    return returnArray\n}\nexport const placeBottomRefuelPoles = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    const returnArray: iBlueprintItem[] = []\n    getBackLocomotivesArray(bpSettings).forEach((y, i, array) => {\n        if (i % 7 !== 0 || array.length === i - 1 || i === 0) return\n        returnArray.push(newItem(\"medium-electric-pole\", 0, y + 0.5))\n    })\n    return returnArray\n}\nexport const placeRefuelChestsAndInserters = (\n    bpSettings: typeof defaultSettings\n): iBlueprintItem[] => {\n    // Size is 1x1, so coordinate ends in 0.5\n    const returnArray: iBlueprintItem[] = []\n    getFrontLocomotivesArray(bpSettings).forEach((y, i) => {\n        if (i % 7 !== 5) return\n        returnArray.push(newItem(\"inserter\", 0, y + 0.5, { direction: DIRECTION.RIGHT }))\n        returnArray.push(\n            newItem(\"logistic-chest-requester\", 1, y + 0.5, {\n                request_filters: [\n                    {\n                        index: 1,\n                        name: bpSettings.refillFuelType,\n                        count: parseInt(bpSettings.refillFuelAmount),\n                    },\n                ],\n            })\n        )\n    })\n    getBackLocomotivesArray(bpSettings).forEach((y, i) => {\n        if (i % 7 !== 2) return\n        returnArray.push(newItem(\"inserter\", 0, y + 0.5, { direction: DIRECTION.RIGHT }))\n        returnArray.push(\n            newItem(\"logistic-chest-requester\", 1, y + 0.5, {\n                request_filters: [\n                    {\n                        index: 1,\n                        name: bpSettings.refillFuelType,\n                        count: parseInt(bpSettings.refillFuelAmount),\n                    },\n                ],\n            })\n        )\n    })\n    return returnArray\n}\n// Wire functions\nexport const connectTwoEntitiesWithWire = (\n    entity1: iBlueprintItem,\n    entity2: iBlueprintItem,\n    color: iWireColor,\n    entity1ConNumber: \"1\" | \"2\" = \"1\",\n    entity2ConNumber: \"1\" | \"2\" = \"1\",\n    circuit1Number: 1 | 2 | undefined = undefined,\n    circuit2Number: 1 | 2 | undefined = undefined\n): void => {\n    const entity1Number = entity1.entity_number\n    const entity2Number = entity2.entity_number\n\n    const createWirePath = (entity: iBlueprintItem, conNumber: \"1\" | \"2\") => {\n        if (!entity.connections) {\n            entity.connections = {}\n        }\n        if (!entity.connections[conNumber]) {\n            entity.connections[conNumber] = {}\n        }\n        const entityColor = entity.connections[conNumber] as {\n            red?: iCircuitConnection[]\n            green?: iCircuitConnection[]\n        }\n        if (!entityColor[color]) {\n            entityColor[color] = []\n        }\n        // Or in short but typescript doesnt let me:\n        // if (!entity.connections[conNumber][color]) {\n        //     entity.connections[conNumber][color] = []\n        // }\n    }\n\n    createWirePath(entity1, entity1ConNumber)\n    createWirePath(entity2, entity2ConNumber)\n\n    const conn1: iCircuitConnection = {\n        entity_id: entity2Number,\n    }\n    const conn2: iCircuitConnection = {\n        entity_id: entity1Number,\n    }\n    // Add circuit_id if both items are of type combinator (decider, arithmetic etc)\n    if (circuit1Number) {\n        conn1.circuit_id = circuit1Number\n    }\n    if (circuit2Number) {\n        conn2.circuit_id = circuit2Number\n    }\n    // Let me know if you come up with a readable solution for this:\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    entity1.connections[entity1ConNumber][color].push(conn1)\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    entity2.connections[entity2ConNumber][color].push(conn2)\n}\nexport const connectItemsWithWire = (items: iBlueprintItem[], color: iWireColor): void => {\n    items.forEach((item1, index) => {\n        if (index === 0) return\n        const item2 = items[index - 1]\n        connectTwoEntitiesWithWire(item1, item2, color)\n    })\n}\n// Helper functions\nexport const mirrorItemsHorizontal = (items: iBlueprintItem[]): iBlueprintItem[] => {\n    // Returns a new array with clones of items\n    return items.map((item) => {\n        const copy = cloneDeep(item) as iBlueprintItem\n        copy.entity_number = entityNumber\n        entityNumber += 1\n        copy.position.x = -copy.position.x + mirrorXOffset\n        if (copy.name === \"storage-tank\") {\n            if (!copy.direction) copy.direction = 2\n            else copy.direction = undefined\n        } else {\n            if (copy.direction === DIRECTION.LEFT) copy.direction = DIRECTION.RIGHT\n            else if (copy.direction === DIRECTION.RIGHT) copy.direction = DIRECTION.LEFT\n        }\n        return copy\n    })\n}\nexport const changeItemsCoordinates = (items: iBlueprintItem[], x = 0, y = 0): void => {\n    // Changes the items directly\n    items.forEach((item) => {\n        item.position = {\n            x: item.position.x + x,\n            y: item.position.y + y,\n        }\n    })\n}\nexport const copyPasteItems = (items: iBlueprintItem[], x = 0, y = 0): iBlueprintItem[] => {\n    // Changes the items directly\n    return items.map((item) => {\n        const clone: iBlueprintItem = cloneDeep(item)\n        clone.entity_number = entityNumber\n        entityNumber += 1\n        clone.position = {\n            x: clone.position.x + x,\n            y: clone.position.y + y,\n        }\n        return clone\n    })\n}\nexport const mixSides = (\n    sidesUsed: \"Both\" | \"Right\" | \"Left\",\n    leftArray: iBlueprintItem[],\n    rightArray: iBlueprintItem[]\n): iBlueprintItem[] => {\n    if (sidesUsed === \"Both\") {\n        return [...leftArray, ...rightArray]\n    } else if (sidesUsed === \"Left\") {\n        return leftArray\n    } else if (sidesUsed === \"Right\") {\n        return rightArray\n    }\n    console.assert(\"Error returning empty array\")\n    return []\n}\nexport const sortByYPosition = (items: iBlueprintItem[]): void => {\n    items.sort((a, b) => {\n        // Smaller y first\n        if (a.position.y < b.position.y) {\n            return -1\n        } else if (a.position.y > b.position.y) {\n            return 1\n        }\n        // If equal, sort by x (right side first)\n        if (a.position.x < b.position.x) {\n            return 1\n        } else if (a.position.x > b.position.x) {\n            return -1\n        }\n        return 0\n    })\n}\nexport const sortStorageTanks = (items: iBlueprintItem[], rowCount = 0): iBlueprintItem[] => {\n    if (items.length === 0) {\n        return []\n    }\n    sortByYPosition(items)\n    let returnArray: iBlueprintItem[] = []\n    let y = items[0].position.y\n    let rowItems: iBlueprintItem[] = []\n    items.forEach((item) => {\n        if (item.position.y !== y) {\n            y = item.position.y\n            if (rowCount % 2 == 0) {\n                rowItems.reverse()\n            }\n            rowCount += 1\n            returnArray = [...returnArray, ...rowItems]\n            rowItems = []\n        }\n        rowItems.push(item)\n    })\n    rowItems.reverse()\n    returnArray = [...returnArray, ...rowItems]\n\n    return returnArray\n}\n","import { defaultSettings, normalStation, fluidStation } from \"../constants/constants\"\nimport { iBlueprint, iBlueprintItem } from \"../constants/interfaces\"\nimport { createNormalStation } from \"./CreateNormalStation\"\nimport { createFluidStation } from \"./CreateFluidStation\"\nimport { createStacker } from \"./CreateStacker\"\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst zlib = require(\"zlib\")\n\nexport const createBlueprint = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    if (normalStation.includes(bpSettings.stationType)) {\n        return createNormalStation(bpSettings)\n    }\n    if (fluidStation.includes(bpSettings.stationType)) {\n        return createFluidStation(bpSettings)\n    } else if (bpSettings.stationType === \"Stacker\") {\n        return createStacker(bpSettings)\n    }\n    return []\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst decode = (blueprintString: string) => {\n    // UNTESTED stolen from https://github.com/demipixel/factorio-blueprint/blob/c21309e9023ee3740a5c3c647d87cb828ab3ecc4/src/util.ts#L20\n    return JSON.parse(\n        zlib.inflateSync(Buffer.from(blueprintString.slice(1), \"base64\")).toString(\"utf8\")\n    )\n}\n\nconst encode = (items: iBlueprintItem[]) => {\n    const blueprint = {\n        blueprint: {\n            icons: [\n                {\n                    signal: {\n                        type: \"item\",\n                        name: \"transport-belt\",\n                    },\n                    index: 1,\n                },\n            ],\n            entities: items,\n            item: \"blueprint\",\n            version: \"0\",\n            label: \"Blueprint\",\n        },\n    }\n    return \"0\" + zlib.deflateSync(JSON.stringify(blueprint), { level: 9 }).toString(\"base64\")\n}\n\nexport const createBlueprintString = (blueprint: iBlueprint): string => {\n    // Stolen from https://github.com/demipixel/factorio-blueprint/blob/c21309e9023ee3740a5c3c647d87cb828ab3ecc4/src/util.ts#L41\n    return encode(blueprint)\n}\n","import { botChestTypes, defaultSettings } from \"../constants/constants\"\nimport { iBlueprintItem } from \"../constants/interfaces\"\nimport {\n    placeChests,\n    mirrorItemsHorizontal,\n    mixSides,\n    sortByYPosition,\n    connectItemsWithWire,\n    connectTwoEntitiesWithWire,\n    placeInserters,\n    placeLoadingBelts,\n    placeUnloadingBelts,\n    placePoles,\n    placeTrainTracks,\n    placeSignals,\n    placeTrainStop,\n    placeRefuelChestsAndInserters,\n    placeTopRefuelPoles,\n    placeBottomRefuelPoles,\n    placeEnabledConditionDecider,\n    placeLamps,\n    placeSplitters,\n    changeItemsCoordinates,\n    placeTrain,\n    placeVerticalBelts,\n    resetEntityNumber,\n    placeDynamicTrainLimitCombinators,\n} from \"./CreateItems\"\n\nexport const createNormalStation = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    resetEntityNumber()\n    let allItems: iBlueprintItem[] = []\n    let rightSplitters: iBlueprintItem[] = []\n\n    // For each station, create all items, then shift them down\n    let stationItems: iBlueprintItem[] = []\n    // Create chests and connect them with wire\n    const rightChests = placeChests(bpSettings)\n    const leftChests = mirrorItemsHorizontal(rightChests)\n    const chests = mixSides(bpSettings.beltSidesUsed, leftChests, rightChests)\n    // Sorting not required?\n    sortByYPosition(rightChests)\n    sortByYPosition(leftChests)\n    if (bpSettings.connectChestsWithGreenWire) {\n        connectItemsWithWire(leftChests, \"green\")\n        connectItemsWithWire(rightChests, \"green\")\n    }\n    if (bpSettings.connectBothSideWithGreenWire && bpSettings.beltSidesUsed === \"Both\") {\n        connectTwoEntitiesWithWire(rightChests[0], leftChests[0], \"green\")\n    }\n    if (bpSettings.connectChestsWithRedWire) {\n        connectItemsWithWire(leftChests, \"red\")\n        connectItemsWithWire(rightChests, \"red\")\n    }\n    if (bpSettings.connectBothSideWithRedWire && bpSettings.beltSidesUsed === \"Both\") {\n        connectTwoEntitiesWithWire(rightChests[0], leftChests[0], \"red\")\n    }\n\n    // Mirrorable items\n    let rightSideItems: iBlueprintItem[] = []\n    // Exclude belts and splitters (and without splitters: no vertical belts) if chest type uses bots\n    if (!botChestTypes.includes(bpSettings.chestType)) {\n        const newSplitters = placeSplitters(bpSettings)\n        rightSplitters = [...rightSplitters, ...newSplitters]\n        if (bpSettings.stationType === \"Loading Station\") {\n            rightSideItems = [...rightSideItems, ...placeLoadingBelts(bpSettings)]\n        } else {\n            // Unloading station\n            rightSideItems = [...rightSideItems, ...placeUnloadingBelts(bpSettings)]\n        }\n    }\n    rightSideItems = [...rightSideItems, ...placeInserters(bpSettings)]\n\n    const rightPoles = placePoles(bpSettings)\n    const leftPoles = mirrorItemsHorizontal(rightPoles)\n    const poles = mixSides(bpSettings.beltSidesUsed, leftPoles, rightPoles)\n    let leftSideItems: iBlueprintItem[] = mirrorItemsHorizontal(rightSideItems)\n\n    // Combine remaining items which were already mirrored and offset-ed\n    rightSideItems = [...rightSideItems, ...rightPoles, ...rightChests]\n    leftSideItems = [...leftSideItems, ...leftPoles, ...leftChests]\n    if (bpSettings.placeLampsNearPoles) {\n        const rightLamps = placeLamps(bpSettings)\n        const leftLamps = mirrorItemsHorizontal(rightLamps)\n        rightSideItems = [...rightSideItems, ...rightLamps]\n        leftSideItems = [...leftSideItems, ...leftLamps]\n    }\n\n    // All items that need no mirroring (tracks, signals, train stops, refuel chests and inserter, poles for those, decider combinator)\n    stationItems = [...stationItems, ...placeTrainTracks(bpSettings)]\n    stationItems = [...stationItems, ...placeSignals(bpSettings)]\n    const trainStop = placeTrainStop(bpSettings)[0]\n    stationItems = [...stationItems, trainStop]\n    if (bpSettings.refillEnabled) {\n        // Place inserters, chests, and bottom poles\n        stationItems = [...stationItems, ...placeRefuelChestsAndInserters(bpSettings)]\n        stationItems = [...stationItems, ...placeBottomRefuelPoles(bpSettings)]\n    }\n    if (\n        bpSettings.refillEnabled ||\n        bpSettings.trainStopUsesEnabledCondition ||\n        bpSettings.trainLimit === \"Dynamic\"\n    ) {\n        // Place top poles if refil enabled\n        const topPoles = placeTopRefuelPoles(bpSettings)\n        stationItems = [...stationItems, ...topPoles]\n        sortByYPosition(poles)\n\n        // In enabled-condition: place decider\n        if (bpSettings.trainStopUsesEnabledCondition) {\n            stationItems = [\n                ...stationItems,\n                ...placeEnabledConditionDecider(bpSettings, poles[0], trainStop),\n            ]\n        }\n        // If dynamic train limit: place decider and arithmetic (2 arithmetic for unloading)\n        if (bpSettings.trainLimit === \"Dynamic\") {\n            const combinators = placeDynamicTrainLimitCombinators(bpSettings, poles[0], trainStop)\n            stationItems = [...stationItems, ...combinators]\n        }\n        // Connect top refill poles if enabled-condition or trainLimit=dynamic\n        if (bpSettings.trainStopUsesEnabledCondition || bpSettings.trainLimit === \"Dynamic\") {\n            // Connect top chest with top pole, and top pole with the top-refill-poles\n            sortByYPosition(chests)\n            const combineArray = [chests[0], poles[0], ...topPoles]\n            sortByYPosition(combineArray)\n            connectItemsWithWire(combineArray, \"green\")\n        }\n    }\n    if (bpSettings.includeTrainInBlueprint) {\n        stationItems = [...stationItems, ...placeTrain(bpSettings)]\n    }\n\n    // Combine left and right side items\n    stationItems = [\n        ...stationItems,\n        ...mixSides(bpSettings.beltSidesUsed, leftSideItems, rightSideItems),\n    ]\n\n    allItems = [...allItems, ...stationItems]\n\n    if (bpSettings.beltFlowDirection !== \"None\") {\n        const rightVerticalBelts = placeVerticalBelts(bpSettings, rightSplitters)\n        const leftVerticalBelts = mirrorItemsHorizontal(rightVerticalBelts)\n        allItems = [\n            ...allItems,\n            ...mixSides(bpSettings.beltSidesUsed, leftVerticalBelts, rightVerticalBelts),\n        ]\n    }\n    // Add splitters which were previously globally collected to create vertical belts\n    const leftSplitters = mirrorItemsHorizontal(rightSplitters)\n    allItems = [...allItems, ...mixSides(bpSettings.beltSidesUsed, leftSplitters, rightSplitters)]\n\n    const trainStops = allItems.filter((item) => {\n        return item.name === \"train-stop\"\n    })\n    const railSignals = allItems.filter((item) => {\n        return item.name === \"rail-signal\"\n    })\n    sortByYPosition(trainStops)\n    sortByYPosition(railSignals)\n    trainStops.slice(1).forEach((stop, i) => {\n        const signal = railSignals[i]\n        connectTwoEntitiesWithWire(stop, signal, \"green\")\n    })\n\n    // All items are off by 0.5, fix here\n    changeItemsCoordinates(allItems, -0.5)\n    return allItems\n}\n","import { defaultSettings } from \"../constants/constants\"\nimport { iBlueprintItem } from \"../constants/interfaces\"\nimport {\n    mirrorItemsHorizontal,\n    mixSides,\n    sortByYPosition,\n    connectItemsWithWire,\n    connectTwoEntitiesWithWire,\n    placePoles,\n    placeTrainTracks,\n    placeSignals,\n    placeTrainStop,\n    placeRefuelChestsAndInserters,\n    placeTopRefuelPoles,\n    placeBottomRefuelPoles,\n    placeEnabledConditionDecider,\n    placeLamps,\n    changeItemsCoordinates,\n    placeTrain,\n    resetEntityNumber,\n    placeStorageTanks,\n    placePumps,\n    placePipes,\n    placeDynamicTrainLimitCombinators,\n    sortStorageTanks,\n} from \"./CreateItems\"\n\nexport const createFluidStation = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    resetEntityNumber()\n    let allItems: iBlueprintItem[] = []\n\n    // For each station, create all items, then shift them down\n    let stationItems: iBlueprintItem[] = []\n    // Sorting not required?\n    let rightStorageTanks: iBlueprintItem[] = placeStorageTanks(bpSettings)\n    let leftStorageTanks: iBlueprintItem[] = mirrorItemsHorizontal(rightStorageTanks)\n    rightStorageTanks = sortStorageTanks(rightStorageTanks)\n    leftStorageTanks = sortStorageTanks(leftStorageTanks, 1)\n    if (bpSettings.connectChestsWithGreenWire) {\n        connectItemsWithWire(leftStorageTanks, \"green\")\n        connectItemsWithWire(rightStorageTanks, \"green\")\n    }\n    if (bpSettings.connectChestsWithRedWire) {\n        connectItemsWithWire(leftStorageTanks, \"red\")\n        connectItemsWithWire(rightStorageTanks, \"red\")\n    }\n\n    // Mirrorable items\n    let rightSideItems: iBlueprintItem[] = []\n\n    const rightPoles = placePoles(bpSettings)\n    const leftPoles = mirrorItemsHorizontal(rightPoles)\n    const poles = mixSides(bpSettings.pumpSidesToBeUsed, leftPoles, rightPoles)\n    let leftSideItems: iBlueprintItem[] = mirrorItemsHorizontal(rightSideItems)\n    const rightPumps = placePumps(bpSettings)\n    const leftPumps = mirrorItemsHorizontal(rightPumps)\n    const rightPipes = placePipes(bpSettings)\n    const leftPipes = mirrorItemsHorizontal(rightPipes)\n\n    // Combine remaining items which were already mirrored and offset-ed\n    if (bpSettings.placeLampsNearPoles) {\n        const rightLamps = placeLamps(bpSettings)\n        const leftLamps = mirrorItemsHorizontal(rightLamps)\n        rightSideItems = [...rightSideItems, ...rightLamps]\n        leftSideItems = [...leftSideItems, ...leftLamps]\n    }\n    rightSideItems = [...rightSideItems, ...rightPoles, ...rightPumps, ...rightPipes]\n    leftSideItems = [...leftSideItems, ...leftPoles, ...leftPumps, ...leftPipes]\n\n    // All items that need no mirroring (tracks, signals, train stops, refuel chests and inserter, poles for those, decider combinator)\n    stationItems = [...stationItems, ...placeTrainTracks(bpSettings)]\n    stationItems = [...stationItems, ...placeSignals(bpSettings)]\n    const trainStop = placeTrainStop(bpSettings)[0]\n    stationItems = [...stationItems, trainStop]\n    if (bpSettings.refillEnabled) {\n        stationItems = [...stationItems, ...placeRefuelChestsAndInserters(bpSettings)]\n        const bottomPoles = placeBottomRefuelPoles(bpSettings)\n        stationItems = [...stationItems, ...bottomPoles]\n    }\n    if (\n        bpSettings.refillEnabled ||\n        bpSettings.trainStopUsesEnabledCondition ||\n        bpSettings.trainLimit === \"Dynamic\"\n    ) {\n        const topPoles = placeTopRefuelPoles(bpSettings)\n        stationItems = [...stationItems, ...topPoles]\n        sortByYPosition(poles)\n\n        // In enabled-condition: place decider\n        if (bpSettings.trainStopUsesEnabledCondition) {\n            stationItems = [\n                ...stationItems,\n                ...placeEnabledConditionDecider(bpSettings, poles[0], trainStop),\n            ]\n        }\n\n        // If dynamic train limit: place decider and arithmetic (2 arithmetic for unloading)\n        if (bpSettings.trainLimit === \"Dynamic\") {\n            const combinators = placeDynamicTrainLimitCombinators(bpSettings, poles[0], trainStop)\n            stationItems = [...stationItems, ...combinators]\n        }\n\n        // Connect top refill poles if enabled-condition or trainLimit=dynamic\n        if (bpSettings.trainStopUsesEnabledCondition || bpSettings.trainLimit === \"Dynamic\") {\n            // Connect top chest with top pole, and top pole with the top-refill-poles\n            const storageTanks = mixSides(\n                bpSettings.pumpSidesToBeUsed,\n                leftStorageTanks,\n                rightStorageTanks\n            )\n            const combineArray = [storageTanks[0], poles[0], ...topPoles]\n            sortByYPosition(combineArray)\n            connectItemsWithWire(combineArray, \"green\")\n        }\n    }\n    if (bpSettings.includeTrainInBlueprint) {\n        stationItems = [...stationItems, ...placeTrain(bpSettings)]\n    }\n\n    // Combine left and right side items\n    stationItems = [\n        ...stationItems,\n        ...mixSides(bpSettings.pumpSidesToBeUsed, leftSideItems, rightSideItems),\n        ...mixSides(bpSettings.pumpSidesToBeUsed, leftStorageTanks, rightStorageTanks),\n    ]\n\n    allItems = [...allItems, ...stationItems]\n\n    const trainStops = allItems.filter((item) => {\n        return item.name === \"train-stop\"\n    })\n    const railSignals = allItems.filter((item) => {\n        return item.name === \"rail-signal\"\n    })\n    sortByYPosition(trainStops)\n    sortByYPosition(railSignals)\n    trainStops.slice(1).forEach((stop, i) => {\n        const signal = railSignals[i]\n        connectTwoEntitiesWithWire(stop, signal, \"green\")\n    })\n\n    // All items are off by 0.5, fix here\n    changeItemsCoordinates(allItems, -0.5)\n    return allItems\n}\n","import { iBlueprintItemWithoutNumber } from \"./interfaces\"\n\n// (0, 0) bending left 90 degrees to (-1, 1) curve\nexport const frontLeftCurve: iBlueprintItemWithoutNumber[] = [\n    {\n        name: \"curved-rail\",\n        position: {\n            x: 0,\n            y: 0,\n        },\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -4,\n            y: -4,\n        },\n        direction: 1,\n    },\n    {\n        name: \"curved-rail\",\n        position: {\n            x: -6,\n            y: -6,\n        },\n        direction: 3,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -11,\n            y: -8,\n        },\n        direction: 2,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -13,\n            y: -8,\n        },\n        direction: 2,\n    },\n]\n// (0, 0) bending right 90 degrees to (1, 1) curve\nexport const frontRightCurve: iBlueprintItemWithoutNumber[] = [\n    {\n        name: \"curved-rail\",\n        position: {\n            x: 2,\n            y: 0,\n        },\n        direction: 1,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: 5,\n            y: -5,\n        },\n        direction: 7,\n    },\n    {\n        name: \"curved-rail\",\n        position: {\n            x: 8,\n            y: -6,\n        },\n        direction: 6,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: 13,\n            y: -9,\n        },\n        direction: 2,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: 15,\n            y: -9,\n        },\n        direction: 2,\n    },\n]\n// (-1, -1) bending left 90 degreses to (0, 0)  curve\nexport const backLeftCurve: iBlueprintItemWithoutNumber[] = [\n    {\n        name: \"curved-rail\",\n        position: {\n            x: 0,\n            y: 6,\n        },\n        direction: 5,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -3,\n            y: 7,\n        },\n        direction: 3,\n    },\n    {\n        name: \"curved-rail\",\n        position: {\n            x: -6,\n            y: 12,\n        },\n        direction: 2,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -11,\n            y: 11,\n        },\n        direction: 2,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -13,\n            y: 11,\n        },\n        direction: 2,\n    },\n]\n// (1, -1) bending right 90 degreses to (0, 0)  curve\nexport const backRightCurve: iBlueprintItemWithoutNumber[] = [\n    {\n        name: \"curved-rail\",\n        position: {\n            x: 2,\n            y: 5,\n        },\n        direction: 4,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: 5,\n            y: 7,\n        },\n        direction: 5,\n    },\n    {\n        name: \"curved-rail\",\n        position: {\n            x: 8,\n            y: 11,\n        },\n        direction: 7,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: 13,\n            y: 11,\n        },\n        direction: 2,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: 15,\n            y: 11,\n        },\n        direction: 2,\n    },\n]\n","import { iBlueprintItemWithoutNumber } from \"./interfaces\"\n\n// (0, 0) bending left 45 degrees to (-1, 2) curve\n// The diagonal should be a bottomright-to-topright diagonal with the ending rail piece being the topleft piece\nexport const diagonalFrontLeftCurve: iBlueprintItemWithoutNumber[] = [\n    {\n        name: \"curved-rail\",\n        position: {\n            x: 0,\n            y: 0,\n        },\n        direction: 5,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -1,\n            y: -7,\n        },\n        direction: 0,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -1,\n            y: -9,\n        },\n        direction: 0,\n    },\n    {\n        name: \"rail-chain-signal\",\n        position: {\n            x: -3.5,\n            y: 4.5,\n        },\n        direction: 5,\n    },\n]\n// (0, 0) bending right 45 degrees to (2, 1) curve\n// The diagonal should be a bottomright-to-topright diagonal with the ending rail piece being the topleft piece\nexport const diagonalFrontRightCurve: iBlueprintItemWithoutNumber[] = [\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -3,\n            y: 2,\n        },\n        direction: 7,\n    },\n    {\n        name: \"curved-rail\",\n        position: {\n            x: 2,\n            y: 0,\n        },\n        direction: 6,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: 5,\n            y: -3,\n        },\n        direction: 2,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: 7,\n            y: -3,\n        },\n        direction: 2,\n    },\n    {\n        name: \"rail-chain-signal\",\n        position: {\n            x: -0.5,\n            y: 1.5,\n        },\n        direction: 5,\n    },\n]\n// (-2, -1) bending left 45 degreses to (0, 0) curve\nexport const diagonalBackLeftCurve: iBlueprintItemWithoutNumber[] = [\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -9 - 6,\n            y: 9 - 4,\n        },\n        direction: 2,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -7 - 6,\n            y: 9 - 4,\n        },\n        direction: 2,\n    },\n    {\n        name: \"curved-rail\",\n        position: {\n            x: -6,\n            y: 6,\n        },\n        direction: 2,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -5,\n            y: 1,\n        },\n        direction: 3,\n    },\n    {\n        name: \"rail-signal\",\n        position: {\n            x: -3.5 + 2,\n            y: 4.5 - 2,\n        },\n        direction: 5,\n    },\n]\n// (1, -2) bending right 45 degreses to (0, 0) curve\nexport const diagonalBackRightCurve: iBlueprintItemWithoutNumber[] = [\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -1 - 6,\n            y: 9,\n        },\n        direction: 0,\n    },\n    {\n        name: \"straight-rail\",\n        position: {\n            x: -1 - 6,\n            y: 11,\n        },\n        direction: 0,\n    },\n    {\n        name: \"curved-rail\",\n        position: {\n            x: -4,\n            y: 6,\n        },\n        direction: 1,\n    },\n    {\n        name: \"rail-signal\",\n        position: {\n            x: -2.5,\n            y: 3.5,\n        },\n        direction: 5,\n    },\n]\n","import { defaultSettings } from \"../constants/constants\"\nimport { iBlueprintItem, iBlueprintItemWithoutNumber } from \"../constants/interfaces\"\nimport {\n    getTrainArray,\n    placeTrainTracks,\n    placeSignals,\n    changeItemsCoordinates,\n    placeTrain,\n    resetEntityNumber,\n    assignEntityNumberToItems,\n    copyPasteItems,\n} from \"./CreateItems\"\nimport {\n    backLeftCurve,\n    backRightCurve,\n    frontLeftCurve,\n    frontRightCurve,\n} from \"../constants/verticalStackerCurves\"\nimport {\n    diagonalBackLeftCurve,\n    diagonalBackRightCurve,\n    diagonalFrontLeftCurve,\n    diagonalFrontRightCurve,\n} from \"../constants/diagonalStackerCurves\"\n\nexport const createStacker = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    resetEntityNumber()\n    if (bpSettings.diagonalStacker) {\n        return createDiagonalStacker(bpSettings)\n    } else {\n        return createVerticalStacker(bpSettings)\n    }\n}\n\nexport const createVerticalStacker = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    const trainLength = Math.floor(getTrainArray(bpSettings).length / 2) * 2\n\n    let frontCurve: iBlueprintItem[]\n    let backCurve: iBlueprintItem[]\n    if (bpSettings.stackerType === \"Left-Left\" || bpSettings.stackerType === \"Right-Left\") {\n        frontCurve = assignEntityNumberToItems(frontLeftCurve, -2, -8)\n    } else {\n        frontCurve = assignEntityNumberToItems(frontRightCurve, -2, -8)\n    }\n\n    if (bpSettings.stackerType === \"Left-Left\" || bpSettings.stackerType === \"Left-Right\") {\n        backCurve = assignEntityNumberToItems(backLeftCurve, -2, trainLength - 2)\n    } else {\n        backCurve = assignEntityNumberToItems(backRightCurve, -2, trainLength - 2)\n    }\n\n    let copyPasteBlueprint = [\n        ...placeTrainTracks(bpSettings),\n        ...placeSignals(bpSettings),\n        ...frontCurve,\n        ...backCurve,\n    ]\n    if (bpSettings.includeTrainInBlueprint)\n        copyPasteBlueprint = [...copyPasteBlueprint, ...placeTrain(bpSettings)]\n    changeItemsCoordinates(copyPasteBlueprint, -0.5)\n\n    let allItems: iBlueprintItem[] = []\n    for (let i = 0; i < parseInt(bpSettings.stackerNumberParallelLanes); i++) {\n        allItems = [...allItems, ...copyPasteItems(copyPasteBlueprint, i * 4)]\n    }\n\n    return allItems\n}\n\nexport const createDiagonalStacker = (bpSettings: typeof defaultSettings): iBlueprintItem[] => {\n    const doubleHeadedFactor = bpSettings.doubleHeaded ? 2 : 1\n    const diagonalLength =\n        Math.round(\n            (2.5 *\n                (doubleHeadedFactor * parseInt(bpSettings.locomotivesPerEnd) +\n                    parseInt(bpSettings.cargoWagon))) /\n                2\n        ) *\n            2 +\n        1\n\n    let frontCurve: iBlueprintItem[]\n    let backCurve: iBlueprintItem[]\n    if (bpSettings.stackerType === \"Right-Left\") {\n        frontCurve = assignEntityNumberToItems(diagonalFrontLeftCurve, 8)\n        backCurve = assignEntityNumberToItems(\n            diagonalBackRightCurve,\n            8 - diagonalLength * 2,\n            diagonalLength * 2\n        )\n    } else {\n        frontCurve = assignEntityNumberToItems(diagonalFrontRightCurve, 8)\n        backCurve = assignEntityNumberToItems(\n            diagonalBackLeftCurve,\n            8 - diagonalLength * 2,\n            diagonalLength * 2\n        )\n    }\n    // TODO Support 'include train in blueprint' for diagonal stackers?\n\n    const diagonals: iBlueprintItemWithoutNumber[] = [\n        {\n            name: \"straight-rail\",\n            position: { x: 3, y: 3 },\n            direction: 7,\n        },\n        {\n            name: \"straight-rail\",\n            position: { x: 3, y: 1 },\n            direction: 3,\n        },\n    ]\n\n    let copyPasteBlueprint: iBlueprintItem[] = []\n    for (let i = 0; i < diagonalLength; i++) {\n        const newDiagonals = assignEntityNumberToItems(diagonals, -i * 2, i * 2)\n        copyPasteBlueprint = [...copyPasteBlueprint, ...newDiagonals]\n    }\n    copyPasteBlueprint = [...copyPasteBlueprint, ...frontCurve, ...backCurve]\n\n    let allItems: iBlueprintItem[] = []\n\n    for (let i = 0; i < parseInt(bpSettings.stackerNumberParallelLanes); i++) {\n        if (bpSettings.stackerType === \"Left-Right\") {\n            allItems = [...allItems, ...copyPasteItems(copyPasteBlueprint, i * 4, 0)]\n        } else {\n            allItems = [...allItems, ...copyPasteItems(copyPasteBlueprint, 0, i * 4)]\n        }\n    }\n    return allItems\n}\n","export const CLASSES = {\n    // Title\n    title: \"self-center underline font-bold text-3xl text-gray-300\",\n\n    // Background\n    background: \"bg-gray-800 h-screen\",\n    background2: \"bg-gray-800 flex flex-col\",\n\n    // Sections\n    section: \"border-black p-1 my-1 w-full bg-blue-700\",\n    gridSection: \"grid grid-cols-2 gap-2\",\n    gridSection3cols: \"grid grid-cols-3 gap-2\",\n    gridSection12cols: \"grid grid-cols-12 gap-2 my-1\",\n\n    // HTML Elements\n    checkboxElement: \"h-full place-self-center\",\n    labelElement: \"w-full text-white\",\n    inputTextElement: \"border-2 border-gray-600 w-full bg-blue-900 text-white text-center\",\n    selectElement: \"border-2 border-gray-600 w-full bg-blue-900 text-white\",\n    buttonElement: \"border-2 border-gray-600 m-auto px-4 py-1 text-white rounded hover:bg-blue-300\",\n    // Styling doesnt apply for firefox, but works in chrome\n    optionElement: \"\",\n    footerElements: \"text-center text-gray-500 hover:bg-gray-300 rounded m-auto px-2 my-1\",\n    // Error message field\n    errorMessageElement:\n        \"text-center text-red-500 text-2xl m-1 p-2 border-2 border-red-500 bg-blue-800\",\n    // Warning message field\n    warningMessageElement: \"text-center text-yellow-500 text-xl m-1 px-2 bg-blue-800\",\n}\n","const TOOLTIPS = {\n    trainLimit:\n        \"Limits the amount of trains that will be at going to this station.<br>If set to dynamic, will automatically set the max amount based on used (loading station) / free (unloading station) space in your chests.\",\n    trainLimitNumberInput: \"Valid: numbers, 'each', alphabetical characters (A, B, ...)\",\n    doubleHeaded: \"Does your train have locomotives at each end (facing both ways)?\",\n    includeTrainInBlueprint:\n        \"If enabled, adds the train with the expected layout to the blueprint.\",\n    enableFilterInserters:\n        \"If enabled, turns all inserters to filters inserters of equivalent level.\",\n    chestType:\n        \"If chest type is a logistic chest, it is expected that bots will deliver/grab items from the chest. No belts will be placed.\",\n    chestLimit:\n        \"Limits the amount of free slots in the chests.<br>A cargo wagon has 40 slots, so 6 chests with 7 slots have enough capacity to fill one wagon, or 12 chests with 4.\",\n    beltFlow: \"If enabled, adds belt flow to the top/bottom of the station.\",\n    refillEnabled:\n        \"If enabled, places an inserter and a requester chest next to each locomotive with the desired fuel type and amount.\",\n    connectChestsWithGreenWire:\n        \"If enabled, connects all chests on the left and all chests / storage tanks on the right together with green wire.\",\n    connectBothSideWithGreenWire:\n        \"If enabled, connects the top left and top right chest / storage tank with green wire.\",\n    connectChestsWithRedWire:\n        \"If enabled, connects all chests on the left and all chests / storage tanks on the right together with green wire.\",\n    connectBothSideWithRedWire:\n        \"If enabled, connects the top left and top right chest / storage tank with red wire.\",\n    trainStopUsesEnabledCondition:\n        \"If enabled, adds a decider combinator.<br>Then it creates a green wire connection with trainStop-deciderCombinator-poles-topChest.<br>The train stop will be enabled if the condition (e.g. sum of items in chests > 4000) is met.\",\n}\nexport default TOOLTIPS\n","import React from \"react\"\nimport { iSectionsProps } from \"../../constants/interfaces\"\nimport { CLASSES } from \"../../css/classes\"\nimport TOOLTIPS from \"../../constants/tooltips\"\nimport { fluidStation } from \"../../constants/constants\"\n\nexport default function TrainTypeSettings(props: iSectionsProps): JSX.Element {\n    const hideIfDiagonalStacker =\n        props.userSettings.stationType === \"Stacker\" && props.userSettings.diagonalStacker\n    const cargoWagonName = fluidStation.includes(props.userSettings.stationType) ? \"fluid\" : \"cargo\"\n    return (\n        <div className={CLASSES.section}>\n            <div className={CLASSES.gridSection}>\n                <input\n                    className={CLASSES.checkboxElement}\n                    type={\"checkbox\"}\n                    min={\"0\"}\n                    id={\"doubleHeaded\"}\n                    data-tip={TOOLTIPS.doubleHeaded}\n                    checked={props.userSettings.doubleHeaded}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            doubleHeaded: e.target.checked,\n                        })\n                    }}\n                />\n                <label className={CLASSES.labelElement} htmlFor={\"doubleHeaded\"}>\n                    Double Headed\n                </label>\n                <input\n                    className={CLASSES.inputTextElement}\n                    type={\"number\"}\n                    min={\"0\"}\n                    id={\"locomotivesPerEnd\"}\n                    value={props.userSettings.locomotivesPerEnd}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            locomotivesPerEnd: e.target.value,\n                        })\n                    }}\n                />\n                <label className={CLASSES.labelElement} htmlFor={\"locomotivesPerEnd\"}>\n                    # locomotives per end\n                </label>\n                <input\n                    className={CLASSES.inputTextElement}\n                    type={\"number\"}\n                    min={\"0\"}\n                    id={\"cargoWagon\"}\n                    value={props.userSettings.cargoWagon}\n                    onChange={(e) => {\n                        props.setUserSettings({ ...props.userSettings, cargoWagon: e.target.value })\n                    }}\n                />\n                <label className={CLASSES.labelElement} htmlFor={\"cargoWagon\"}>\n                    {`# ${cargoWagonName} wagons`}\n                </label>\n                <input\n                    className={CLASSES.checkboxElement}\n                    hidden={hideIfDiagonalStacker}\n                    type={\"checkbox\"}\n                    id={\"includeTrainInBlueprint\"}\n                    data-tip={TOOLTIPS.includeTrainInBlueprint}\n                    checked={props.userSettings.includeTrainInBlueprint}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            includeTrainInBlueprint: e.target.checked,\n                        })\n                    }}\n                />\n                <label\n                    className={CLASSES.labelElement}\n                    hidden={hideIfDiagonalStacker}\n                    htmlFor={\"includeTrainInBlueprint\"}\n                >\n                    Include Train in Blueprint\n                </label>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport { inserterTypes, inserterTypesHuman } from \"../../constants/constants\"\nimport { iInserterTypes, iSectionsProps } from \"../../constants/interfaces\"\nimport { CLASSES } from \"../../css/classes\"\nimport TOOLTIPS from \"../../constants/tooltips\"\n\nexport default function InserterSettings(props: iSectionsProps): JSX.Element {\n    // All inserter types\n    const inserterSelect = (\n        <select\n            id={\"inserterType\"}\n            className={CLASSES.selectElement}\n            value={props.userSettings.inserterType}\n            onChange={(e) => {\n                props.setUserSettings({\n                    ...props.userSettings,\n                    inserterType: e.target.value as iInserterTypes,\n                })\n            }}\n        >\n            {inserterTypes.map((inserterType) => {\n                return (\n                    <option\n                        className={CLASSES.optionElement}\n                        key={inserterType}\n                        value={inserterType}\n                    >\n                        {inserterTypesHuman[inserterType]}\n                    </option>\n                )\n            })}\n        </select>\n    )\n\n    const setValueAtIndex = (oldArray: string[], newValue: string, index: number) => {\n        props.setUserSettings({\n            ...props.userSettings,\n            // Replace the value at the fieldIndex using spread operator\n            filterFields: [\n                ...props.userSettings.filterFields.slice(0, index),\n                newValue,\n                ...props.userSettings.filterFields.slice(index + 1),\n            ],\n        })\n    }\n\n    const isFilterInserter = props.userSettings.enableFilterInserters\n\n    const newFilterInputField = (index: number) => {\n        return (\n            <input\n                key={`${index}`}\n                className={CLASSES.inputTextElement}\n                hidden={!isFilterInserter}\n                list={\"itemlist\"}\n                value={props.userSettings.filterFields[index]}\n                placeholder={\n                    index === 0 ? \"Filter 1 - e.g. 'iron-ore'\" : `Filter ${index + 1} item type`\n                }\n                onChange={(e) => {\n                    setValueAtIndex(props.userSettings.filterFields, e.target.value, index)\n                }}\n            />\n        )\n    }\n\n    // let filterInserterInputFields = []\n    let previousIsEmpty = -1\n    const filterInserterInputFields = new Array(5).fill(0).map((_, index) => {\n        if (previousIsEmpty !== -1 && previousIsEmpty < index) {\n            return undefined\n        }\n        if (props.userSettings.filterFields[index] === \"\") {\n            previousIsEmpty = index\n        }\n        return newFilterInputField(index)\n    })\n\n    return (\n        <div className={CLASSES.section}>\n            <div className={CLASSES.gridSection}>\n                {inserterSelect}\n                <label className={CLASSES.labelElement} htmlFor={\"inserterType\"}>\n                    Inserter Type\n                </label>\n                <input\n                    className={CLASSES.checkboxElement}\n                    id={\"filterInserterEnabled\"}\n                    type={\"checkbox\"}\n                    data-tip={TOOLTIPS.enableFilterInserters}\n                    checked={props.userSettings.enableFilterInserters}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            enableFilterInserters: e.target.checked,\n                        })\n                    }}\n                />\n                <label className={CLASSES.labelElement} htmlFor={\"filterInserterEnabled\"}>\n                    Enabled Filter Inserters\n                </label>\n                {filterInserterInputFields}\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport { iChestTypes, iSectionsProps } from \"../../constants/interfaces\"\nimport { CLASSES } from \"../../css/classes\"\nimport { chestTypes, chestTypesHuman, requestChestTypes } from \"../../constants/constants\"\nimport TOOLTIPS from \"../../constants/tooltips\"\n\nexport default function ChestTypeSettings(props: iSectionsProps): JSX.Element {\n    const chestTypesHtml = (\n        <select\n            id={\"chestTypes\"}\n            className={CLASSES.selectElement}\n            value={props.userSettings.chestType}\n            data-tip={TOOLTIPS.chestType}\n            onChange={(e) => {\n                props.setUserSettings({\n                    ...props.userSettings,\n                    chestType: e.target.value as iChestTypes,\n                })\n            }}\n        >\n            {chestTypes.map((chestType) => {\n                return (\n                    <option className={CLASSES.optionElement} key={chestType} value={chestType}>\n                        {chestTypesHuman[chestType]}\n                    </option>\n                )\n            })}\n        </select>\n    )\n\n    const isRequesterChest = requestChestTypes.includes(props.userSettings.chestType)\n    const canRequestFromBufferChests = props.userSettings.chestType === \"logistic-chest-requester\"\n\n    let previousIsEmpty = -1\n    const chestRequests = new Array(24).fill(0).map((_, i) => {\n        const index = Math.floor(i / 2)\n        if (previousIsEmpty !== -1 && previousIsEmpty < index) {\n            return undefined\n        }\n        if (props.userSettings.chestRequestItemsType[index] === \"\") {\n            previousIsEmpty = index\n        }\n        if (i % 2 === 0) {\n            return (\n                <input\n                    className={CLASSES.inputTextElement}\n                    hidden={!isRequesterChest}\n                    list={\"itemlist\"}\n                    key={`${index} chestRequestItemsType`}\n                    type={\"text\"}\n                    value={props.userSettings.chestRequestItemsType[index]}\n                    placeholder={`Request ${index + 1} item type`}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            chestRequestItemsType: [\n                                ...props.userSettings.chestRequestItemsType.slice(0, index),\n                                e.target.value,\n                                ...props.userSettings.chestRequestItemsType.slice(index + 1),\n                            ],\n                        })\n                    }}\n                />\n            )\n        } else {\n            return (\n                <input\n                    className={CLASSES.inputTextElement}\n                    hidden={!isRequesterChest}\n                    key={`${index} chestRequestItemsAmount`}\n                    type={\"number\"}\n                    min={\"0\"}\n                    value={props.userSettings.chestRequestItemsAmount[index]}\n                    placeholder={`Request ${index + 1} amount`}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            chestRequestItemsAmount: [\n                                ...props.userSettings.chestRequestItemsAmount.slice(0, index),\n                                e.target.value,\n                                ...props.userSettings.chestRequestItemsAmount.slice(index + 1),\n                            ],\n                        })\n                    }}\n                />\n            )\n        }\n    })\n\n    return (\n        <div className={CLASSES.section}>\n            <div className={CLASSES.gridSection}>\n                {chestTypesHtml}\n                <label className={CLASSES.labelElement} htmlFor={\"chestTypes\"}>\n                    Chest Type\n                </label>\n                <input\n                    className={CLASSES.inputTextElement}\n                    type={\"number\"}\n                    min={\"0\"}\n                    value={props.userSettings.chestLimit}\n                    data-tip={TOOLTIPS.chestLimit}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            chestLimit: e.target.value,\n                        })\n                    }}\n                />\n                <label className={CLASSES.labelElement} htmlFor={\"chestTypes\"}>\n                    Chest limit\n                </label>\n                <input\n                    className={CLASSES.checkboxElement}\n                    hidden={!canRequestFromBufferChests}\n                    id={\"requestFromBuffers\"}\n                    type={\"checkbox\"}\n                    checked={props.userSettings.chestRequestFromBuffers}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            chestRequestFromBuffers: e.target.checked,\n                        })\n                    }}\n                />\n                <label\n                    className={CLASSES.labelElement}\n                    hidden={!canRequestFromBufferChests}\n                    htmlFor={\"requestFromBuffers\"}\n                >\n                    Request from Buffers\n                </label>\n                {chestRequests}\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport { iBeltSides, iBeltTypes, iSectionsProps } from \"../../constants/interfaces\"\nimport { CLASSES } from \"../../css/classes\"\nimport {\n    beltFlowDirections,\n    beltSides,\n    beltTypes,\n    beltTypesHuman,\n    botChestTypes,\n} from \"../../constants/constants\"\nimport TOOLTIPS from \"../../constants/tooltips\"\n\nexport default function BeltTypeSettings(props: iSectionsProps): JSX.Element {\n    const hideIfBotChests = botChestTypes.includes(props.userSettings.chestType)\n\n    const beltTypesHtml = (\n        <select\n            id={\"beltType\"}\n            className={CLASSES.selectElement}\n            value={props.userSettings.beltType}\n            onChange={(e) => {\n                props.setUserSettings({\n                    ...props.userSettings,\n                    beltType: e.target.value as iBeltTypes,\n                })\n            }}\n        >\n            {beltTypes.map((beltType) => {\n                return (\n                    <option className={CLASSES.optionElement} key={beltType} value={beltType}>\n                        {beltTypesHuman[beltType]}\n                    </option>\n                )\n            })}\n        </select>\n    )\n\n    const beltSideHtml = (\n        <select\n            id={\"sidesUsed\"}\n            className={CLASSES.selectElement}\n            value={props.userSettings.beltSidesUsed}\n            onChange={(e) => {\n                props.setUserSettings({\n                    ...props.userSettings,\n                    beltSidesUsed: e.target.value as iBeltSides,\n                })\n            }}\n        >\n            {beltSides.map((beltSide) => {\n                return (\n                    <option className={CLASSES.optionElement} key={beltSide} value={beltSide}>\n                        {beltSide}\n                    </option>\n                )\n            })}\n        </select>\n    )\n    const beltFlowHtml = (\n        <select\n            id={\"beltFlow\"}\n            className={CLASSES.selectElement}\n            value={props.userSettings.beltFlowDirection}\n            data-tip={TOOLTIPS.beltFlow}\n            onChange={(e) => {\n                props.setUserSettings({ ...props.userSettings, beltFlowDirection: e.target.value })\n            }}\n        >\n            {beltFlowDirections.map((beltFlow) => {\n                return (\n                    <option className={CLASSES.optionElement} key={beltFlow} value={beltFlow}>\n                        {beltFlow}\n                    </option>\n                )\n            })}\n        </select>\n    )\n\n    return (\n        <div className={CLASSES.section} hidden={hideIfBotChests}>\n            <div className={CLASSES.gridSection}>\n                {beltTypesHtml}\n                <label className={CLASSES.labelElement} htmlFor={\"beltType\"}>\n                    Belt Type\n                </label>\n                {beltSideHtml}\n                <label className={CLASSES.labelElement} htmlFor={\"sidesUsed\"}>\n                    Sides to be used\n                </label>\n                {beltFlowHtml}\n                <label className={CLASSES.labelElement} htmlFor={\"beltFlow\"}>\n                    Belt Flow\n                </label>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport { iRefillFuelTypes, iSectionsProps } from \"../../constants/interfaces\"\nimport { CLASSES } from \"../../css/classes\"\nimport { refillFuelTypes, refillFuelTypesHuman } from \"../../constants/constants\"\nimport TOOLTIPS from \"../../constants/tooltips\"\n\nexport default function RefillSettings(props: iSectionsProps): JSX.Element {\n    const fuelTypesHtml = (\n        <select\n            className={CLASSES.selectElement}\n            hidden={!props.userSettings.refillEnabled}\n            value={props.userSettings.refillFuelType}\n            onChange={(e) => {\n                props.setUserSettings({\n                    ...props.userSettings,\n                    refillFuelType: e.target.value as iRefillFuelTypes,\n                })\n            }}\n        >\n            {refillFuelTypes.map((fuelType) => {\n                return (\n                    <option className={CLASSES.optionElement} key={fuelType} value={fuelType}>\n                        {refillFuelTypesHuman[fuelType]}\n                    </option>\n                )\n            })}\n        </select>\n    )\n\n    return (\n        <div className={CLASSES.section}>\n            <div className={CLASSES.gridSection}>\n                <input\n                    className={CLASSES.checkboxElement}\n                    type={\"checkbox\"}\n                    id={\"refillEnabled\"}\n                    checked={props.userSettings.refillEnabled}\n                    data-tip={TOOLTIPS.refillEnabled}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            refillEnabled: e.target.checked,\n                        })\n                    }}\n                />\n                <label className={CLASSES.labelElement} htmlFor={\"refillEnabled\"}>\n                    Refill at this Station?\n                </label>\n                {fuelTypesHtml}\n                <label\n                    className={CLASSES.labelElement}\n                    hidden={!props.userSettings.refillEnabled}\n                    htmlFor={\"fuelTypes\"}\n                >\n                    Fuel Type\n                </label>\n                <input\n                    type={\"number\"}\n                    className={CLASSES.inputTextElement}\n                    hidden={!props.userSettings.refillEnabled}\n                    value={props.userSettings.refillFuelAmount}\n                    min={\"0\"}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            refillFuelAmount: e.target.value,\n                        })\n                    }}\n                />\n                <label\n                    className={CLASSES.labelElement}\n                    hidden={!props.userSettings.refillEnabled}\n                    htmlFor={\"fuelAmount\"}\n                >\n                    Amount\n                </label>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport { iSectionsProps } from \"../../constants/interfaces\"\nimport { CLASSES } from \"../../css/classes\"\nimport TOOLTIPS from \"../../constants/tooltips\"\n\nexport default function WireSettings(props: iSectionsProps): JSX.Element {\n    const normalTypes = [\"Loading Station\", \"Unloading Station\"]\n    const fluidTypes = [\"Fluid Loading Station\", \"Fluid Unloading Station\"]\n    const hiddenWhenNormalStation = normalTypes.includes(props.userSettings.stationType)\n    const hiddenWhenFluidStation = fluidTypes.includes(props.userSettings.stationType)\n    const hiddenWhenNotBothSides = props.userSettings.beltSidesUsed !== \"Both\"\n\n    const myCheckbox = (\n        keyName:\n            | \"connectChestsWithGreenWire\"\n            | \"connectBothSideWithGreenWire\"\n            | \"connectChestsWithRedWire\"\n            | \"connectBothSideWithRedWire\",\n        hidden = false\n    ) => {\n        return (\n            <input\n                className={CLASSES.checkboxElement}\n                hidden={hidden}\n                key={keyName}\n                type={\"checkbox\"}\n                id={keyName}\n                checked={props.userSettings[keyName]}\n                data-tip={TOOLTIPS[keyName]}\n                onChange={(e) => {\n                    props.setUserSettings({\n                        ...props.userSettings,\n                        [keyName]: e.target.checked,\n                    })\n                }}\n            />\n        )\n    }\n\n    return (\n        <div className={CLASSES.section}>\n            <div className={CLASSES.gridSection}>\n                {myCheckbox(\"connectChestsWithGreenWire\")}\n                <label\n                    className={CLASSES.labelElement}\n                    hidden={hiddenWhenFluidStation}\n                    htmlFor={\"connectChestsWithGreenWire\"}\n                >\n                    Connect chests with green wire?\n                </label>\n                <label\n                    className={CLASSES.labelElement}\n                    hidden={hiddenWhenNormalStation}\n                    htmlFor={\"connectChestsWithGreenWire\"}\n                >\n                    Connect storage tanks with green wire?\n                </label>\n                {myCheckbox(\n                    \"connectBothSideWithGreenWire\",\n                    hiddenWhenFluidStation || hiddenWhenNotBothSides\n                )}\n                <label\n                    className={CLASSES.labelElement}\n                    hidden={hiddenWhenFluidStation || hiddenWhenNotBothSides}\n                    htmlFor={\"connectBothSideWithGreenWire\"}\n                >\n                    Connect both sides with green wire?\n                </label>\n                {myCheckbox(\"connectChestsWithRedWire\")}\n                <label\n                    className={CLASSES.labelElement}\n                    hidden={hiddenWhenFluidStation}\n                    htmlFor={\"connectChestsWithRedWire\"}\n                >\n                    Connect chests with red wire?\n                </label>\n                <label\n                    className={CLASSES.labelElement}\n                    hidden={hiddenWhenNormalStation}\n                    htmlFor={\"connectChestsWithGreenWire\"}\n                >\n                    Connect storage tanks with red wire?\n                </label>\n                {myCheckbox(\n                    \"connectBothSideWithRedWire\",\n                    hiddenWhenFluidStation || hiddenWhenNotBothSides\n                )}\n                <label\n                    className={CLASSES.labelElement}\n                    hidden={hiddenWhenFluidStation || hiddenWhenNotBothSides}\n                    htmlFor={\"connectBothSideWithRedWire\"}\n                >\n                    Connect both sides with red wire?\n                </label>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport { iEnabledConditionOperators, iSectionsProps } from \"../../constants/interfaces\"\nimport { CLASSES } from \"../../css/classes\"\nimport {\n    enabledConditionOperators,\n    enabledConditionOperatorsHuman,\n} from \"../../constants/constants\"\nimport TOOLTIPS from \"../../constants/tooltips\"\n\nexport default function EnabledConditionSettings(props: iSectionsProps): JSX.Element {\n    const hideIfCheckboxDisabled = !props.userSettings.trainStopUsesEnabledCondition\n\n    const enabledConditionOperatorHtml = (\n        <select\n            className={CLASSES.selectElement}\n            hidden={hideIfCheckboxDisabled}\n            value={props.userSettings.enabledConditionOperator}\n            onChange={(e) => {\n                props.setUserSettings({\n                    ...props.userSettings,\n                    enabledConditionOperator: e.target.value as iEnabledConditionOperators,\n                })\n            }}\n        >\n            {enabledConditionOperators.map((operator) => {\n                return (\n                    <option className={CLASSES.optionElement} key={operator} value={operator}>\n                        {enabledConditionOperatorsHuman[operator]}\n                    </option>\n                )\n            })}\n        </select>\n    )\n\n    return (\n        <div className={CLASSES.section}>\n            <div className={CLASSES.gridSection}>\n                <input\n                    className={CLASSES.checkboxElement}\n                    type={\"checkbox\"}\n                    id={\"trainStopUsesEnabledCondition\"}\n                    checked={props.userSettings.trainStopUsesEnabledCondition}\n                    data-tip={TOOLTIPS.trainStopUsesEnabledCondition}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            trainStopUsesEnabledCondition: e.target.checked,\n                        })\n                    }}\n                />\n                <label className={CLASSES.labelElement} htmlFor={\"trainStopUsesEnabledCondition\"}>\n                    {\"Train stop uses 'enabled-condition'?\"}\n                </label>\n                {enabledConditionOperatorHtml}\n                <input\n                    type={\"number\"}\n                    className={CLASSES.selectElement}\n                    hidden={hideIfCheckboxDisabled}\n                    placeholder={\"Amount of items\"}\n                    value={props.userSettings.enabledConditionAmount}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            enabledConditionAmount: e.target.value,\n                        })\n                    }}\n                />\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport { iSectionsProps } from \"../../constants/interfaces\"\nimport { CLASSES } from \"../../css/classes\"\n\nexport default function LampsSettings(props: iSectionsProps): JSX.Element {\n    return (\n        <div className={CLASSES.section}>\n            <div className={CLASSES.gridSection}>\n                <input\n                    className={CLASSES.checkboxElement}\n                    type={\"checkbox\"}\n                    id={\"placeLampsNearPoles\"}\n                    checked={props.userSettings.placeLampsNearPoles}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            placeLampsNearPoles: e.target.checked,\n                        })\n                    }}\n                />\n                <label className={CLASSES.labelElement} htmlFor={\"placeLampsNearPoles\"}>\n                    Place lamps near poles?\n                </label>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport { iSectionsProps } from \"../../constants/interfaces\"\nimport { CLASSES } from \"../../css/classes\"\n\nexport default function StationNameSettings(props: iSectionsProps): JSX.Element {\n    return (\n        <div>\n            <div className={CLASSES.section}>\n                <input\n                    className={CLASSES.inputTextElement}\n                    type={\"text\"}\n                    placeholder={\"Station Name\"}\n                    value={props.userSettings.stationName}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            stationName: e.target.value,\n                        })\n                    }}\n                />\n            </div>\n        </div>\n    )\n}\n","import {\n    allowedCharacters,\n    defaultSettings,\n    fluidStation,\n    iOperator,\n    normalStation,\n} from \"./constants\"\n\nconst verifyNumberInput = (myInput: string) => {\n    // Return true if it is a parseable number\n    return !isNaN(parseInt(myInput))\n}\n\nexport const checkForHintsBlueprintSettings = (bpSettings: typeof defaultSettings): string => {\n    if (parseInt(bpSettings.locomotivesPerEnd) + parseInt(bpSettings.cargoWagon) > 200) {\n        return \"Your amount of locomotives and cargo wagons is extremely high and might crash your browser!\"\n    }\n    if (bpSettings.stationType === \"Stacker\") {\n        if (parseInt(bpSettings.stackerNumberParallelLanes) > 100) {\n            return \"Your amount of parallel stacker lanes is extremely high and may crash your browser!\"\n        }\n    }\n    if (fluidStation.includes(bpSettings.stationType)) {\n        if (parseInt(bpSettings.pumpStorageTankColumns) > 500) {\n            return \"Your amount of storage tanks is extremely high and might crash your browser!\"\n        }\n    }\n    if (bpSettings.stationType !== \"Stacker\") {\n        if (bpSettings.trainStopUsesEnabledCondition && !bpSettings.connectChestsWithGreenWire) {\n            return \"If 'train stop uses-enabled condition' is enabled, you should also enable 'connect chests/storage tanks with green wire'.\"\n        }\n    }\n    // No hint could be found\n    return \"\"\n}\n\nexport const validateBlueprintSettings = (bpSettings: typeof defaultSettings): string => {\n    if (!verifyNumberInput(bpSettings.locomotivesPerEnd)) {\n        return \"The given locomotive count is not a number.\"\n    }\n    if (!verifyNumberInput(bpSettings.cargoWagon)) {\n        return \"The given cargo count is not a number.\"\n    }\n    if (\n        bpSettings.stationType === \"Loading Station\" ||\n        bpSettings.stationType === \"Unloading Station\"\n    ) {\n        for (let i = 0; i < 12; i++) {\n            const itemType = bpSettings.chestRequestItemsType[i]\n            const numberAsString = bpSettings.chestRequestItemsAmount[i]\n\n            if (itemType !== \"\" && !verifyNumberInput(numberAsString)) {\n                return `Chest request at position ${i + 1} is not a number.`\n            }\n        }\n    }\n    if (parseInt(bpSettings.locomotivesPerEnd) < 0) {\n        return \"The given locomotives amount is invalid.\"\n    }\n    if (parseInt(bpSettings.cargoWagon) < 0) {\n        return \"The given cargo wagon amount is invalid.\"\n    }\n    if (bpSettings.stationType === \"Stacker\") {\n        if (parseInt(bpSettings.stackerNumberParallelLanes) < 0) {\n            return \"Invalid number of parallel stacker lanes.\"\n        }\n    }\n    if (normalStation.includes(bpSettings.stationType) && bpSettings.trainLimit === \"Dynamic\") {\n        if (\n            !verifyNumberInput(bpSettings.trainLimitArithmetic1Constant1) &&\n            !allowedCharacters.includes(bpSettings.trainLimitArithmetic1Constant1) &&\n            bpSettings.trainLimitArithmetic1Constant1 !== \"each\"\n        ) {\n            return \"First input in the first arithmetic combinator is invalid.\"\n        }\n        if (\n            !verifyNumberInput(bpSettings.trainLimitArithmetic1Constant2) &&\n            !allowedCharacters.includes(bpSettings.trainLimitArithmetic1Constant2) &&\n            bpSettings.trainLimitArithmetic1Constant2 !== \"each\"\n        ) {\n            return \"Last input in the first arithmetic combinator is invalid.\"\n        }\n        if (\n            !verifyNumberInput(bpSettings.trainLimitArithmetic2Constant1) &&\n            !allowedCharacters.includes(bpSettings.trainLimitArithmetic2Constant1) &&\n            bpSettings.trainLimitArithmetic2Constant1 !== \"each\"\n        ) {\n            return \"First input in the second arithmetic combinator is invalid.\"\n        }\n        if (\n            !verifyNumberInput(bpSettings.trainLimitArithmetic2Constant2) &&\n            !allowedCharacters.includes(bpSettings.trainLimitArithmetic2Constant2) &&\n            bpSettings.trainLimitArithmetic2Constant2 !== \"each\"\n        ) {\n            return \"Last input in the second arithmetic combinator is invalid.\"\n        }\n    }\n    if (fluidStation.includes(bpSettings.stationType)) {\n        if (!verifyNumberInput(bpSettings.pumpStorageTankColumns)) {\n            return \"Input for amount of storage tank columns is invalid.\"\n        }\n        if (parseInt(bpSettings.pumpStorageTankColumns) < 1) {\n            return \"Amount of storage tank columns has to be at least 1.\"\n        }\n    }\n    if (bpSettings.stationType !== \"Stacker\") {\n        if (parseInt(bpSettings.chestLimit) < 0) {\n            return \"The given chest limit is invalid.\"\n        }\n        if (bpSettings.refillEnabled && parseInt(bpSettings.refillFuelAmount) < 0) {\n            return \"The given fuel amount is invalid.\"\n        }\n        if (bpSettings.chestLimit != \"\" && !verifyNumberInput(bpSettings.chestLimit)) {\n            return \"The given chest limit is not a number.\"\n        }\n        if (bpSettings.refillEnabled && !verifyNumberInput(bpSettings.refillFuelAmount)) {\n            return \"The given refill amount is not a number.\"\n        }\n        if (\n            bpSettings.trainStopUsesEnabledCondition &&\n            !verifyNumberInput(bpSettings.enabledConditionAmount)\n        ) {\n            return \"The given 'enabled-condition' amount is not a number.\"\n        }\n    }\n    // No error was found\n    return \"\"\n}\n\nexport const calcCombinatorSettings = (\n    bpSettings: typeof defaultSettings,\n    stackSize = 50\n): [string, iOperator, string, string, iOperator, string] => {\n    const cargoCount = parseInt(bpSettings.cargoWagon)\n\n    // Calculate total number of chests\n    const sidesFactor = bpSettings.beltSidesUsed === \"Both\" ? 2 : 1\n    let totalChestCount = 0\n    if (normalStation.includes(bpSettings.stationType)) {\n        totalChestCount = sidesFactor * 6 * cargoCount\n    } else {\n        // Fluid stations only use one side, and there is 2 tanks per cargo wagon\n        totalChestCount = 2 * cargoCount\n    }\n\n    // Calculate how many items the green-wire connected chests can contain\n    const chestLimit = bpSettings.chestLimit === \"\" ? 999999 : parseInt(bpSettings.chestLimit)\n    let connectedChestCount = 1\n    if (bpSettings.connectChestsWithGreenWire) {\n        if (normalStation.includes(bpSettings.stationType)) {\n            // For normal stations, there is 6 chests per cargo wagon per side\n            connectedChestCount *= 6 * cargoCount\n        } else {\n            // For fluid stations, there is 2 storage tanks per cargo wagon\n            connectedChestCount *= 2 * cargoCount\n        }\n    }\n    if (\n        bpSettings.connectBothSideWithGreenWire &&\n        bpSettings.beltSidesUsed === \"Both\" &&\n        normalStation.includes(bpSettings.stationType)\n    ) {\n        // If both sides are used, double the amount of chests (only one side is used for fluid stations\n        connectedChestCount *= 2\n    }\n    const chestType = bpSettings.chestType\n    let chestSlotsCount = chestType === \"wooden-chest\" ? 16 : chestType === \"iron-chest\" ? 32 : 48\n    chestSlotsCount = Math.min(chestLimit, chestSlotsCount)\n    let chestTotalItemCount = 0\n    // Calculate how many items the cargo wagons can contain\n    const trainSlotsCount = 40\n    let trainTotalItemCount = 0\n    if (normalStation.includes(bpSettings.stationType)) {\n        chestTotalItemCount = stackSize * chestSlotsCount * connectedChestCount\n        trainTotalItemCount =\n            cargoCount * trainSlotsCount * stackSize * (connectedChestCount / totalChestCount)\n    } else {\n        // All fluid wagons have room for 25k fluids\n        stackSize = 25000\n        chestTotalItemCount =\n            stackSize * connectedChestCount * parseInt(bpSettings.pumpStorageTankColumns)\n        trainTotalItemCount = cargoCount * stackSize * (connectedChestCount / totalChestCount)\n    }\n\n    if (\n        bpSettings.stationType === \"Loading Station\" ||\n        bpSettings.stationType === \"Fluid Loading Station\"\n    ) {\n        return [\"each\", \"/\", Math.round(trainTotalItemCount).toString(), \"L\", \"+\", \"0\"]\n    }\n\n    if (\n        bpSettings.stationType === \"Unloading Station\" ||\n        bpSettings.stationType === \"Fluid Unloading Station\"\n    ) {\n        return [\n            \"each\",\n            \"/\",\n            Math.round(trainTotalItemCount).toString(),\n            Math.floor(chestTotalItemCount / trainTotalItemCount).toString(),\n            \"-\",\n            \"L\",\n        ]\n    }\n\n    return [\"0\", \"+\", \"0\", \"0\", \"+\", \"0\"]\n}\n","import React from \"react\"\nimport { iSectionsProps } from \"../../constants/interfaces\"\nimport { CLASSES } from \"../../css/classes\"\nimport TOOLTIPS from \"../../constants/tooltips\"\nimport {\n    fluidStation,\n    iOperator,\n    normalStation,\n    operatorTypes,\n    trainLimit,\n} from \"../../constants/constants\"\nimport { calcCombinatorSettings } from \"../../constants/helper\"\n\nexport default function StationSettings(props: iSectionsProps): JSX.Element {\n    const hideWhenTrainLimitIsNotDynamic = props.userSettings.trainLimit !== \"Dynamic\"\n    const hideWhenNormalStation = normalStation.includes(props.userSettings.stationType)\n    const hideWhenFluidStation = fluidStation.includes(props.userSettings.stationType)\n\n    const myInput = (\n        key:\n            | \"trainLimitArithmetic1Constant1\"\n            | \"trainLimitArithmetic1Constant2\"\n            | \"trainLimitArithmetic2Constant1\"\n            | \"trainLimitArithmetic2Constant2\"\n    ) => {\n        return (\n            <input\n                type={\"text\"}\n                className={`${CLASSES.inputTextElement} col-span-2`}\n                data-tip={TOOLTIPS.trainLimitNumberInput}\n                hidden={hideWhenTrainLimitIsNotDynamic}\n                value={props.userSettings[key]}\n                onChange={(e) => {\n                    props.setUserSettings({\n                        ...props.userSettings,\n                        [key]: e.target.value,\n                    })\n                }}\n            />\n        )\n    }\n\n    const mySelectOperator = (\n        key: \"trainLimitArithmetic1Operator\" | \"trainLimitArithmetic2Operator\"\n    ) => {\n        return (\n            <select\n                className={`${CLASSES.selectElement} col-span-1`}\n                hidden={hideWhenTrainLimitIsNotDynamic}\n                value={props.userSettings[key]}\n                onChange={(e) => {\n                    props.setUserSettings({\n                        ...props.userSettings,\n                        [key]: e.target.value,\n                    })\n                }}\n            >\n                {operatorTypes.map((operator) => {\n                    return (\n                        <option key={operator} value={operator}>\n                            {operator}\n                        </option>\n                    )\n                })}\n            </select>\n        )\n    }\n\n    const trainLimitHtml = (\n        <select\n            className={`${CLASSES.selectElement} col-span-5`}\n            data-tip={TOOLTIPS.trainLimit}\n            value={props.userSettings.trainLimit}\n            onChange={(e) => {\n                props.setUserSettings({\n                    ...props.userSettings,\n                    trainLimit: e.target.value,\n                })\n            }}\n        >\n            {trainLimit.map((optionStr) => {\n                return (\n                    <option key={optionStr} value={optionStr}>\n                        {optionStr}\n                    </option>\n                )\n            })}\n        </select>\n    )\n\n    const applyArray = (\n        combinatorArray: [string, iOperator, string, string, iOperator, string]\n    ) => {\n        props.setUserSettings({\n            ...props.userSettings,\n            trainLimitArithmetic1Constant1: combinatorArray[0],\n            trainLimitArithmetic1Operator: combinatorArray[1],\n            trainLimitArithmetic1Constant2: combinatorArray[2],\n            trainLimitArithmetic2Constant1: combinatorArray[3],\n            trainLimitArithmetic2Operator: combinatorArray[4],\n            trainLimitArithmetic2Constant2: combinatorArray[5],\n        })\n    }\n\n    return (\n        <div>\n            <div className={CLASSES.section}>\n                <div className={CLASSES.gridSection12cols}>\n                    {trainLimitHtml}\n                    <label className={`${CLASSES.labelElement} col-span-7`}>Train Limit</label>\n                    {myInput(\"trainLimitArithmetic1Constant1\")}\n                    {mySelectOperator(\"trainLimitArithmetic1Operator\")}\n                    {myInput(\"trainLimitArithmetic1Constant2\")}\n                    <label\n                        className={`${CLASSES.labelElement} col-span-7`}\n                        hidden={hideWhenTrainLimitIsNotDynamic}\n                    >\n                        First arithmetic combinator settings\n                    </label>\n                    {myInput(\"trainLimitArithmetic2Constant1\")}\n                    {mySelectOperator(\"trainLimitArithmetic2Operator\")}\n                    {myInput(\"trainLimitArithmetic2Constant2\")}\n                    <label\n                        className={`${CLASSES.labelElement} col-span-7`}\n                        hidden={hideWhenTrainLimitIsNotDynamic}\n                    >\n                        Second arithmetic combinator settings\n                    </label>\n                    <button\n                        className={`${CLASSES.buttonElement} w-full my-1 col-span-4`}\n                        hidden={hideWhenTrainLimitIsNotDynamic || hideWhenFluidStation}\n                        onClick={() => {\n                            applyArray(calcCombinatorSettings(props.userSettings, 50))\n                        }}\n                    >\n                        Calculate for item stack size 50\n                    </button>\n                    <button\n                        className={`${CLASSES.buttonElement} w-full my-1 col-span-4`}\n                        hidden={hideWhenTrainLimitIsNotDynamic || hideWhenFluidStation}\n                        onClick={() => {\n                            applyArray(calcCombinatorSettings(props.userSettings, 100))\n                        }}\n                    >\n                        Calculate for item stack size 100\n                    </button>\n                    <button\n                        className={`${CLASSES.buttonElement} w-full my-1 col-span-4`}\n                        hidden={hideWhenTrainLimitIsNotDynamic || hideWhenFluidStation}\n                        onClick={() => {\n                            applyArray(calcCombinatorSettings(props.userSettings, 200))\n                        }}\n                    >\n                        Calculate for item stack size 200\n                    </button>\n                    <button\n                        className={`${CLASSES.buttonElement} w-full my-1 col-span-12`}\n                        hidden={hideWhenTrainLimitIsNotDynamic || hideWhenNormalStation}\n                        onClick={() => {\n                            applyArray(calcCombinatorSettings(props.userSettings, 200))\n                        }}\n                    >\n                        Calculate combinator settings\n                    </button>\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport TrainTypeSettings from \"../Sections/TrainTypeSettings\"\nimport { iSectionsProps } from \"../../constants/interfaces\"\nimport InserterSettings from \"../Sections/InserterSettings\"\nimport ChestTypeSettings from \"../Sections/ChestTypeSettings\"\nimport BeltTypeSettings from \"../Sections/BeltTypeSettings\"\nimport RefillSettings from \"../Sections/RefillSettings\"\nimport WireSettings from \"../Sections/WireSettings\"\nimport EnabledConditionSettings from \"../Sections/EnabledConditionSettings\"\nimport LampsSettings from \"../Sections/LampsSettings\"\nimport StationNameSettings from \"../Sections/StationNameSettings\"\nimport StationSettings from \"../Sections/StationSettings\"\n\nexport default function NormalStation(props: iSectionsProps): JSX.Element {\n    return (\n        <div className={\"flex flex-col\"}>\n            <div className={\"grid gap-x-4 grid-cols-1 lg:grid-cols-2\"}>\n                <div>\n                    <StationNameSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                    <StationSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                    <TrainTypeSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                    <InserterSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                    <ChestTypeSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                </div>\n                <div>\n                    <BeltTypeSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n\n                    <RefillSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                    <WireSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                    <EnabledConditionSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                    <LampsSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport { iPumpSides, iSectionsProps } from \"../../constants/interfaces\"\nimport { CLASSES } from \"../../css/classes\"\nimport { pumpSides } from \"../../constants/constants\"\n\nexport default function FluidSettings(props: iSectionsProps): JSX.Element {\n    const pumpSideHtml = (\n        <select\n            id={\"sidesUsed\"}\n            className={CLASSES.selectElement}\n            value={props.userSettings.pumpSidesToBeUsed}\n            onChange={(e) => {\n                props.setUserSettings({\n                    ...props.userSettings,\n                    pumpSidesToBeUsed: e.target.value as iPumpSides,\n                })\n            }}\n        >\n            {pumpSides.map((pumpSide) => {\n                return (\n                    <option className={CLASSES.optionElement} key={pumpSide} value={pumpSide}>\n                        {pumpSide}\n                    </option>\n                )\n            })}\n        </select>\n    )\n\n    return (\n        <div className={CLASSES.section}>\n            <div className={CLASSES.gridSection}>\n                {pumpSideHtml}\n                <label className={CLASSES.labelElement} htmlFor={\"sidesUsed\"}>\n                    Sides to be used\n                </label>\n                <input\n                    className={CLASSES.inputTextElement}\n                    type={\"number\"}\n                    min={\"1\"}\n                    id={\"storageTanksColumn\"}\n                    value={props.userSettings.pumpStorageTankColumns}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            pumpStorageTankColumns: e.target.value,\n                        })\n                    }}\n                />\n                <label className={CLASSES.labelElement} htmlFor={\"storageTanksColumn\"}>\n                    Amount of storage tank columns\n                </label>\n                <input\n                    className={CLASSES.checkboxElement}\n                    type={\"checkbox\"}\n                    id={\"connectTanks\"}\n                    checked={props.userSettings.pumpConnectWithPipe}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            pumpConnectWithPipe: e.target.checked,\n                        })\n                    }}\n                />\n                <label className={CLASSES.labelElement} htmlFor={\"connectTanks\"}>\n                    Connect tanks with pipe?\n                </label>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport TrainTypeSettings from \"../Sections/TrainTypeSettings\"\nimport { iSectionsProps } from \"../../constants/interfaces\"\nimport RefillSettings from \"../Sections/RefillSettings\"\nimport WireSettings from \"../Sections/WireSettings\"\nimport EnabledConditionSettings from \"../Sections/EnabledConditionSettings\"\nimport LampsSettings from \"../Sections/LampsSettings\"\nimport StationNameSettings from \"../Sections/StationNameSettings\"\nimport FluidSettings from \"../Sections/FluidSettings\"\nimport StationSettings from \"../Sections/StationSettings\"\n\nexport default function FluidStation(props: iSectionsProps): JSX.Element {\n    return (\n        <div className={\"flex flex-col\"}>\n            <div className={\"grid gap-x-4 grid-cols-1 lg:grid-cols-2\"}>\n                <div>\n                    <StationNameSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                    <StationSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                    <TrainTypeSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                    <FluidSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                </div>\n                <div>\n                    <RefillSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                    <WireSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                    <EnabledConditionSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                    <LampsSettings\n                        userSettings={props.userSettings}\n                        setUserSettings={props.setUserSettings}\n                    />\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport { CLASSES } from \"../css/classes\"\n\nexport default function Title(): JSX.Element {\n    return <div className={CLASSES.title}>{\"Burny's Train Station Blueprint Creator\"}</div>\n}\n","import React from \"react\"\nimport { CLASSES } from \"../css/classes\"\n\nexport default function Footer(): JSX.Element {\n    return (\n        <div className={`flex flex-col my-2`}>\n            <a\n                className={CLASSES.footerElements}\n                target=\"_blank\"\n                rel=\"noreferrer\"\n                href=\"https://github.com/BurnySc2/Factorio-Train-Station-Blueprint-Creator\"\n            >\n                Contribute\n            </a>\n            <a\n                className={CLASSES.footerElements}\n                target=\"_blank\"\n                rel=\"noreferrer\"\n                href=\"https://github.com/BurnySc2/Factorio-Train-Station-Blueprint-Creator/issues/new\"\n            >\n                Suggestions / Report Bugs\n            </a>\n            <a\n                className={CLASSES.footerElements}\n                target=\"_blank\"\n                rel=\"noreferrer\"\n                href=\"https://www.reddit.com/message/compose/?to=BurnySc2\"\n            >\n                Contact (Reddit)\n            </a>\n        </div>\n    )\n}\n","import React from \"react\"\nimport { iSectionsProps } from \"../../constants/interfaces\"\nimport { CLASSES } from \"../../css/classes\"\nimport { stackerDiagonalTypes, stackerTypes } from \"../../constants/constants\"\n\nexport default function StackerSettings(props: iSectionsProps): JSX.Element {\n    const myCheckbox = (keyName: \"diagonalStacker\") => {\n        return (\n            <input\n                className={CLASSES.checkboxElement}\n                key={keyName}\n                type={\"checkbox\"}\n                id={keyName}\n                checked={props.userSettings[keyName]}\n                onChange={(e) => {\n                    props.setUserSettings({\n                        ...props.userSettings,\n                        [keyName]: e.target.checked,\n                    })\n                }}\n            />\n        )\n    }\n\n    const stackerTypesHtml = (\n        <select\n            className={CLASSES.selectElement}\n            value={props.userSettings.stackerType}\n            onChange={(e) => {\n                props.setUserSettings({\n                    ...props.userSettings,\n                    stackerType: e.target.value,\n                })\n            }}\n        >\n            {stackerTypes.map((type) => {\n                if (props.userSettings.diagonalStacker) return undefined\n                return (\n                    <option key={type} value={type}>\n                        {type}\n                    </option>\n                )\n            })}\n            {stackerDiagonalTypes.map((type) => {\n                if (!props.userSettings.diagonalStacker) return undefined\n                return (\n                    <option key={type} value={type}>\n                        {type}\n                    </option>\n                )\n            })}\n        </select>\n    )\n\n    return (\n        <div className={CLASSES.section}>\n            <div className={CLASSES.gridSection}>\n                <input\n                    className={CLASSES.inputTextElement}\n                    id={\"stackerNumberParallelLanes\"}\n                    value={props.userSettings.stackerNumberParallelLanes}\n                    onChange={(e) => {\n                        props.setUserSettings({\n                            ...props.userSettings,\n                            stackerNumberParallelLanes: e.target.value,\n                        })\n                    }}\n                />\n                <label className={CLASSES.labelElement} htmlFor={\"stackerNumberParallelLanes\"}>\n                    # of parallel lanes\n                </label>\n                {myCheckbox(\"diagonalStacker\")}\n                <label className={CLASSES.labelElement} htmlFor={\"diagonalStacker\"}>\n                    Diagonal Stacker?\n                </label>\n                {stackerTypesHtml}\n                <label className={CLASSES.labelElement} htmlFor={\"leftRightStacker\"}>\n                    Stacker Type\n                </label>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport TrainTypeSettings from \"../Sections/TrainTypeSettings\"\nimport { iSectionsProps } from \"../../constants/interfaces\"\nimport StackerSettings from \"../Sections/StackerSettings\"\n\nexport default function Stacker(props: iSectionsProps): JSX.Element {\n    return (\n        <div className={\"flex flex-col\"}>\n            <TrainTypeSettings\n                userSettings={props.userSettings}\n                setUserSettings={props.setUserSettings}\n            />\n            <StackerSettings\n                userSettings={props.userSettings}\n                setUserSettings={props.setUserSettings}\n            />\n        </div>\n    )\n}\n","import React from \"react\"\nimport { CLASSES } from \"../css/classes\"\nimport { defaultSettings } from \"../constants/constants\"\n\ninterface MyProps {\n    warningMessage: string\n    userSettings: typeof defaultSettings\n}\nexport default function WarningMessage(props: MyProps): JSX.Element | null {\n    if (props.warningMessage === \"\") {\n        return null\n    }\n    return <div className={CLASSES.warningMessageElement}>Hint: {props.warningMessage}</div>\n}\n","import React from \"react\"\nimport { CLASSES } from \"../css/classes\"\n\ninterface MyProps {\n    errorMessage: string\n}\n\nexport default function ErrorMessage(props: MyProps): JSX.Element | null {\n    if (props.errorMessage === \"\") {\n        return null\n    }\n    return <div className={CLASSES.errorMessageElement}>{props.errorMessage}</div>\n}\n","import React, { useEffect, useState } from \"react\"\nimport NormalStation from \"./StationTypes/NormalStation\"\nimport FluidStation from \"./StationTypes/FluidStation\"\nimport Title from \"./Title\"\nimport { defaultSettings, normalStation, stationTypes, fluidStation } from \"../constants/constants\"\nimport { CLASSES } from \"../css/classes\"\nimport Footer from \"./Footer\"\nimport Stacker from \"./StationTypes/Stacker\"\nimport copy from \"copy-to-clipboard\"\nimport { createBlueprint, createBlueprintString } from \"../BlueprintCreation/CreateBlueprint\"\nimport WarningMessage from \"./WarningMessage\"\nimport ErrorMessage from \"./ErrorMessage\"\nimport { checkForHintsBlueprintSettings, validateBlueprintSettings } from \"../constants/helper\"\nimport ReactTooltip from \"react-tooltip\"\nimport itemlist from \"../constants/itemlist.json\"\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst cloneDeep = require(\"clone-deep\")\n\nexport default function Website(): JSX.Element {\n    const [userSettings, setUserSettings] = useState(cloneDeep(defaultSettings))\n    const [blueprintString, setBlueprintString] = useState(\"\")\n    const [warningMessage, setWarningMessage] = useState(\"\")\n    const [errorMessage, setErrorMessage] = useState(\"\")\n\n    useEffect(() => {\n        const newWarningMessage = checkForHintsBlueprintSettings(userSettings)\n        setWarningMessage(newWarningMessage)\n        const newErrorMessage = validateBlueprintSettings(userSettings)\n        setErrorMessage(newErrorMessage)\n    }, [userSettings])\n\n    const stationTypeSelect = (\n        <select\n            className={CLASSES.selectElement}\n            value={userSettings.stationType}\n            onChange={(e) => {\n                setUserSettings({ ...userSettings, stationType: e.target.value })\n            }}\n        >\n            {stationTypes.map((stationType) => {\n                return (\n                    <option className={CLASSES.optionElement} key={stationType} value={stationType}>\n                        {stationType}\n                    </option>\n                )\n            })}\n        </select>\n    )\n\n    // Select which sub-station settings are available\n    let stationTypeHtml: JSX.Element = <div>ERROR LOADING CORRECT STATION TYPE</div>\n    if (normalStation.includes(userSettings.stationType)) {\n        stationTypeHtml = (\n            <NormalStation userSettings={userSettings} setUserSettings={setUserSettings} />\n        )\n    } else if (fluidStation.includes(userSettings.stationType)) {\n        stationTypeHtml = (\n            <FluidStation userSettings={userSettings} setUserSettings={setUserSettings} />\n        )\n    } else if (userSettings.stationType === \"Stacker\") {\n        stationTypeHtml = <Stacker userSettings={userSettings} setUserSettings={setUserSettings} />\n    }\n\n    // Creates the datalist item names to make it easier for autocomplete\n    // Source: https://github.com/kevinta893/factorio-recipes-json recipes.json\n    const itemdatalist = (\n        <datalist id={\"itemlist\"}>\n            {itemlist.map((itemInfo) => {\n                return <option key={itemInfo.id} value={itemInfo.id} />\n            })}\n        </datalist>\n    )\n\n    return (\n        <div className={CLASSES.background}>\n            <div className={CLASSES.background2}>\n                <Title />\n                <div className={\"grid grid-cols-1 justify-items-center m-auto bg-blue-800\"}>\n                    <div className={CLASSES.section}>{stationTypeSelect}</div>\n                    {stationTypeHtml}\n                    {/*Blueprint generation will not work with the current settings, give the user hints how to fix the configuration*/}\n                    <ErrorMessage errorMessage={errorMessage} />\n                    {/*Figure out if some combinations do not work properly and give the user hints how to fix it*/}\n                    <WarningMessage warningMessage={warningMessage} userSettings={userSettings} />\n                    <button\n                        className={CLASSES.buttonElement}\n                        onClick={() => {\n                            if (errorMessage === \"\") {\n                                setBlueprintString(\n                                    createBlueprintString(createBlueprint(userSettings))\n                                )\n                            }\n                        }}\n                    >\n                        Generate Blueprint\n                    </button>\n                    <input\n                        className={`${CLASSES.inputTextElement} my-1`}\n                        hidden={blueprintString.length === 0}\n                        value={`Blueprint length: ${blueprintString.length}`}\n                        readOnly\n                    />\n                    <input\n                        className={`${CLASSES.inputTextElement} my-1`}\n                        placeholder={\"Blueprint string will be generated here.\"}\n                        value={blueprintString}\n                        readOnly\n                    />\n                    <button\n                        className={CLASSES.buttonElement}\n                        onClick={() => {\n                            // Copy to clipboard\n                            copy(blueprintString, {\n                                debug: true,\n                                message: \"asd\",\n                            })\n                        }}\n                    >\n                        Copy to Clipboard\n                    </button>\n                    <Footer />\n                    <ReactTooltip place={\"bottom\"} multiline />\n                    {itemdatalist}\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport Website from \"./Website\"\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\"\n\nexport default function MyRouter(): JSX.Element {\n    return (\n        // TODO use path (params) to be able to link a setting to a friend\n        <Router>\n            <Switch>\n                <Route path=\"/\">\n                    <Website />\n                </Route>\n            </Switch>\n        </Router>\n    )\n}\n","import React from \"react\"\nimport MyRouter from \"./components/MyRouter\"\n\nfunction App(): JSX.Element {\n    return <MyRouter />\n}\n\nexport default App\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport \"./css/style.css\"\nimport App from \"./App\"\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}